binary expressions, are type promoted when necessary
64 bit constant encoding
plugin system
function typed imports
expect will throw on a non-expected token
invalid imports throw
constants must be initialized
array declaration
compiles functions accurately
ternary
greater than
function exports
memory can be defined
global constant export
basic array
i64 locals
multiple node replacements
remainder
unsupported keywords throw
complex brackets
equal
test correct precedence with parenthesis
type generator, floats, 64bit types
imports
postfix increment, statement
typecasts are patched in binary expressions
generates correct offsets for user-defined objects
object indexing and alignment
nodes are walked and callbacks are called for types
else if statement no curly braces
struct typedefs
postfix decrement
generates table declaration
return statmements are only valid inside functions
the most basic of modules in wasm
debug prints web-assembly opcodes
break statement
bitwise and operator
memory store on float arrays
property access
Walt Syntax Definitions
chained logical operators
native opcodes
type generator, single type param
throws
logical and
object declaration
wildcards are called for all nodes
logical and in math expression
node replacement
string
sizeof parser, built-in word types
number literals
global indexes compile correctly
assigment statement
functions must be defined
compiles globals accurately, f32
logical operators
types and assignment
multiplication
subtraction
function call, no arguments
compiles math
types of constants
emiter, emits valid WebAssembly instance
test correct precedence with negative numbers
pre-existing keywords, but which are not supported yet throw
ignores multiline comments and compiles correctly
unary negation, arrays
less than
undefined function vars
generates correct offsets for arrays
parses basic strings
map syntax throws if Type is unknown
struct types in binary expr with nulls
unknown token generates syntax error
array subscript
imports/exports
chain bitwise or operator
returns a valid Program
unterminated assignment statements
type parser, function type
null nodes
plain ast parser
Syntax test suite
sizeof parser, built-in double word types
fibonacci
compiles imports accurately
sizeof parser, arrays throw
else if statement
compiles exports
parses identifiers with numbers
declration assignment
int to float typecasts are compiled
8 byte and 4 byte properties
undefined object properties
void result type is optional
prefix decrement
empty module compilation
for loop
union types and direct addressing
type sizes
assignment, ternary, if
ignores comments
chained subscripts
unary negation
prefix increment
addition
unary negation, simple
mixed replacements
postfix increment
next reads tokens, ignoring whitespace
parses a stream into tokens
type parser, object
type parser, empty params type
compiles large signed global consants correctly
increment
preamble writes correct values
const exports must have value
typecasts work
default arguments
global reference in function scope
compiles globals
array subscript works on everything
pointers as function arguments
block if else statement
opcode is a list of opcodes
function declarations
chain bitwise xor operator
statements as sizeof calls
function names with numbers are supported
emitter, emits valid WebAssembly instance
memory of any shape can be imported
function parameters
sequence, of compound expressions
ast must have metadata attached
for loop parser
undefined types throw
ignores whitespace at the end of file
wide array offsets
parsers strings within strings
eat returns false if not token specified
binary expression results can be typecast
float types
exports must have a value
bitwise operators
sizeof parser, 64 bit variables
print-node
not yet implemented keywords throw
cli wrap command
bitwise or operator
global declaration compilation
compiles globals accurately, i32
function locals
generates globals
unknown user types at global scope, error
array: offset is compound expression
function call, in a return
function calls in expressions
wildcards
ignores multiline comments
closures
returns (src: string) => (importsObj) => Promise<Wasm>
full ast printer
function call
chain bitwise and operator
precedence of logical operators in math expression
unexpected generates syntax error
float to int typecasts are compiled
if then else, complex nested blocks
identifiers
Node types are all strings
functions must return correct types
correct typecasts for float constants
generates memory declaration
unary negation, array subscript
type generator, void return
compiler basics
array index & math
while loop
unterminated declaration statements
bool types
block if statement
unsupported generates a syntax error
function pointers
globals
type generator, type sequence params
functions
compiler tests
invalid sucbscript target
unary negation, variables in expressions
function calls
type definition
untyped imports need to be compiled out via a linker/build step
function pointers, multiple, with table declared
global exports must have value
struct subscript
decrement
const cannot be re-asigned
compiles large signed consants correctly
mapping a node results in a new node
getTypeString returns string version of the constant
increment or decrement and assign
memory can be imported
scope
encodes correct values
test correct precedence
objects
LEB128 unsigned encoding
logical or
non initialized locals
unary negation, does not break math
memory parser
compiler extensions use
correct typecasts for constants
array subscripts on float variables
object literal
plugin invariants
parses strings with escaped string
function params
sizeof parser, built-in type
create a legit module
memory max can be set
for loop params
function parser
nodes can be patched
global constant exports
function declaration
function scope
import expression generator
division
generates scalar exports
break
type generator, empty params
logical or in math expression
generates scalar imports
function pointer
compiles globals accurately
sizeof parser, user-defined object types
memory & table exports
simple string replacement
type parsing
import as
expressions where a statment should be, throw
array assignment
unary negation, superfluous plus operator
wrap returns a JS wrapper module around wasm
read & write
unexpecteValue generates a syntax error
export type statements compile
not equal
array: offset is constant
recursive functions
bitwise xor operator
ignores singleline tokens within multiline and vice-versa
uses precedence correctly
ignores one-liner multiline comments
LEB128 signed encoding
doesn not work on undefined variables
typos throw
sanity check resulting ojects
tee-local
brackets
access on undefined objects
inline if else
ternaries
generated array offsets
invalid type definition
loader works
syntaxError generates an accurate error string
sequence, of constants
parses strings within strings
inline if statement
while parser
functions must have consistent returns
comparison operators
table max can be set
array subscript inside a return statement
