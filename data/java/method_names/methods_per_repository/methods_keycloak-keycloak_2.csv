testAuthenticationChannelCancelled()
testRealmResource().clients().findByClientId("account").get(0);
testExpiredUserCodeTest()
testAppAuthzApp.getClientId());
requestWithEncodingParam()
testEncryptedIdIsReadable()
testFAPIBaselinePublicClientLogin()
testLocalizationPreferenceDuringLogout()
testAuthorizationEncryptionAlgRSA1_5EncA128CBC_HS256()
testAcrValuesSupported()
testConditionWithoutNoConfiguration()
test(SearchableModelField<?
roudtripToJsonExtendedCredentialModel()
verifyWith1024PrivateKeyInTraditionalRSAFormatShouldFail()
testSuccessfulUserInfoResponse(response,
testDeserialization()
testRealms.add(loadTestRealm());
testRealmResource().clientPoliciesProfilesResource().getProfiles(includeGlobalProfiles);
testing().clearEventStore(realmId);
testClientSessionCountExceededAndOldestSessionRemovedBrowserFlow()
errorStandardFlowNotAllowed()
testQueryOrder()
testConfigurationGetSet()
postLogout_validRequestWithInValidOriginShouldFail()
removeInternalClientExpectingBadRequestException()
testDynamicUserProfileReview_requiredReadOnlyAttributeNotRenderedAndNotBlockingProcess()
testPathWithPatternSlashAllAndResourceInstance()
testCorrectOrder()
testSecureCibaSessionEnforceExecutor(boolean
testClientAccessTypeCondition()
testXPathAttributeMapper()
createOrUpdateRealmLocalizationWhenLocaleDoesNotYetExist()
testSecureSigningAlgorithmForSignedJwtEnforceExecutorWithSecureAlg()
testLockConcurrentlyGeneral()
testRolesWithIdsSearchQueries()
testCreateNonDynamicScopeWithFeatureEnabled()
authorizationRequestFragmentJWTResponseMode()
testSuccessDefaultAlgWhenNoAlgSetInJWK()
testSearchForRealmRoles()
testWinEnableMultipleFeatures(LaunchResult
authenticateWithRotatedSecretWithZeroExpirationTime()
deleteOwnAccountSectionNotVisibleWithoutDeleteAccountActionEnabled()
testingClient.server(bc.consumerRealmName()).run(configurePostBrokerLoginWithOTP(samlBrokerConfig.getIDPAlias()));
testArtifactBindingLoginFullExchangeWithPost()
testBackchannelAuthenticationFlow(false);
hexEscape()
testAnyClientCondition()
@RequireProvider(ClientStorageProvider.class)
testPattern5()
testInResponseToSetCorrectly()
testMigrationTo20_0_0()
testUserSessionPropagationBetweenSites()
multipleEssentialAcrValues()
testing().onEvent(create(System.currentTimeMillis()
test(AccessToken
testQuarkusProfilePropertyStillWorks()
testEndpointPermissions()
testConsentRequiredExecutorExecutor()
testingClient.server("passwordPolicy").run(session
testMigrationTo12_x(boolean
userInfoCorsValidRequestWithInvalidUrlShouldFail()
shouldConvertLongsToIntegersSafely()
testRealm.clients().get(clientUUID).addOptionalClientScope(scopeId);
invalidActiveForEnc()
testSanitizeKey()
testStaleCacheConcurrent()
testCodeToTokenRequestSuccess(Algorithm.ES256,
testMigratedData()
testRealm().users().create(newUser1))
essentialClaimNotReachedFails()
testCodeToTokenRequestSuccessES256usingJwksUri()
authenticatorAttachment()
testing().onEvent(create(oldest,
testClientInvocationWithOBBClient("CN=Foo,1.3.6.1.4.1.311.60.2.1.3=#13024252,2.5.4.15=#130f427573696e65737320456e74697479,2.5.4.5=#130e3037323337333733303030313230,OU=My
testSamlAttributes(migrationRealm);
testAttributeGrouping()
testClass.getAnnotation(UseServletFilter.class).filterPattern()
testApp.setRedirectUris(Collections.singletonList(redirectUri));
loginWhenUserExistsOnConsumer()
testRealmResource());
authenticateWithValidClientPolicyEnable()
updateToInvalidEmail(){
testInvalidRedirectUriWhenAdminNotSet()
soapBindingAuthnWithSignatureTest()
testRealm.clientScopes().create(testScope);
testDefaultUserProfileProviderIsActive()
authorizationRequestQueryJWTResponseMode()
testRealm().users().userProfile().update(configuration);
testRolesWithIdsPaginationQueries(this::getResult);
testingClient.testing().exportImport().setAction(ExportImportConfig.ACTION_EXPORT);
testClear()
testCustomAttributeOptional(KeycloakSession
@Migration(versionFrom
regenerateSecret()
testRegisterUserSuccess_attributeRequiredButNotSelectedByScopeIsNotRenderedAndNotBlockingRegistration()
changeCurveFromP384ToP521()
testReadClaimsParameter()
testSaml20DecryptId()
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest(false,
discouragedAny()
testBasicKeycloakDeploymentAndDeletion()
testImpersonationUsingPublicClient()
testStartUsingOptimizedDoesNotAllowBuildOptions(LaunchResult
setUpLinksTest()
testArtifactBindingLoginGetArtifactResponseTwice()
testPattern6()
testCertificateEncodeDecode(cert1);
loginClientCertSignedByIntermediateCA()
testTokenScriptMapping()
testAccountConsoleClientHasDeleteUserRole(migrationRealm);
testUserInfoSignatureAndEncryption(Algorithm.PS384,
testCallbackAfterAuthenticationRequestExpired()
testStartUsingCliArgs(LaunchResult
testFAPIBaselineOIDCClientRegistration()
testRealm().roles().get("realm-role").remove();
testSecretChangesArePropagated()
scopesRoleRemoval()
testRealmResource().components().query(parentId,
testConcurrentNotesChange()
reuseExistingOTP()
testRealmResource();
testDisableStepupFeatureTest()
testAcrInLoginOptionsShouldBeConsideredByLoginUrl()
testRealmResource().clientPoliciesProfilesResource().updateProfiles(profiles);
testRealm.setClientScopes(new
testBuildHelpAll(LaunchResult
testMaxAgeConditionWithForcedReauthentication()
testErrorResponseInvalidOrigin()
testLoginAndClientScopesPermissions("johnDynamic",
localizations()
test.getAttributes().put("frontendUrl",
testUseDefaultPortsWhenProxyIsSet()
testEnableMultipleFeatures(LaunchResult
testClientUriValidation(false,
refreshTokenRequestNoRefreshToken()
testMigrationTo18_x();
testIgnoreQuarkusSystemPropertiesAtStart(LaunchResult
parsesAttributeValueUserTypeWithAttributeAndInnerNamespace()
testConfidentialClientAcceptExecutorExecutor()
rolesCanBeAssignedEvenWhenTheyAreAlreadyIndirectlyAssigned()
testIdTokenEncryptionAlgRSA_OAEPEncDefault()
testRealm.getId(),
testDynamicUserProfileReview_attributeRequiredAndSelectedByScopeMustBeSet()
testRealmResource().clients().get(clientUuid);
testGetUserProfileMetadata_RoAccessToNameFields()
@Ignore("Should
testing().onEvent(create(date2,
testRealm().users().search(userCondNotMatch).get(0).getId();
testClientWithRefreshToken()
failWithLongDescription()
testingClient.testing().exportImport().runExport();
manageAccountRoleRequired()
testUser.getUserSessions();
testBackchannelAuthenticationFlowNotRegisterSigAlgInAdvanceWithSignedAuthenticationRequestParam()
(%t)
testDatabaseUrlProperties()
testingClient.server().run(ClientTokenExchangeTest::setupRealm);
testSecureCibaSessionEnforceExecutor(false);
testTwoRefreshTokensWithDifferentScopes()
updateUserWithExistingEmail()
testRealm.getAttributes().put(REALM_USER_PROFILE_ENABLED,
testRejectResourceOwnerCredentialsGrantExecutor()
testingClient.server().run((KeycloakSession
testSecureRedirectUriEnforceExecutor()
testRemovePolicyWhenOwnerDeleted()
testSamePositionZero()
joinSubGroupAfterParentGroup()
testIntentClientBindCheck()
testBackchannelAuthenticationFlow(true);
testIllegalSchemeClientValidation()
testBackEndUrlFromRequest()
testLengthValidator_ConfigValidation()
testHelp(LaunchResult
validateConfiguration_attributeGroupReferenceErrors()
testGroupAttributeTwoGroupHierarchyNoMultivalueNoAggregateFromParent()
testRealm().flows().getRequiredAction(DeleteAccount.PROVIDER_ID);
testLeftInnerJoinStream()
testDbOptionFromPersistedConfigSource(LaunchResult
testDoNotRecordRuntimeOptionsDuringBuild(KeycloakDistribution
testIdPNotFound()
decode_doNotUseGzip()
testRealmResource().clients().get(id).authorization().getSettings();
testNoRefreshToken()
testRealm).getUserStorageProvidersStream().forEachOrdered(persistentFedModel
testExtendedClientPolicyIntefacesForDeviceTokenResponse()
testErrorMessageInDenyAccess(property,
testClass.getAnnotation(UseServletFilter.class).skipPattern());
testSimpleTwoNodeTreeSwapped()
valuesMismatchRegex()
testLockConcurrentlyOffline()
testEnableSinglefeature(LaunchResult
testNoReAugForAdditionalDatasourceRuntimeProperty(LaunchResult
testRealms.add(rep1);
testResolveMetricsOption()
testCreateInvalidRegexpDynamicScope()
loginWithExistingUserAfterError()
testUserResource().credentials().get(0).getId();
testRemoveUserPolicyWhenUserDeleted()
loadHttpClientTimeoutConfiguration()
caseInsensitiveSearchWorksWithoutForcingLowercaseOnEmailAttribute()
testRealmLoginPage.form().rememberMe(true);
testCompositeGroups()
testOfflineSessionsRemovedAfterDeleteRealm()
testApp).collect(Collectors.toList())
testRemoveCredential(AbstractLoggedInPage
testFragmentProhibitedClientValidation()
testOverwrite(NUM_ENTITIES);
updateClientPolicyEnabledSecretExpired()
executeWithEachDriver()
testAttackerClientUseVictimAuthReqIdAttack()
testRealmResource().clients().get(client2.getId()).roles().create(RoleBuilder.create().name("client-role").build());
testOptionsValidator_Config_Validation()
countUsersByEnabledFilter()
nonceNotUsedErrorExpected()
testAddProviderMappers()
singleClaimValueInUserInfoMatches()
testRefreshTokenWithConsentRequired()
testClientInvocationWithOBBClient("CN=Foo,
validatePattern()
testRealmLoginPage.form().login("spÃ©cial",
testSearchTimeout()
testClientPolicyTriggeredForServiceAccountRequest()
soapBindingAuthnWithoutSignatureTest()
testWebAuthnIDLessWithNoWebAuthnPasswordlessCredentialLogin()
updateEmailDuplicate()
registerUserSuccess_lastNameOptional()
testHostnameAdminSet()
testStartDevUsingChmsStorage(LaunchResult
authenticateWithInvalidRotatedClientSecretPolicyIsEnable()
testingClient.testing().exportImport().clear();
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest(boolean
testUserWithViewUsersRoleCanOpenConsole()
testCodeToTokenRequestSuccessRS256usingJwks()
testPrimarySourceForBasicSetId()
testIncorrectChangingParameters()
updateBrokeredUserMismatchDeletesRoleInForceMode()
testContext.getOrCreateCleanup(TEST_REALM_NAME).addClientUuid(clientId);
testSetCategoryLevel(LaunchResult
testSetSchema(LaunchResult
testFindAvailableNamedParamIllegalCharacterInPrefix()
checkPropertyValidation()
testPrivateKeyEncodeDecode(privateKey1);
testSessionsAreRemovedOnRealmRemoval()
testDefaultValueFromProperty()
testRealmResource().clients();
testRealm().users().create(newUser))
testMaxAgeConditionWithAcr()
createAGroup()
testBadRealmId(KeycloakSession
testOptionalAttribute()
testAuthorizationTokenSignatureAndEncryption(String
defaultValues()
testSessionCountExceededAndNewSessionDenied()
testRealmLoginPage.form().login(USER_LOGIN,
testEnvironmentVariables()
testBadRealmName(KeycloakSession
testAccountUpdateAttributeExpectFailure("saml.persistent.name.id.for._foo_");
test()
testMigrationTo12_0_0()
testSecureCibaAuthenticationRequestSigningAlgorithmEnforceExecutor()
testing().onEvent(create(newest,
testOfflineSessionLazyLoadingPropagationBetweenNodes()
resetPasswordWithLoginHint()
testRealmResource()
canCreatedExtendedCredentialModel()
testIdpInitiated(String
testingClient.server().run(session
testRequiredByUserRole_USER()
testStartDevHelpAll(LaunchResult
testHttpRelativePathWithSecretValue()
tests](https://github.com/twbs/bootstrap/tree/master/js/tests).
testWebAuthnPasswordlessAlternativeWithWebAuthnAndPassword()
test('default
test06SyncRestAPIMissingAction()
joinInput2SeparatorNull()
testUserResource()
testEventExpiration()
testRolesInUserInfoResponse(UserInfo
updateEmailLinkVisibleWithUpdateEmailActionEnabled()
allValuesMatch()
validateValidatorConfigMultipleOptions()
testSuccessful(LaunchResult
testRealm().users().get(userRep.getId()).update(userRep);
testingClient.testing().removeExpired("test");
updateBrokeredUserMismatchLeavesGroup()
getRealmLocalizationText()
testRealm().clients().findByClientId("account").get(0);
testComparisonTypeSetNoClassRefsAndNoDeclRefs()
testCodeToTokenRequestSuccessRS256usingJwksUri()
testRemovePoliciesOnClientDelete()
formatError()
(KEYCLOAK-16228)
testKeycloakCacheIsConnected()
testingClient.testing().revertTestingInfinispanTimeService());
testJsonFromRedirectRewriteRuleConfiguration()
testGetBooleanAttributeValue()
testDateValidator(KeycloakSession
testCloneAsNewInstance()
testPathConfigInvalidation()
testTwoNestedLocksCurrently()
privateKeyOnlyForEnc()
testingClient.testing("test").onAdminEvent(firstEvent,
testSingleUseStore()
testExtendedClientPolicyInterfacesForBackchannelTokenResponse()
testUpdatePolicyWithoutNameNotAllowed()
testEntityOnFailNode.getConfig().getFirst("val2")));
testBuildWithPropertyFromQuarkusProperties(LaunchResult
testingClient.server(bc.consumerRealmName()).run(assertSessionCount(bc.consumerRealmName(),
featureEnabled()
testNullBearerTokenCustomErrorPage()
testCertificatePolicyModeAnyNotRequestedAndNotPresent()
testCustomAttribute_Required(KeycloakSession
testRequiredByUserRole_USER(KeycloakSession
testDevModeWarning(LaunchResult
logoutSessionWhenLoggedOutByAdmin()
authenticationActive()
validateNotEmpty()
testRealm().users().search(USERNAME,
adminAuthClientDisabled()
@AuthServerContainerExclude(REMOTE)
featureDisabled()
testPersistenceSingleNodeDeleteRealm()
test('newlines
testDenyAccessWithDefaultMessage()
testSignedRequestObject()
logoutConsentRequiredWithoutPostLogoutRedirectUri()
testCertificatePolicyModeAllOneRequestedAndTwoPresentDifferent()
testAttributeConsumingServiceMappersInSpMetadata()
mapperCanBeAppliedToRealmRoles()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("profile").protocol("openid-connect").build());
testReceiveArtifactLoginFullWithRedirect()
testOverrideUsedAuthenticator()
testGetClientScopeById()
testMigrationTo4_x(ProfileAssume.isFeatureEnabled(Profile.Feature.AUTHORIZATION),
tryToUpdateBrokeredUserWithMissingGroupDoesNotBreakLogin()
testGet_CacheForExcluded()
testUserResource().roles().realmLevel().remove(testUserResource().roles().realmLevel().listAll());
testTwoProfilesWithDifferentConfigurationOfSameExecutorType()
testCodeToTokenRequestSuccess(Algorithm.RS256);
testInvalidUser(context,
tryToCreateBrokeredUserWithNonExistingGroupDoesNotBreakLogin()
testAccountLinkNoTokenStore()
testCancelRegistration()
ocspFailCloseLoginFailed()
testRealms.get(0);
testValidateAndCreateLdapProviderEditMode()
testRegisterUserSuccess_attributeNotRequiredAndSelectedByScopeCanBeIgnored()
testGetAccessTokenMissingRoleScopedDynamicScope()
testIntrospectRevokeOfflineToken()
updateEmailLinkVisibleWithUpdateEmailActionEnabledAndRegistrationEmailAsUsernameAndEditUsernameNotAllowed()
testingClient.server(TEST_REALM_NAME).run(session
testExternalExchange_extractIdentityFromProfile()
testBackchannelAuthenticationFlowOfflineAccessWithoutBindingMessage()
updateLDAPUsernameTest()
testClientSessionIdleTimeout()
searchUserCaseSensitiveFirst()
testInvalidXml()
testAuthenticatedClientSession(clientSessions.get(client1.getId()),
testInvalidConfiguration(KeycloakSession
testBackEndUrlSameAsFrontEndUrl()
testCertificatePolicyModeAllOneRequestedAndNotPresent()
testingClient.testing().exportImport().getExportImportTestDirectory()
test('short
logoutWithInvalidPostLogoutRedirectUri()
testAuthorizationEncryptionAlgRSA_OAEP256EncA192CBC_HS384()
testCustomAttribute()
testEnvVarsAreMerged()
testRolesWithIdsPaginationSearchQueries(this::getModelResult);
testWorkingRealmImportWithCustomImage()
getCrlDistPoint()
testArtifactBindingLogoutTwoClientsRedirect()
testDynamicUserProfileReviewWhenMissing_requiredReadOnlyAttributeDoesnotForceUpdate()
joinInputNoneOutputEmpty()
testIncorrectStateParameter()
testDirectEncryptAndDecrypt(aesKey,
testing().queryEvents(realmId,
testGetUserProfileMetadata_EditUsernameAllowed()
testGetUserProfileMetadata_RoAccessToUsernameAndEmail()
testAuthorizationTokenSignatureAndEncryption(Algorithm.RS256,
publicRs256Chain()
testRealmResource().toRepresentation().getId();
@Launch({"build",
testWebAuthn(true);
testCodeToTokenRequestSuccess(Algorithm.RS512);
notDisplayAvailableAuthenticatorsPasswordless()
testUserInfoSignatureAndEncryption(String
testAccountPage.navigateTo();
testMigrationTo12_x(true);
authenticatorAttachmentCrossPlatform()
testAccountUpdateAttributeExpectFailure("uSErCertificate");
testing().onAdminEvent(create(realmId,
failCreateUserUsingRegularUser()
test('dotted
clientCredentialsAuthSuccessWithUrlEncodedSpecialCharactersSecret()
testParCorsRequestWithInvalidUrlShouldFail()
testNotFoundClient()
testCamelCase()
testRealm().users().get(newUserId).toRepresentation();
testFirstClassCitizenEnvVars("KC_TRANSACTION_XA_ENABLED",
testSyncRegistrationEmailRDNNoDefault()
defaultKeysizeForEnc()
testCodeToTokenRequestSuccess(Algorithm.RS256,
testAddDirtyRemoveFederationUsersInTheSameGroupConcurrent()
testPattern10()
testingClient.testing().exportImport();
testRealm().localization().deleteRealmLocalizationText(locale,
testExtremelyLongClientAttribute(RealmResource
testDoNotGrantPermissionWhenObtainAllEntitlements()
gzipEncoding()
@RequireProvider(UserStorageProvider.class)
testSetMethodConfigs()
@Migration(versionPrefix
requiredActionRegistration()
testSuccessfulAuthorizationHS512Request()
testIdPNotForceSyncUserAttributes()
validateValidatorConfigSimple()
testContext.getOrCreateCleanup(REALM_NAME).addComponentId(id);
testHealthEndpoint()
registerUserSuccess()
testResolvePropertyFromDefaultProfile()
test08LDAPGroupSyncAfterGroupRename()
testComplexCompareAndOr()
testRealm.users().get(userRepBefore.getId()).update(userRepBefore);
testKeycloakConfPlaceholder()
attestationConveyancePreferenceIndirect()
testGroupAttributeTwoGroupHierarchyNoMultivalueNoAggregateFromChild()
testPostLogoutRedirectUriNull()
testPattern11UsingResourceInstancePermission()
testCustomEntityNotSet()
testCustomUserProfileProviderIsActive(KeycloakSession
testAccountConsoleClientHasDeleteUserRole(RealmResource
testAutodetectBearerOnly()
testClientOverrideFlowUsingBrowserHttpChallengeWithDynamicScope()
testFailureParExpired()
testConfigurationInvalidScope(KeycloakSession
testRealmLoginPage.form().login();
createExecutorConfigurationWithInvalidValues()
testRealmResource().flows().deleteFlow(WEBAUTHN_FLOW_ID);
testSuccessEncryptedResponseSigAlgNoneAlgRSA1_5EncDefault()
updateClientWithPolicyAndSecretNotExpired()
testRealmResource().addDefaultOptionalClientScope(scopeOptId);
userVerificationRequirementSettings()
testMoveGroup()
testCodeToTokenRequestSuccessPS384()
testNoSessions()
testShowConfigPicksUpRightConfigDependingOnCurrentMode(KeycloakDistribution
validateEmail()
testMoveForward()
testAttributeInputTypes()
testRealm().users().get(newUserId);
accessTokenRequestNoRefreshToken()
testArtifactResponseContainsCorrectInResponseTo(){
testUserResource().removeCredential(passwordId);
testOptionalAttributes(KeycloakSession
testIdPForceSyncUserAttributes()
testWinRootAndCategoryLevels(LaunchResult
testSignedAndEncryptedRequestObject()
testClientRep.getAttributes().put(Constants.DEFAULT_ACR_VALUES,
testContextInstance.get();
scopesRemainAfterClientUpdate()
testLocalizationDuringLogout()
updateBrokeredUserMismatchDeletesRoleInLegacyMode()
testPathToRoot()
@BeforeStartDistribution(ChangeAdditionalDatasourceDbKind.class)
@Order(2)
checkInitWithInvalidRealm()
testCodeToTokenRequestSuccessES256usingJwks()
testApp.update(testAppRep);
testRealmResource().clients().get(clientUuid).addDefaultClientScope(scopeDefId);
testUserCredentialsPage.navigateTo();
testLockConcurrentlyInternal(session,
testRealm().users().delete(defaultUser.get(0).getId());
updateBrokeredUserDoesNotDeleteRoleIfClaimStillMatches()
testRealmSessionCountExceededAndNewSessionDeniedDirectGrantFlow()
testServletWithConsent()
loadConfigurationFromJsonFile()
testClientsBasics()
testExtendedClientPolicyIntefacesForServiceAccountTokenRequeponse()
userVerificationRequirement()
simpleValidationFluent()
testClientRep.getAttributes().put(Constants.ACR_LOA_MAP,
accessTokenWithConfidentialClientCorsRequest()
searchByFirstNameExact()
testClusterConfig()
testLimitAuthSessions()
testDirectGrant("direct-grant");
testDefaultRoles()
testing().onAdminEvent(create(oldest,
updateSAML()
testRealm().users().get(findUser("test-user@localhost").getId());
testAttributeRequiredButNotSelectedByScopeIsNotRendered()
testPersistenceClientSessionsMultipleNodes()
testDuplicatedRequestParams()
textWithPlus()
@BeforeStartDistribution(SetDefaultOptions.class)
testRealm().toRepresentation().getId();
testAccountUpdateAttributeExpectFailure(attrName,
testSuccessfulAuthorizationRequest("keycloak-with-jwt-rs512-authentication.json");
testRealms.add(configureRealm(RealmBuilder.create().name("authz-client-jwt-test-es512"),
testDefaultConfigIfNoneSet()
testIngressDisabledExisting()
getResourceIllegalTraversal()
testInvalidXpath()
keycloak15833Test()
testOwnerAccess()
testSecureCibaSessionEnforceExecutorWithSignedAuthenticationRequestParam()
@BeforeStartDistribution(AddAdditionalDatasource2.class)
testStoragePureJpa()
testWalkBfs()
searchUserCaseInSensitiveFirst()
testing().clearAdminEventStore(realmId);
testExtendedClientPolicyIntefacesForTokenRefreshResponse()
timeout()
testingClient.server().fetchString(session
testDefaultConfig()
idpInitiatedVaryingLetterCasesLDAPTest()
testImport(LaunchResult
parsesAttributeValueUserTypeWithNestedElementsAndNamespace()
testIngressOnHTTPS()
testCustomValidationLastName()
testRemovePolicyWhenOwnerDeleted(KeycloakSession
testCertificatePolicyValidation("1.3.76.16.2.1",
testWithClientBrowserOverride();
testFailureNotParByParRequiredCilent()
deleteAccountActionSucceeds()
testProfilesJsonView()
internalTransport()
authorizationRequestFormPostJWTResponseMode()
deleteRealmLocalizationTextNotExists()
testAuthorizationEncryptionAlgRSA_OAEPEncA128GCM()
invalidPrivateKeyForEnc()
postBackchannelLogoutNestedBrokeringRevokeOfflineSessionsWithoutActiveUserSession()
emptyChain()
testDefaultValue()
testFailureCountResetWithPasswordGrantType()
testGetUserNameExact()
testGet_PrimarySourceForExcluded()
@BeforeStartDistribution(UpdateHibernateMetricsFromQuarkusProps.class)
testCreateWithEnvVars()
testEntityOnFailNode.getConfig().getFirst("val1")));
testDefaultRolesNameWhenTaken();
testIngressDisabledNotExisting()
testAuthorizationTokenSignatureAndEncryption(Algorithm.ES512,
testReceiveArtifactLoginFullWithPost()
testRHSSOVersionToKeycloakVersionConversion()
testRegisterUserSuccess_lastNameRequiredForScope_notRequested()
testing().getAdminEvents(REALM_NAME_1,
getRealmSpecificLocales()
testExecutor.attachCheck3pCookiesIframeMutationObserver()
testAuthSessions()
testing().onEvent(create(date3,
verifyWith2048PrivateKeyInPKCS8Format()
testSuccess_FindAllElements()
testUser.setFirstName("<img
testOfflineSessionLoadingAfterCacheRemoval()
testSessionStateDuringArtifactBindingLogoutWithOneClient()
testRealm().clientPoliciesPoliciesResource().getPolicies();
testRealm.getUsers().add(
testRequiredIfAdmin()
test05MissingLDAPUsernameSync()
testRealm.getUsers().add(UserBuilder.create().username("manage-consent-access").role("account",
testClientDefaultAcrValuesValidation()
testConfigurationSetInvalid()
testSimpleCompareOr()
testRequestParameterPrecedenceOverOtherParameters()
testCommandsAndArgsAreMerged()
testOfflineTokenLogin();
testPrivateKeyEncodeDecode(String
testRemoveCredential(credentials.get(1));
testAuthorizationEncryptionAlgRSA1_5EncA256GCM()
testCertificatePolicyValidation(String
testAuthorizationEncryptionAlgRSA_OAEPEncA192CBC_HS384()
test('comprehensive',
soapBindingLogoutWithoutSignature()
testEntityUpdates(ComponentRepresentation
testCustomArtifact()
idpInitiatedUpperCaseLDAPTest()
testBadBindingMessage()
testShouldReAugIfConfigChanged(LaunchResult
testDefaultIdpSet()
requireResidentKey()
listApplicationsThirdPartyWithConsentText()
testDefaultConfigForUpdateProfile(KeycloakSession
testReadOnlyUserDoesNotThrowIfUnchanged()
testClientSessionIsNotPersistedForTransientUserSession()
testRealm.getUserStorageProvidersStream().forEachOrdered(persistentFedModel
testRolesAreNotInUserInfoResponse(userInfo);
testCORSHeadersInFailedRptRequest()
testAdminClientUpdateDefaultAuthType()
test('move
testFirstClassCitizenEnvVars("KC_FEATURES",
testMultipleSessionsRemovalInOneTransaction()
testLogInAsUserInIDP();
discouragedNoVerification()
testRotatedKeysPropagated(SAMLServlet
testOfflineSessionLazyLoading()
testSuccessSignedResponse(String
testDisplayName()
createUserWithAdminRest()
testRealmResource().clients().create(ClientBuilder.create().clientId("test-client-1").build()).close();
testReAugWhenNoOptionAfterBuild(LaunchResult
testRealm.getRoles().getRealm().add(dynamicScopeRole);
plainText()
testSecureCibaSessionEnforceExecutorWithSignedAuthenticationRequestUriParam()
testAccountUpdateAttributeExpectFailure("KERBEROS_PRINCIPAL",
testNoComparisonTypeClassRefsSetNoDeclRefs()
testSimpleTwoNodeTree()
loginWithDisabledCookies()
testSkip(NUM_ENTITIES*2);
testWebAuthn(false);
testScope.setId(scopeId);
exactSearch()
notReuseExistingOTP()
testingClient.testing().exportImport().runImport();
registerUpperCaseEmail()
testClass.getAnnotationsByType(RequireProvider.class))
testInvalidUserCode()
testRemoveChild()
parsesAttributeValueUserTypeWithSingleElementsAndNamespace()
testUndefinedValuesToCollection()
testAttributeValidation(KeycloakSession
decode_simple()
testFipsNonApprovedMode(LaunchResult
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest(true,
testDefaultConfigForUpdateProfile()
testRealmResource().flows().updateRequiredAction("delete_account",
testGetFields()
testCertificatePolicyValidation(null,
testAddUndefinedValuesToMapStringList()
testAttributeConsumingServiceIndexNotSet()
testMultipleClosingHandlersOnClosingStream()
testFAPIBaselineSecureSettingsWhenUseAdminPolicy()
testAdminClientRegisterDefaultAuthType()
testClientWithScope()
testErrorConditions();
testPaginationStarting0()
testRealm.setClientScopes(Collections.singletonList(ClientScopeBuilder.create().name(SCOPE_LAST_NAME).protocol("openid-connect").build()));
testLazyLoadedPathIsCached()
testUnsuccessfulUserInfoRequestWithMultipleTokens()
testAttributeNotRequiredAndSelectedByScopeCanBeUpdatedFromVerificationScreenForcedByAnotherAttribute()
testFAPIBaselineRedirectUri()
testImpersonationBySameRealmServiceAccount()
testMigrationTo14_0_0();
testExtendedClientPolicyIntefacesForBackchannelTokenRequest()
testUpdateReadOnlyAttributeWhenNotSetToUser()
testRealm.toRepresentation();
testCommandLineArguments()
shouldEscapeLdapQueryCharactersCharactersForDefaultStrategy()
testApp.getDefaultClientScopes();
testTransientUserSession(KeycloakSession
testSystemProperties()
testFAPICIBALoginWithMTLS()
testModalDialog(accountPage,
essentialUnknownClaimFails()
testAccountLink();
testRealm().flows().removeRequiredAction(UserModel.RequiredAction.CONFIGURE_RECOVERY_AUTHN_CODES.name());
testStartUsingAutoBuild(LaunchResult
testAccountPage.signOut();
testRealmResource().update(realm);
updateClientWithDefaultScopeAssignedAsOptionalAndOpposite()
testDefaultSignatureAlgorithm()
testMapping(String
testUpdateFailureWithInvalidScopeName()
testReceiveEmptyArtifactResponse()
testExtendedClientPolicyIntefacesForBackchannelAuthenticationRequest()
testExtremelyLongClientAttribute(migrationRealm);
testAddFailureWithInvalidScopeName()
testInvalidConfiguration()
testUserInfoSignatureAndEncryption(Algorithm.RS256,
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.RS256,
testPathOrderWithAllPaths()
@Launch({
testFailureParIncludesInvalidScope()
testDiscoveryServiceDurability()
logoutWithBadClientId()
testMigrationTo12_0_0();
requestObjectClientIdAndResponseTypeTest()
testRequiredByClientScope()
@RequireProvider(UserSessionPersisterProvider.class)
verifyEmailExpiredRegistration()
testRealmResource().clients().findByClientId(ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();
testRealmPage.setAuthRealm(TEST);
testSecureSigningAlgorithmForSignedJwtEnforceExecutorWithNotSecureAlg()
testCreateUpdateDeleteExecutorRuntime()
testingClient.testing().ldap(TEST_REALM_NAME).prepareHardcodedGroupsLDAPTest();
testSessionStateDuringArtifactBindingLogoutWithMoreFrontChannelClients()
testLoadUserSessionsWithNotDeletedOfflineClientSessions()
testSamlExportSignatureOn()
testConsentCancelCannotBeReused()
testClientSecretsWithAuthMethod()
createAndReadUser()
testRealmResource().toRepresentation();
testRootAndCategoryLevels(LaunchResult
testViewGroups(RealmResource
testCustomAttribute_Required()
testBackchannelAuthnReqWithoutLoginHint()
testPooling()
testPropertyEnabledAtRuntime(LaunchResult
shouldReturnEmptyMappingForEmptyHttpProxy()
logoutWithPostLogoutUriWithoutIdTokenHintShouldFail()
createRoleWithSameName()
given_ClusterAndOperatorRunning_when_KeycloakCRCreated_Then_KeycloakStructureIsDeployedAndStatusIsOK()
testReadonlyEmailCannotBeUpdated()
testRealmSessionCountExceededAndOldestSessionRemovedDirectGrantFlow()
testCustomCacheStackInConfigFile(LaunchResult
userFederationActive()
testContext.setInitialized(true);
testRequestTokenBeforeAuthenticationNotCompleted()
testSetUpLink(RealmResource
ocspFailOpenLoginSuccess()
testingClient.server().runModelTest(testMethod.getDeclaringClass().getName(),
testEnableOnBuild(LaunchResult
testPingMode_requestWithInvalidClientNotificationShouldFail()
resetPasswordInfoMessageWithDuplicateEmailsAllowed()
testShowConfigCommandWithAllShowsAllProfiles(LaunchResult
@EnabledOnOs(value
testClientScopesCondition()
testApp.getRedirectUris().stream()
testFailureNotIssuedParUsed()
testingClient.testing().getUserByServiceAccountClient(realm.getRealm(),
openshift4KubeAdminLogin()
testUnknownQuarkusBuildTimePropertyApplied(LaunchResult
testingClient.server("test").run(session
testClient.update(testClientRep);
testViewGroups(migrationRealm);
resetPasswordWithSpnegoEnabled()
testNoComparisonTypeNoClassRefsAndNoDeclRefs()
authenticatorAttachmentCrossPlatformInternal()
testCascadeRemovalOfClientSessionOnUserSessionRemoval()
testValidation()
testMaximumLength()
testHttpRelativePathWithPlainValue()
testAuthorizationEncryptionAlgRSA1_5EncA192CBC_HS384()
testRealmLoginPage.form().login(utf8TestUser);
testStartWithAutoBuildDoesntShowCredentialsInConsole(LaunchResult
testNotWorkingRealmImport()
testSuccessfulAuthorizationRequest("keycloak-with-jwt-hs512-authentication.json");
innerScript()
testCustomImage()
testDeploymentRestarted(Set.of(kc2),
testCreateWithResourceType()
@BeforeStartDistribution(CreateRealmConfigurationFileAndDir.class)
testCreateDynamicScopeWithFeatureDisabledAndNonEmptyDynamicScopeRegexp()
testUserGroupRoleToAttributeMappersScopedWithDifferentClient()
@BeforeStartDistribution(UpdateConsoleLogLevelToInfoFromQuarkusProps.class)
testFrontChannelLogoutWithPostLogoutRedirectUri()
registerWithLoginHint_emailAsUsername()
testDenyAccessWithRoleCondition()
testChangeId()
testReadinessDown()
testPersistenceWithLoadWithExternalClientStorage()
testMetricsUp()
test09MembershipUsingDifferentAttributes()
testRealmLoginPage.form().login(testUser);
testUpdateOTP()
testExtendedClientPolicyInterfacesForBackchannelAuthenticationRequest()
testSuccessEncryptedResponseSigAlgPS256AlgRSA_OAEP256EncA256CBC_HS512()
testRealm.users().userProfile().update(configuration);
testAdminClientRegisterAcceptableAuthType()
test('numeric
testPostLogoutRedirectUrisSet(migrationRealm);
testClientExchangeToItself()
testWinStartDefaultsToClustering(LaunchResult
testPersistenceWithLoad()
mapperStillWorksWhenRealmRoleIsRenamed()
testCodeToTokenRequestSuccessForceAlgInClient(String
testRolesInUserInfoResponse(userInfo);
testRealmResource().clients().get(clientUuid).update(clientRep);
logoutConsentRequiredWithExpiredCode()
testAuthnContextTypeWithAuthnContextClassRefAndAuthnContextDecl()
testDeploymentDurability()
testDefaultToHelp(LaunchResult
invalidateClientRotatedSecret()
testAttributeRequiredForScope()
attestationConveyancePreferenceNone()
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.PS256,
testRealms.add(RealmBuilder.create().name(REALM_NAME_1).build());
testBackchannelAuthenticationFlow()
logoutWithInvalidIdTokenHint()
testContext.setTestRealmReps(emptyList());
testAuthenticatedClientSession(clientSessions.get(client2.getId()),
testing().onEvent(create(date4,
simpleValidationError()
testSet_NoPrimarySource()
testRealmLocalizationTexts()
testAuthenticationChannelUnknown()
testExplicitCacheConfigFile(LaunchResult
usernamePasswordFormReauthentication()
removingPolicyMustClearRotationInformationFromClientOnRequestNewSecret()
loginWithAcr3()
testSubsystem1_1()
authenticateWithValidActualAndRotatedSecret()
updateUserInfoWithRegistrationEnabled()
testStartHelpCommand(LaunchResult
testingClient.server().run(ClientTokenExchangeTest::setUpUserImpersonatePermissions);
testing().onAdminEvent(create(System.currentTimeMillis()
testRefreshWithOfflineToken(token,
tester.test(field,
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequestUriParam()
testAccountUpdateAttributeExpectFailure("enabled");
testRealm.getUsers().add(user);
testSuccessEncryptedResponseSigAlgPS384AlgRSA_OAEPEncA256GCM()
testSecretsAreWatched()
testCorrectStateParameterButIncorrectCode()
testSimpleCompareAndOr()
deleteAccountFailsWithoutRoleFails()
test06RegisterNewUser()
rpEntityValues()
testPersistenceMultipleNodesClientSessionAtSameNode()
testIngressHostname()
@Launch({})
testRequiredReadOnlyExistingAttribute()
validateConfiguration_attributeAnnotationsErrors()
testArtifactDoesntContainSignature()
cancelUpdateEmail()
testSuccessfulAuthorizationRequest("keycloak-with-jwt-authentication.json");
testAuthzServicesRemoved()
testShouldNotReAugStartDevIfConfigIsSame(LaunchResult
testRealmResource().clients().create(ClientBuilder.create().clientId("test-client-2").build()).close();
@IgnoreBrowserDriver(FirefoxDriver.class)
test('short',
testScopeInLoginOptionsShouldBeConsideredByLoginUrl()
clientCredentialsAuthSuccess()
createClientFrontchannelLogoutSettings()
mapperStillWorksWhenGroupIsMoved()
testDeploymentRestarted(Set<Keycloak>
authorizationRequestFormPostResponseModeInvalidResponseType()
regenerateSecretOnCurrentSecretNotExpired()
deleteRealmLocalizationTexts()
testWithClientBrowserOverrideWithDynamicScope()
tests](docs/tests-development.md)
relyingPartyId()
testCloneToExistingInstanceDumb()
testRegisterUserSuccess_lastNameLengthValidation()
testGenerateThumbprintSha256()
@RequireProvider(value
testLazyClientSessionStatsFetching()
testNameIdMapper()
testAttributeRequiredButNotSelectedByScopeIsNotRenderedOnVerificationScreenForcedByAnotherAttribute()
testFailureInvalidPar()
testNullQueryParameterAccessToken()
decode_lowLevelInvalidParams()
testMultipleUriForResourceJSONConfig()
testDatabaseDefaults()
updateEmailMissing()
testAccountConsoleClientHasDeleteUserRole(masterRealm);
testCertificatePolicyModeAllTwoRequestedAndNotPresent()
@BeforeStartDistribution(SetDebugLogLevelInKeycloakConf.class)
testExtendedClientPolicyIntefacesForTokenResponse()
testDeleteAccount(migrationRealm);
testServlet()
testRolesAreNotInUserInfoResponse(UserInfo
testPattern2()
testUpdateProfile()
testCertificatePolicyModeAllNotRequestedAndOnePresent()
testRealm().update(realmRep);
testAuthorizationEncryptionAlgRSA1_5EncA256CBC_HS512()
testRolesWithIdsSearchQueries(GetResult
testSuccess_XmlFragment()
removingPolicyMustClearRotationInformationFromClientOnUpdate()
testSuccessfulUsingRequestParameter()
testDenyAccessWithNegateRoleCondition()
testAuthorizationTokenSignatureAndEncryption(Algorithm.ES256,
test('multi
invalidEnabledForEnc()
testRealmPreRemoveDoesntRemoveEntitiesFromOtherRealms()
testValidateComplianceWithUserProfile(KeycloakSession
testFailureParUsedTwice()
registerUpperCaseEmailWithChangedEmailAsUsername()
testOverwrite(int
testNoValidationsIfAdminReadOnly(KeycloakSession
offlineTokenReauthenticationWhenOfflinClientSessionExpired()
testDefaultIdpSetTriedAndReturnedError()
changeAuthenticatorProperties()
testImpersonationUsingTokenIssuedToUntrustedPublicClient()
parseHeader()
testArtifactBindingIdentifierChangedWhenClientIdChanged()
testDynamicUserProfileReviewWhenMissing_requiredButNotSelectedByScopeAttributeDoesnotForceUpdate()
testingClient.server(bc.consumerRealmName()).run(configurePostBrokerLoginWithOTP(bc.getIDPAlias()));
authenticatorAttachmentPlatformInternal()
testExpectedNameId(bburkeUser.getEmail());
testRealmDefaultClientScopes(migrationRealm);
testMethod.getName());
testAuthzCodeFlowUnderMultiPhasePolicy()
testRealms.add(configureRealm(RealmBuilder.create().name("authz-test-no-rt").accessTokenLifespan(1),
testSignatureVerificationHardcodedPublicKeyES256()
testFeatureDoesntWorkWhenDisabled()
testExtendedClientPolicyIntefacesForResourceOwnerPasswordCredentialsResponse()
testGetProfileAttributeGroups(KeycloakSession
testRealmAccountManagementPage.navigateTo();
setupTotpExistingReusableCodeDisabled()
testRealm());
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.PS384,
testUsernameAndEmailPermissionNotSetIfEmpty(KeycloakSession
testRealms.add(configureRealm(RealmBuilder.create().name("authz-client-jwt-test-rs512"),
testStartDevDefaultsToLocalCaches(LaunchResult
testFrontendUrlInDestinationExpected()
prefixSearch()
testRealm().clientScopes().findAll().subList(1,2);
testHostnameStrict()
testApp.removeOptionalClientScope(scopeId);
getRealmLocalizationTextsWithFallback()
testRealm().flows().raiseRequiredActionPriority(UserModel.RequiredAction.UPDATE_PASSWORD.name());
idpInitiatedLowerCaseLDAPTest()
test('-',
residentKeyNotRequiredNoRK()
testPermissionRemoved()
testingClient.testing("test").onEvent(firstEvent);
testLogHandlerConfig()
testInvalidFieldTypeJsonProfiles()
testUsernameReadNotVisibleInProfile()
testRealm().clients().get(clientRep.getId()).getProtocolMappers().update(mapperRep.getId(),
testChangingLoaConditionConfiguration()
testScriptMapperNotAvailableThroughAdminRest();
testAccountUpdateAttributeExpectSuccess("deniedFoot");
testContext.getOrCreateCleanup(REALM_NAME).addClientUuid(cId);
testJpaSearchableAttributesUnset()
normalizeGroupPath()
accessTokenRequest()
updateUserWithAdminRest()
testBuildMustNotRunTwoJVMs(LaunchResult
testCustomEntityIdSet()
testAbstractSimpleValidatorSupportForCollections()
testValidateAndCreateLdapProviderCustomSearchFilter()
testCertificatePolicyModeAllOneRequestedAndOnePresentDifferent()
quarkusPropertyMultipleDatasourcePatternTest(){
testCancelPasswordlessRegistration()
mapperStillWorksWhenClientRoleIsRenamed()
realmLocalizationMessagesAreNotCachedWithinTheTheme()
testEnvVarAvailableFromPropertyNames()
testGetUserProfileMetadata_NoAccessToNameFields()
testCertificatePolicyModeAnyOneRequestedAndOnePresent()
testDifferentUserAuthenticated()
testResponseMode()
testDoNotValidateUsernameWhenRegistrationAsEmailEnabled()
testMigrationTo20_x();
postLogout_validRequestWithValidOrigin()
testRealmResource().update(realmRepresentation);
testGetUserProfileMetadata_EditUsernameDisallowed()
testReceiveArtifactLogoutFullWithPost()
testPreviewFeaturesGetEnabledWhenCliArgIsSet(LaunchResult
testManyUsersImport()
testingClient.testApp().oidcClientEndpoints().bindIntentWithClient(intentId,
testExecutor.login(loginOptions,
testGetBooleanAttributeValue(new
testDenyAccessWithParticularMessage()
testNoValidationsIfUserReadOnly()
testSingleSecretMultipleKeycloaks()
testCertificatePolicyModeAllNotRequestedAndNotPresent()
testTransientUserSessionIsNotPersisted()
testDatabaseDialectSetExplicitly()
testCompositeRolesPaginationQueries()
validateLength()
testOnUserRemoved()
clientsActive()
testAuthorizationEncryptedResponse()
testCustomAttribute_Optional()
testRequiredByScope_clientDefaultScope()
testResolveProfile(KeycloakSession
testRequiredIfAdmin(KeycloakSession
testRolesWithIdsPaginationSearchQueries()
testForceHostnamePortWhenNoProxyIsSet()
testWrongEncryptionAlgorithm()
testReAugForAdditionalDatasource(LaunchResult
acceptableAaguidsShouldBeEmptyOrNullByDefault()
testGetVersionedApi()
testSupportedLocalesOnReservedChars()
testCertificatePolicyModeAllTwoRequestedAndOnePresentDifferent()
testRemovePoliciesOnResourceDelete()
testRemoveFromSetByMapKey()
testPublicClientWithPKCESuccess()
testStorageMixedStorageOptions()
pollingTest()
testScriptMappingThroughServerDeploy()
testUriValidator()
testingClient.testApp().getFrontChannelLogoutToken();
validateValidatorConfigViaValidatorFactory()
testSessionCountExceededAndOldestSessionRemovedFirstBrokerLoginFlow()
testRemoteCachesParallel()
testBackchannelAuthenticationFlowNotRegisterSigAlgInAdvanceWithSignedAuthentication(String
loginSuccess()
testSuccessEncryptedResponseSigAlgES384AlgRSA_OAEPEncA128GCM()
testExpectedNameId(String
testBackchannelAuthenticationEndpointAsAudience()
testEmptyLists()
testDefaultCrypto()
getRealmLocalizationTexts()
testCertificatePolicyModeValidationAttributeReturnsAll()
getRealmLocalizationsNotExists()
testAuthorizationTokenSignatureAndEncryption(Algorithm.PS256,
testRealmPublicKeyEncryptedRequestObjectUsingKid()
testRealm().users().search(username);
testRegisterUserSuccess_attributeNotRequiredAndSelectedByScopeCanBeSet()
testingClient.testing().getClientSessionsCountInUserSession("test",
testComponentModelId()
acceptableAaguidSettings()
testRevokeRequestParamsMoreThanOnce()
testReceiveArtifactLogoutFullWithRedirect()
testAuthorizationEncryptionAlgRSA_OAEP256EncA128CBC_HS256()
testLockConcurrentlyInternal(KeycloakSession
