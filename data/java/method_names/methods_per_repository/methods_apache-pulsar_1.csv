Assert.assertFalse(metricsList.isEmpty());
parseContextUuidTest()
testProxyProtocol()
testEquals()
testPublishRateInDifferentLevelPolicy()
testGetSetSubscriptionDispatchRate()
testGetBacklogSizeByMessageId()
testStepRelease()
testBatchedMessage()
avroSchemaTest()
testGetSubscribeRateApplied()
testRanges.add(List.of(
test_group_tiered_jcloud()
testGetMessagesToReplayNow(boolean
testProxyRoleCantCreateResourceGroups()
testConsumerBacklogEvictionTimeQuota()
testMergeFunction();
testBasicInteraction(String
testPojoAsAvroAndJsonConversionToConnectData("test");
testConsumerBlockingWithUnAckedMessages(boolean
tester.getServer().start();
abortTxnTest()
subDispatcher.getRateLimiter().get();
testFbSerialization(boolean
processedFileFilterTest()
testBasicAuth()
testTransactionGetStats()
testUpdatePartitionedTopicProperties()
testCursorGetBacklog()
testSchemaCompatibilityCmd()
testConsumerBuilderImplWhenSchemaIsNull()
testProducerInterceptor()
testGenericObjectFunction(REMOVE_AVRO_FIELD_RECORD_FUNCTION_JAVA_CLASS,
updateStatusRecoverTest()
delayMsgBlockTest(String
testAddMessageWithStrictDelay()
testReestablishOwnershipAfterInvalidateCache()
testIteration()
testUpdateSinkSuccessWithPackageName()
testTokenFromHttpHeaders()
testNewTransaction()
testPtLoadingNotSharedMode()
testFlushThresholds()
testTopicDispatchRateLimiterPerTopicInMsgOnlyBrokerLevel()
testDoNotLossTheLastCompactedLedgerData()
testCompatibilityAsync(
testDeleteAuthenticationPoliciesOfTopic()
shouldSupportHostNamePattern()
testRecoveryIndex()
testMaxConsumersPerTopicUnlimited()
testOffloadPoliciesAppliedApi()
simpleConcurrentReadMissingRight()
txnIndividualAckTestNoBatchAndFailoverSub()
testElasticSearchSinkSchemaEnabled()
testGetPendingAckInternalStats()
testConsumerWithPooledMessagesWithReader(boolean
namespace_toString()
testIndexExists(ElasticSearchClient
testPackagesOperations()
testMetricsProvider()
testSlidingCountWindowTest()
openEncounteredShutdown()
testPackagesOperationsWithoutPackagesServiceEnabled()
testNamespaceLevelMetrics()
testGetMsgOutCounter()
testPythonPublishJavaConsume(Supplier<String>
testAlgorithmReturnCorrectResult()
testDeleteNamespaceWithTopicPolicies()
nackRedeliveryDelayTest()
shouldDetermineEnumValuesFromMethod()
(Consumer<byte[]>
testDeleteExistCluster()
testPathValid()
testAvroUUID()
testWatchReadonlyBookiesSuccess(String
shouldFailHandleCommandWatchTopicListClose()
simpleConcurrentReadIncluding()
testForceDeleteNamespaceWithAutomaticTopicCreation()
testMultiRolesAuthzWithCustomRolesClaims()
testUpdateFunctionSuccessWithPackageName()
testDLQDisabledForKeySharedSubtype()
testConvertAvroInt()
testResourceGranularities(10.0,
@Test(expectedExceptions
testRandomRead()
testPulsarBatchSourceStats(jarFilePathUrl);
testGetTransactionCoordinatorStatus()
testAsyncBatchReceiveNonPartitionedTopic(BatchReceivePolicy
serviceUrls()
individualPendingAckReplayTest()
testMetricsStatsThatTriggeredByLargeSingleData()
testPtUpdateNotSharedMode()
testCompatibility(PostSchemaPayload
testPeekEncryptedMessages()
@BeforeMethod(alwaysRun
stringRecordSchemaTest()
testSubscriptionName()
testMultiIpv6UriWithoutPulsarPort()
testNullReturningAsyncFunction()
namespace_nullNamespace()
testOffsetBackingStore(false);
connectDataPojoArrTest()
buffer.commitTxn(txnId);
testMessageRedeliveryAfterUnloadedWithEarliestPosition()
shouldPostponeAddsToPreventConcurrentModificationException()
testS3Configuration()
testAdminWithFull()
testPulsarFunctionBuiltin()
testZKServer.close();
testCancellationOfScheduledTasks()
testLoadProxyEventListenerWithBlankListerClass()
testGetTransactionInPendingAckStats()
testLowerBoundarySheddingBrokerWithOneBundle()
brokerNamespaceIsolationPoliciesUpdateOnTime()
testGetAllBookies(String
testResources(double
testPojoAsAvroAndJsonConversionToConnectData(Integer.MIN_VALUE);
testWebSocketNonDurableSubscriptionMode()
String.valueOf(events));
testMaxUnackedMessagesOnSubscriptionPriority()
testCreatingProducerTasksCleanupWhenOnTerminatedTopic()
testSetupClusterInNestedChrootMode(boolean
any()).thenCallRealMethod();
test](functions-debug.md#use-unit-test)
testPoolMessages()
testMetricsTopicCount()
testUseTlsUrlWithKeystore()
testJavaFunctionLocalRun()
pulsarCluster.getBroker(0);
testBacklogQuotaDefaultLimitGBConversion()
testUpdateStatsForActiveConsumerAndSubscription()
testMultiReaderReachEndOfTopicOnMessageWithBatches()
testSingleLedger(String
testInChunkedReturnTrue()
testNullValue(ElasticSearchConfig.NullValueAction
testGetBookieServiceInfo(String
testOffloadFenced()
ArrayList<>();
testGetTransactionMetadata()
testIsIgnoreEvent()
testWithLedgerRecovery(String
test_group_plugin()
equalsTest()
testFormatMessage()
testReplicatorRateLimiterWithOnlyTopicLevel()
testOffloadWithNullMessageId()
recoverTest(String
testReadCompactedDataWhenLedgerRolloverKickIn()
mergeTest()
testCreateGoFunctionWithFileUrl()
testNullTopicsPattern()
testPropertiesCLI()
testReadAndWriteAcrossLedger()
testMinMaxResource(1.01,
testClientKeyStoreSSLContext(Set<String>
testFunctionNegAck(Runtime
testCompactionWithTopicUnloading()
testDynamicBrokerPublisherThrottlingTickTimeMillis()
testMultiReaderOnLatestMessage(boolean
testDontCheckForPartitionsUpdatesOnNonPartitionedTopics()
testUpdateSubscribeRateLimiter()
testProduceConsumeUsageOnRG(PRODUCE_CONSUME_PERSISTENT_TOPIC);
testPojoAsAvroAndJsonConversionToConnectData(pojo);
testPasswordsPresentOnObjectMapping()
testLoggingFunction(Runtime.JAVA);
testCanReadEntryFromMLedgerHappyPath()
primitiveTypeProducerProducerUndefinedCompatible()
testUploadCmdWithRequiredArgs()
shouldPostponeAddsAlsoInRecursiveCalls()
testAddRg.setDispatchRateInMsgs(20000);
testGetSetSubscribeRate()
testWatcherCreatesBrokerSideObjectWhenConnected()
testSerialize()
testIncomingMessageSize(boolean
testOpReadEntryRecycle()
testBigBatchSize(String
testPutIfAbsent()
(PulsarClient
testMinMaxResource(Double
compatibleWithConfigFileTest()
testUpdateFunctionUserConfig()
test(long
testNs.getCluster(),
testFlushCursorAfterError()
testZKRefreshExpiredEntry()
testConsistencyOfTransactionStatsAtEndTxn()
testReadCompleteMessagesDuringTopicUnloading()
testTopicConsumerBuilder()
testNonBatchedMessage()
tester.getSinkType()
testJavaConstructorWithDownloadDirectoryDefined()
testMessage.getBoolField());
updateValueWhenVersionIsOutOfSync(String
testChunkSize()
testDynamicConfigurationTopicAutoSubscriptionCreation()
testRetentionPriority()
testFunctionLocalRun(Runtime.PYTHON);
testBeforeSendMessage()
testE2EPulsarFunctionWithNarFile()
testNamespacePolicyTakeSnapshot()
testLoadEventListener()
testTopicsPatternFilter()
shouldElectOneLeader()
testJavaPublishPythonConsume(Supplier<String>
testRegisterSinkNegativeParallelism()
testRegisterSinkMissingArguments(
map.put("indexName",
test](https://github.com/apache/pulsar/blob/master/tests/integration/src/test/java/org/apache/pulsar/tests/integration/src/test/java/org/apache/pulsar/tests/integration/io/sources/debezium/DebeziumMsSqlSourceTester.java).
leaderNodeIsDeletedExternally(String
testAdminWithoutTls()
testFindStartPointLoop(long
testMaxReceiverQueueSize()
testParseBrokerEntryMetadata()
testPlacementMinRackNumsPerWriteQuorum(boolean
testPulsarSQLAuthCheck()
testBasicKubernetesManifestCustomizerWithRuntimeCustomizerConfig()
testMessagesSize()
testSimpleSQLQuery(boolean
testGetTxnState()
testDeactivatingBacklogConsumer(boolean
testGetNumOfPartitions()
testGetLedgerMetadata()
testTopicDispatchRateLimiterOnlyTopicLevel()
testPulsarBatchSourceStats(String
testInvalidEntryIds()
testSetNamespaceEntryFilters()
shouldCallSetupOnce3()
dataBlockHeaderImplTest()
testWriteGenericRecords(ProcessingGuarantees.ATLEAST_ONCE);
testCreateFunctionWithBuiltinNar()
sendKeyIgnoreSingleField()
testInstanceJarDeps()
testRegisterStore()
testReplicateDeduplicationSnapshotIntervalPolicies()
testGolangConstructor()
testConvert()
testAddRg.setPublishRateInMsgs(random.nextInt());
testLoadProtocolHandlerBlankHandlerClass()
existingSharedProducer(String
markerMessageNotRecordPersistent()
testAutoDiscoverMultiTopicsPartitions()
testElasticSearch8Sink(boolean
testNamespaceDeduplicationApi()
testSharedSingleAckedPartitionedTopic(boolean
testPulsarConfigurationLoadingStream()
testDynamicConfigurationBrokerDeleteInactiveTopicsEnabled()
testProducerDeduplicationWithDiscontinuousSequenceId(BatcherBuilder
testWithPadding(0);
testCloseCursor()
testDeleteUnloadedOffloadedTopicExistsInBk(Supplier<String>
testGetWorkerService()
test_serialize_schema_complex(self):
testGetSet(false);
testWriteGenericRecords(ProcessingGuarantees.EFFECTIVELY_ONCE);
()
testTransactionCoordinatorExceptionUnwrap()
testInvalidateReadHandleWithSlowNonDurableCursor()
testDynamicTopicPublisherThrottlingTickTimeMillis()
testBatchMessageDispatchingAccordingToPermits()
testItems()
customCommands()
testPendingAckManageLedgerWriteFailState()
testAddRg.setDispatchRateInBytes(4
testCreateMissedPartitions(boolean
testConnectionMaxIdleSeconds()
testCreateTransactionSystemTopic()
testAcquireOwnershipWithZookeeperDisconnectedBeforeOwnershipNodeCreated()
loopUntilLeaderChangesForAllBroker(List<PulsarService>
testMethodB()
testFormatExistingCluster(String
testSupportsBatchBuilderWhenProducerConfigExists()
testScanLedgers()
testGetTopicsOfNamespaceFiltering()
testPendingAckMetrics()
testTakeSnapshot(false);
testConcurrentDelete(String
testDeleteNamespaceBeforeCommit()
testPulsarSourceLocalRun(jarFilePathUrl,
Assert.assertEquals(testBatchSource.getDiscoverCount(),
testSubscribeRateDisabled()
testRateLimit();
testTxnPerf()
testGetSchemaCompatibilityStrategyWhenSetBrokerLevelAndSchemaAutoUpdateCompatibilityStrategy()
testDisableTopicPoliciesWithDefaultConfig()
testKeepNullNodes()
testHealthTopicInactiveNotClean()
testGetSetNullValue()
testResourceGroupTwo.setDispatchRateInBytes(10000);
testCreateConsumerWhenSchemaIsNull()
tester.get().autoRecovery.getAuditor()
testAddRg.setDispatchRateInBytes(200L);
testCmdSinkConfigFile(SinkConfig
testAvroFunctionLocalRun(String
testOwnershipForCurrentServer()
test](functions-debug-unit-test)
testExpiringTokenMetrics()
testClientWithFull()
testRejectMessagesOnMultipleTopics(boolean
assertNotNull(msg);
testSchemaCompatibilityStrategyInBrokerLevel()
replayableProxyContentProviderTest()
testPublishCompactAndConsumePartitionedTopics(Supplier<String>
testBrokerWithMultipleBundles()
testNamespaceCreation()
testSubscribeKeySharedWithDLQ()
testSetupClusterInChrootMode(boolean
testResourceGroupOps()
testPulsarSourceLocalRun(fileServer.getUrl("/pulsar-io-data-generator.nar"));
testDeleteNamespace()
testCeilDiv()
testSeekByFunctionAndMultiTopic()
testHasMessageAvailableWithoutBatch()
testSelectorChangedAfterAllConsumerDisconnected(String
testInitFunction()
testMetricsStatsThatTriggeredByMaxRecordCount()
testMultiTopicSeekByFunction()
testGetLastMessageId()
testConfigurationConverting_checkNonExistMember()
testRemovalOfNodeJustTraversed(String
testCompactionApi()
testListenerNotInvokedWhenTopicModified()
tester.sinkType().getValue().toLowerCase(),
tester.validateSinkResult(kvs);
testMaxResource(Double
testMergeFunction()
testRabbitMQSink()
testExponentialWait()
test(@Nullable
producerFenced(ProducerAccessMode
revalidateLeaderWithDifferentSessionsSameValue(String
testIndexExists(client);
testAvroBigDecimal()
float32SchemaTest()
testHasMessageAvailable()
testIsUsingAvroSchemaParser()
testReaderInterceptor(int
testKubernetesFunctionInstancesRestart()
insertionDeletionWitGenericType(String
tester.shutdown();
test.run();
testNewHttpAuthState()
shouldExtractFilesOnceInSameProcess()
testDisableForwardSourceMessageProperty()
testEmptyExtraCredentials()
testInterleavedChunks()
testProducerClose()
tester.get().getServer();
testReadTillLacWithSmallBuffer()
testHandlerReconnectionPartitionProducers(false,
testRemoveAndHandlePendingRequestInCnx()
testBatchMessageIndexAckForSharedSubscription(boolean
nullKeyValueSchemaTest()
testLoadProtocolHandlerWrongHandlerClass()
testValidatePersistentTopicNameSuccess()
testManagedLedgerMetricsWhenPendingAckNotInit()
testDeregisterFileSourceBKPackageCleanup()
testDelayedDeliveryTrackerMemoryUsageMetric(String
test_group_broker_jdk8()
testRejectMessages()
testResourceGroupUpdateLoop()
testMemoryLimitNotSet()
testMalformed()
testTopicNameMatch(String
testRetentionAppliedApi()
testConcurrentPut(String
testMultiConsumerBatchRedeliveryAddEpoch(boolean
testGetPendingAckStats()
testLargeMessage(boolean
testExclamationFunction(Runtime.PYTHON,
testMinus()
consumerBuilderKeySharedTest()
tester.getSinkClassName(),
testConsumerBacklogEvictionWithAckTimeQuotaPrecise()
testCommandRequestTimeout()
testNotifyEvent()
testResetCursorCompatibility(Supplier<String>
testPreciseBacklogForPartitionedTopic()
Clock.fixed(
verifyNumBytesSmallerThanMessageSize()
testNeverDelayConsumerFutureWhenNotFail()
testTableViewUpdatePartitionsTriggeredDespiteExceptions()
testConsumerGetBrokerEntryMetadataForBatchMessage()
testJSONSchemaDeserialize()
simpleTest(String
testAddRg.setPublishRateInMsgs(200000);
testMaxOutstanding()
testReadEos()
testBatchSourceConfigDiscoveryTriggererClassNotFound()
crossStoreUpdates(String
testCursorNoRolloverIfNoMetadataSession()
loadConsumerConfigPropertiesFromMapTest()
testResourceGroupAttachToNamespace()
buffer.purgeTxns(Lists.newArrayList(0L)).get();
testIncludes()
testPendingLookupRequestSemaphore()
getGoInstanceCmd(boolean
testProduceOnNonPersistentPartitionedTopic(String
testEncryptionFailure()
testMergeFunctionTest()
shouldResetMsgLimitAfterUpdate()
testDownloadFunctionBuiltinFunction()
test_connect_timeout(self):
testDisableAuth()
testWindowFunction("tumbling",
tests](${FORK_REPO_URL}/compare/${PR_BASE_BRANCH}...${PR_BRANCH_LABEL}?expand=1&title=${FORK_PR_TITLE_URL_ENCODED}&body=${FORK_PR_BODY_URL_ENCODED})
testShrink()
testTransactionBatchConfigurations()
testClone()
testPulsarSinkLocalRun(jarFilePathUrl,
testMemoryLimit(null,
testConnectionAutoReleasePartitionedTopic()
shouldFailIfEnumParameterIsMissing()
testE2EPulsarFunction(fileServer.getUrl("/pulsar-functions-api-examples.nar"));
testReleaseOwnershipWithZookeeperDisconnectedBeforeOwnershipNodeDeleted()
testDefaultProcessor(int
testReplicateMaxConsumers()
testGetKeys()
testPersistentTopicExpireMessageOnPartitionTopic()
.sessionTimeoutMillis(5_000)
testHandleUnknownProperty()
getVersion()
testAllowOutOfOrderDeliveryChangedAfterAllConsumerDisconnected()
testBrokersWithNoBundles()
testPeekWithSubscriptionNameNotExist()
testUnsupportedExtendedSinkContext()
testCommandsWithoutArgs(String
testCreatSystemTopicClientWithRetry()
testRateLimitingWithBatchMsgEnabled()
testPendingAckMarkDeletePosition()
testPulsarSourceStats(jarFilePathUrl);
testTheIsolationPolicyUsingCustomMetadata()
test_sorted_fields(self):
testMemoryLimitPercentOver100()
testLockReleaseWhenTrimLedger()
testNoEndPadding(boolean
testSharedConsumerAckDifferentConsumer(boolean
testToString()
testListenerInvokedWhenTopicV1Created()
testResourceGroupOneUpdate.setDispatchRateInBytes(5000L);
testReaderCursorStatsCorrect()
testReplicatorRateLimiterWithOnlyNamespaceLevel()
testSetupClusterInChrootMode()
testMultpileUsages(CompressionType
openAsyncLogReaderFailed()
RetentionPolicies(retentionTimeInMinutes,
testWrite()
testRegisterSourceFailedWithWrongPackageName()
@BeforeMethod(timeOut
partitionAbortTest()
testBatchReceive(topic,
createMessageWrittenToLedger(String
testAuthenticationHttpWithMultipleProviders()
testGenericObjectFunction(REMOVE_AVRO_FIELD_FUNCTION_JAVA_CLASS,
testV28ClientSetV27BrokerRead()
testSyncNormalPositionWhenTBRecover(boolean
testHeartbeatTopicNotAllowedToSendEvent()
consumerBuilderTest()
singleNonSchemaAwareTest()
testEncodeAndDecodeKeyValues(kvSchema,
shouldUseDefaultMetricsPortWhenMetricsPortIsntSet()
testRQCalcGlobUsedEqualsToConfigTest()
testGetTopic()
testMemoryLimit(-512L,
cmdParserWebSocketTest()
testOffsetBackingStore(boolean
testTryAcquire()
testFunctionLocalRun(Runtime.GO);
tester.sourceType(),
testUpdateIfLeaderFunctionWithoutCompaction()
testInitFunction(Runtime
shouldUseConfiguredMetricsPort()
testKeyInMap(long
test_default_value(self):
testReplicateQuotaTopicPolicies()
testGenerator()
testReadTillLac(boolean
testPulsarConfigurationLoadingProp()
namespace_emptyCluster()
testRegisterSinkFailureWithInvalidTransformFunction()
overridePropertiesTest()
testPartitionedShadowTopicSetup()
testTooManyRetriesOnPartitionMetadata()
testProduceAndConsume(SubscriptionType
testAddRg.setDispatchRateInMsgs(Integer.valueOf(random.nextInt()));
testInternalGetReplicatedSubscriptionStatusFromLocal()
testKeyValueSchemaWithStructsINLINE()
cacheWithCustomSerde(String
testMultiRolesAuthzWithEmptyRoles()
testPendingAckBatchMessageCommit()
testGetAmount()
testCompletersAdmin()
testMalformedDocFails()
subscriptionTypeTest()
testLowWaterMarkForDifferentTC()
test](functions-debugging.md#use-unit-test)
newNativeAvroProducerForMessageSchemaOnTopicWithMultiVersionSchema()
testDeleteTopicAndSchemaForV1()
testReacquireLocksAfterSessionLost()
testByte()
testNonBatchingMaxMessageSize()
test(Supplier<String>
testBatchReceiveAckTimeout()
updateValue(String
testAutoClusterFailoverSwitchWithAuthentication()
testCursorCheckReadPositionChanged()
testAsyncTruncateLedgerSlowestCursor()
testLoadBalancerNamespaceMaximumBundles()
testKeyValueSchemaINLINE()
revalidateLockOnDifferentSession(String
testFunctionNegAck(Runtime.PYTHON);
testBatchAckTracker(boolean
testAcquireFunctionMetadataManagerExclusiveProducerNotLeaderAnymore()
testBeforeAddEntryWithException()
testBatching(String
testHasMessageAvailableAsync()
testDebeziumMySqlSourceJsonWithClientBuilder()
testMaxResourceUsage()
testGetMessageSequenceRefForBatchMessage()
testUnderReplicatedState(Supplier<String>
testSendCallBackReturnSequenceId()
testNegativeAcksDeleteFromUnackedTracker()
tester.get().getAddress());
testGetPositionAfterN()
testPersistentTopicFactory(boolean
testResetPosition()
testGenerateNextLogIndexLag()
testProduceToNonPartitionedTopic(String
testHealthCheckupV2Error()
testWatchBookiesSuccess(provider,
testConfiguration()
testBackwardCompatibility()
testResetMethodOfOneBundlesEmptyBundleMap()
testCanCancelReadEntryRequestAndResumeReading()
testEncodeDecodeSuccessfully()
testReadFromConfigFileWithoutProxyUrl()
assertEquals(((CounterBrokerInterceptor)
testDynamicConfigurationTopicAutoCreationNonPartitioned()
testWatchTopicList()
testAddRg.setDispatchRateInMsgs(-1);
testNotEnabledDeleteZkNode()
testAsyncTruncateLedgerRetention()
testConsumerImpl()
testGenericReaderByClazzBasedWriterSchema()
connectDataComplexAvroSchemaGenericRecordTest()
namespace_loopBackAddress()
testTimestampWithJsr310Conversion()
testGetPulsarAdmin()
testSslBasic()
shouldTerminateWhenFutureIsCancelled()
testUpdateWatcher()
testDeleteSubThenDeletePendingAckManagedLedger()
testAttachKeyToMessageMetadata()
testProducerCloseFailsPendingBatchWhenPreviousStateNotReadyCallback()
testDeleteUselessLogDataWhenSubCursorMoved()
testDeleteOffloadedTopic(String
testDeleteLog(TxnLogBufferedWriterConfig
testNotExistIMessageFormatter()
testMultiReaderMessageAvailableAfterRestart()
testNukeNonExistingCluster(String
testTopic()
testCmdRebalance()
hashCodeTest()
testResourceGroupOneUpdate.setDispatchRateInBytes(5000);
testPartitionedTopicMessagingWithExclusive(Supplier<String>
testTransactionOperation()
testSingleConsumerMultiAssign()
txnMetadataHandlerRecoverTest()
testCreatePartitionedTopic()
testHashcodeAndEqualsData(){
tester.prepareSink();
testGetSchemaRequestTimeout()
testCopyKafkaHeadersEnabled()
testClientCreation()
testNamespace).contains(topicName.toString()));
testParentId()
Awaitility.waitAtMost(30,
testMultiConsumerImpl()
testCreateTimeoutException()
testGetConsumerMultiTopic()
testAvroToJson()
testManagedLedgerRollOverIfFull()
testFilterTopics()
testMessageOrderAndDuplicates(Set<T>
testTransactionTopic()
keyValueAutoConsumeTest()
test](functions-debug-unit-test.md)
testNonPartitionedTopicTruncate()
testFilterEntriesForConsumerOfEntryFilter()
testBatchMessageMultiNegtiveAck()
testAvroSchemaWithHttpLookup()
testClientBuilderWithIllegalMinusPort()
testEntryFilterRescheduleMessageDependingOnConsumerSharedSubscription()
testSetMaxProducers()
testBadName()
testEnableLedgerReplication(String
testSetSizeBasedBacklogQuota()
testPartialPartition()
testCardinality()
testNotSupportedAvroTypesBytes()
produceTest()
testAddRg.setPublishRateInBytes(1024
toCompletableFuture_shouldCompleteSuccessfully_channelFutureCompletedAfter()
testPartitionsUpdatesForMultipleTopics()
testTlsClientAuthOverHTTPProtocol()
testMultiTopicStats()
loadFromSaslYamlFileTest()
testDisableBatching()
testPulsarBatchSourceStatsWithFile()
testFormatNonExistingCluster(String
testWarnLevel()
testArrayTypeRoleClaim()
testE2EPulsarFunction(jarFilePathUrl);
testBatchReceiveAndRedeliveryNonPartitionedTopic(BatchReceivePolicy
testPulsarSinkStatsWithFile()
testAckWithTransactionReduceUnAckMessageCount(boolean
testNoWatchersWhenNoServerSupport()
testCommandWatchTopicListCloseRemovesListener()
testLoadFileFromSystemProperties()
testClientWithCertAndKey()
test_avro_map_array(self):
testTransactionBufferLowWaterMark()
testManagedCursorPersistStats()
testPackagesOperationsFailed()
EncryptionKeyInfo();
testSuperUserCanDeleteResourceGroups()
shouldFailHandleEndTxnOnSubscription()
testHandlerStateChangeToReady()
awsS3PropertiesTest()
publishMessages(topic,100,false);
insertionOutsideCache(String
loadFromMapTest()
@AfterMethod(alwaysRun
namespace_null()
testDownloadFunctionBuiltinConnectorByName()
testTopicsSizeLessThan1()
send(100);
produceTest(true);
testShutDownWithMaxConcurrentUnload()
testProduceConsumeUsageOnRG()
testAutoSchemaFunction()
testMainGenerateDocs()
testGetReplicationWorkerIdRereplicatingLedger(String
testRQCalcNegativeLocalUsageTest()
testGlobalTopicPolicies()
testReadFromConfigFile()
@Cleanup("shutdown")
testZookeeperServers()
testDebeziumMsSqlConnect("org.apache.kafka.connect.json.JsonConverter",
testUpdateMetadataCmdWithAllArgs()
testGetSubDispatchRateApplied()
testRQCalcGlobUsedZeroTest()
testPut()
testUpdateCursorPropertiesConcurrent()
testGetProduceBaseEndPoint()
testUpdatePartitionedTopicCoontainedInOldTopic()
testInitFunction(Runtime.JAVA);
testAuthenticate(provider);
concurrentInsertionsAndReads()
testConsumerMemoryLimit()
testGetTopicsOfNamespaceDisabledFiltering()
invalidJsonContent(String
testCreateFunctionWithPackageUrl()
testAddRg.setDispatchRateInBytes(-1);
testDeleteInactiveNonPersistentSubscription()
testPublishCompactAndConsumeRest(Supplier<String>
testProduceToPartitionedTopic(String
testGC()
testBacklogQuotaInGB(boolean
timeout(45_000).times(1)).resume(errCaptor.capture());
testListenerInvokedWhenTopicCreated()
testSinkConfig.setTransformFunction(TRANSFORM_FUNCTION
testGetCompactionThresholdApplied()
testReadCompactedSink()
testVoidInputClasses(PulsarSourceConfig
testSchemaCompatibilityStrategyCmd()
testCloseConnectionOnBrokerTimeout()
testSelectOneMultipleHosts()
testReplicateMaxUnackedMsgPerSub()
testPtWithSinglePartition()
testReplicatorTopicPolicies()
testSerializeRecordToJsonExpandingValue(SchemaType
testRejectMessages(boolean
testBulkBlocking()
testCloseClient()
msg.getMetadataBuilder();
testShouldNotInterceptWhenInterceptorDisabled()
awsS3CredsProviderTest()
testPythonPublishFunction()
testParseMessages(boolean
testCompatibilityAsync(payload,
testCmdSourceCliMissingArgs(
testServiceStartup()
testDuplicateMetricTypeDefinitions()
socketTestEndOfTopic()
testInitialNamespaceSetupZKDefaultsFallback()
testKeyValueSchemaWithStructs(KeyValueEncodingType
testMaxResource(1.00,
testBinaryProtoToGetTopicsOfNamespace()
testDebeziumMySqlConnect("org.apache.kafka.connect.json.JsonConverter",
testGenerateDocumention()
testPojoAsAvroAndJsonConversionToConnectData(Byte.MAX_VALUE);
testJavaConstructorWithWebServiceUrlAndExposePulsarAdminClientEnabled()
testPublishFunction(Runtime
testConvertMessagePayloadImpl()
testGenericObjectFunction()
testMaxSameAddressProducers()
testRunWithTlsProviderFlag()
testGetTopicsOfNamespaceOpsWithConsumePermission()
testCheckAllLedgersCTime(String
mock(AsyncResponse.class);
testRateLimit(String
testValidateConfig()
testArray()
testTakeSnapshot(true);
testMultiListener()
testInitialSubscriptionCreation(TopicDomain
checkMessages()
testConnectionAutoReleaseUnPartitionedTopic()
testProduceConsumeOnTopicPolicy()
testDownloadFunctionBuiltinConnector()
testConsumedLedgersTrimNoSubscriptions()
testRangeContaining()
testHealthCheckTopicNotOffload()
testEnumValuesProvider(Sample
testWithPadding(int
testObjectWithUnknownProperties()
testExamineMessageMetadata()
testIncompatibleSchema();
testGetCreateDeleteSchema()
testSubscriptionStats(final
testReadMessageWithoutBatching()
testProducerBuilderImplWhenMessageRoutingIsCustomPartitionAndMessageRouterNotSet()
testConsumerId.hashCode());
namespaceService.splitAndOwnBundle(
testSchemaLedgerAutoRelease()
testPublishOffloadAndConsumeViaThreshold(String
testGbps()
testResourceGroupCreateDeleteCreate()
testFindPositionByIndex()
testGenericObjectRemoveFieldRecordFunctionKeyValue()
testFileMode()
testShadowReplication()
testConversion()
testGenerateSystemMetricsWithSpecifyCluster()
testGetConsumerKeyHashRanges()
testGetTopicsWithDifferentMode()
testFunctionLocalRun(Runtime.JAVA);
testProducerNegative()
testGetNativeSchemaWithAutoConsumeWithMultiVersion()
testSplitBundleUpdatesLocalPoliciesWithoutOverwriting()
testTopicLevelOffloadPartitioned()
.topics(Lists.newArrayList(topic0,
testUnsupportedExtendedSinkContext(){
testPartitionedProducerConsumer(true,
testDynamicConfigurationTopicAutoCreationPartitionedWhenDefaultMoreThanMax()
shouldFailHandleNewTxn()
testDataStream).get();
testObject.getValue());
testSkipBrokerEntryMetadata()
testBadNamespace()
testEndTransactionOpRetry()
shouldFailHandleCommandWatchTopicList()
testAddRg.setPublishRateInMsgs(1);
getAdditionalJavaRuntimeArguments(boolean
testReplicatePersistentPolicies()
testSetErrorProxyAddress()
testSetTopicLevelEntryFilters(String
shouldNotPreventCreatingTopicWhenNonexistingTopicIsCached()
testSourceConfigParsingPreservesOriginalType()
testNoRolloverIfNoMetadataSession()
shouldLimitReplayBodyBufferSize()
testMultiRolesNotFailNonJWT()
testGenericRecordSource()
localTimeSchemaTest()
testOrderingWithConsumerListener(boolean
testMigrationWithDefaults()
testCreateSubscriptionWithProperties(boolean
testCacheCleanup()
testDeregisterNotExistedSink()
testStickyKeyRangesRestartConsumers()
testKeyValueSchema()
testAckTracker(boolean
testImmediateAckingTracker(boolean
exclusiveWithConsumers(String
shouldFailHandleAddSubscriptionToTxn()
testLastMessageIdForCompactedLedger()
txnTransactionRedeliverNullDispatcher(CommandAck.AckType
shouldFailHandleTcClientConnectRequest()
testPartitionTopicsOnSeparateListner()
testBrokerLevelPublishRateDynamicUpdate()
testWorkerServerNonTlsNotStarted()
testMetricsEmpty()
testGetMetrics()
testDebeziumMySqlSourceJson()
testGenericRecord(SchemaType
cmdParserServiceConfigTest()
testPersistentTopicStatsAggregationByProducerName()
testPublish()
testSource();
testClientCreationWithProxy()
testNext()
testShadowTopics()
testBatchSendOneMessage(BatcherBuilder
testDefaultIsolationPolicyNotCovered()
testLoadFileFromPulsarProperties()
namespace_emptyTenantElement()
testKeyValueSchemaWithStructs(KeyValueEncodingType.INLINE);
testCheckMaxConsumers()
testResolveLedgerManagerFactoryNullLayout()
testProduceConsumeUsageOnRG(NonPersistentTopicNamesSameTenantAndNsRGs);
testReestablishOwnership()
testMutlipleSharedConsumerBlockingWithUnAckedMessages(boolean
testCommandWatchSuccessResponse()
testNewChannelInitializersOverlapped()
createFunctionConfig(String
kafkaLogicalTypesTimeTest()
testPartitionedProducerConsumer(false,
testTxnTimeOutInClient()
testMultiTopicsConsumerCloses()
testAuthProvider(Optional<FunctionAuthProvider>
testDisableSubscribeRate()
testEffectivelyOnceEnabled(Supplier<String>
testThreadLocalStateCleanupInFastThreadLocalThread()
testConsumerCreationWhenEnablingTopicPolicy()
testMatchesHostAndPort()
structTypeConsumerProducerAlwaysCompatible()
testAuthenticate()
testTotalTopicsSizeLessThan1()
testPublishOffloadAndConsumeViaThreshold(Supplier<String>
testDiscoveryPhaseError()
testBacklogQuotaDefaultLimitBytes()
testAutoCreateTopic()
testMetadataStoreUrl()
testInitializeSchema()
testTlsTransport(Supplier<String>
testReadEntriesOrWaitWithMaxPosition()
testPulsarBatchSourceStatsWithUrl()
testAutoClusterFailoverSwitchTlsTrustStore()
testPojoAsAvroAndJsonConversionToConnectData(Integer.MAX_VALUE);
cleanup()
testTransactionOperation(TxnLogBufferedWriterConfig
testGetConnectExceptionForAckMsgWhenCnxIsNull()
testAsyncProducerAndAsyncAck(int
testExclamationFunction()
testBatchReceiveAsync(topic,
testMultiNonPartitionedTopicWithRollbackDuration()
testBatchMessagePublishAndConsume(String
testHistoryTopicContent(skipUnparseableDDL,
testReadWithAClosedLedgerHandler()
testFlushInPartitionedProducer(false);
testEndTBRecoveringWhenManagerLedgerDisReadable()
tester.produceSourceMessages(numMessages);
addSubscriptionPropertiesTest()
testTimeoutTrackerExpired()
testSinkConfig.setTransformFunction(TRANSFORM_FUNCTION_CLASSNAME
testTimeoutRetriesOnPartitionMetadata()
testVerifyOriginalPrincipalWithoutAuthDataForwardedFromProxy()
longRecordSchemaTest()
testDelayedDeliveryApplied()
testHasMessageAvailableWithBatch()
testCheckBacklogQuotaFailed()
testMemoryLimitPercentNegative()
testRemoveSubscriptionForReaderNeedRemoveCursor()
PowerMockito.when(FunctionCommon.class,
testSslWithClientAuth()
testResourceGranularities(0.0,
testRemoveClusterFromNamespace()
testUpdatePartitionedTopic()
testMetricsGroupedByTypeDefinitions()
test_logger_thread_leaks(self):
testSlowestReadPositionForActiveCursors()
testBrokerReady()
testPaddingOnLastBlock(boolean
canWriteSampleWithoutLabels()
testProduceConsumeUsageOnRG(PersistentTopicNamesDifferentTenantAndNsRGs);
testTopicDoesNotExists()
testWaitingCurosrCausedMemoryLeak()
testAddRg.setPublishRateInBytes(random.nextInt());
testFunction(0),
testLoadResourceRestrictionsConfig()
testOffload(true);
revalidateLockWithinSameSession(String
testPulsarSourceStatsBuiltin()
testNewTransactionWhenDisable()
testTenantNameWithInvalidCharacters()
testGetTopicsOfNamespaceNoChange()
testElasticSearch8SinkRawData()
testBackwardCompatibilityNullLimitAndLimitSize()
testGetBundle()
testRetryExceptionOfEndTxn()
testReplicatedSubscriptionAcrossTwoRegions()
testResourceGranularities(Double
testProducerTimeoutOnLookup()
test_group_proxy()
Assert.assertEquals(testBatchPushSource.getDiscoverCount(),
MockPulsarService(ServiceConfiguration
testBehavior()
@SuppressWarnings("unchecked")
testAutoTopicCreationOverrideWithMaxNumPartitionsLimit()
testTimeoutTracker()
testOptionsAutoTopicCreation()
testConfigFileDefaults()
testWithNoDelays()
testRedeliveryAddEpochAndPermits(boolean
@BeforeClass(groups
testFailAndRetry()
testEncryptionConsumerWithoutCryptoReader()
namespaces()
test_consumer_is_connected(self):
tests](${FORK_REPO_URL}/compare/master...${PR_BRANCH_LABEL}?expand=1&title=${FORK_PR_TITLE_URL_ENCODED}&body=${FORK_PR_BODY_URL_ENCODED})
producerFenced(boolean
testBadBatchSize()
testRecordFunctionTest()
testNonContiguousDeletedMessagesRanges()
testTransactionBufferHandlerSemaphore()
testSplitTopicAndPartitionLabel()
testNoPadding()
testResourceGroupOneUpdate.setDispatchRateInMsgs(50);
testWindowFunctionWithAtleastOnce()
test_group_broker_flaky()
credentialsTest()
testCheckTimeBasedBacklogQuota()
test_group_shade_build()
testHistoryTopicContent(boolean
testPrivateInstance()
testWrapper()
ThreadPoolExecutor(5,
jsonComplexSchemaTest()
testTokenExpirationProduceConsumer()
testReplicateDelayedDelivery()
testUpdateMetadataCmdWithRequiredArgs()
testAddForDifferentKey()
testMetricsAvgMsgSize2()
shouldExtractFilesOnceInDifferentProcess()
namespace_nullTenant()
testServerCaCertSslContextWithSslProvider(SslProvider
testWrongArg()
testDownloadFunctionBuiltin()
testReplicateMaxMessageSizePolicies()
testFunction(4),
testFormatExistingClusterWithBookies(String
testBacklogConsumerCacheReads()
tester.get().getServer().getBookie().getStateManager().transitionToReadOnlyMode().get();
testDeleteNamespace(NamespaceAttr
test_none_value(self):
testProduceAndConsumeMessageWithWebsocket()
shouldAllBrokersBeAbleToGetTheLeader()
testEmptySchema();
testMarkerDeleteTimes()
invalidateEntriesFromCacheByMarkDeletePosition()
testGenericAvroSchema()
testMaxUnackedMessagesOnConsumerAppliedApi()
test(self):
testExpandAndShrink()
testRemoveMaxConsumersPerSubscription()
testLookup()
testPersistentMessageFinderWithBrokerTimestampForMessage()
testNewAuthState()
testDeregisterFileSinkBKPackageCleanup()
testMaxProducersDisabled()
testPolicyValue()
testWebSocket()
testCanAcknowledgeAndAbortForTransaction()
testCreateTenantCmd()
testValidateListMethodToReturnNonNullStringList()
testAreExceptionsPresentInChain4()
testReadOtherManagedLedgersEntry()
testGetPartitionStatsWithEarliestTimeInBacklog()
testMultipleMetadataServiceUris()
tester.close();
kafkaLogicalTypesDecimalTest()
testGenericProtobufNativeSchema()
namespace_equals()
testRegisterFunctionSuccessK8sNoUpload()
testPulsarSourceLocalRun(String.format("%s://data-generator",
testTopicTransactionBufferDeleteAbort()
testGetKeyNotPresent()
testPrepareFormatNonExistingCluster(String
testKeySharedConsumerWithEncrypted()
testConcurrentPutGetOneKey(String
testJavaConstructorWithoutWebServiceUrlAndExposePulsarAdminClientDisabled()
testNonDurableConsumer(Supplier<String>
testGetStatsForPartitionedTopic()
testCreateFunctionLabels()
testOperationDispatchRate()
testPendingAckLowWaterMark()
testConvertCustomPayload()
acquireLocks(String
testBlockUnackedConsumerRedeliverySpecificMessagesCloseConsumerWhileProduce()
testPartitionedTopicMsgDelayedAggregated()
test_group_function_state()
testChangeLogLevel()
testJavaPublishFunction()
testMessageExpiryAfterTopicUnload()
testTopicDispatchRateLimiterPerTopicInByteOnlyBrokerLevel()
namespace_persistentTopicExplicitDomain()
emptySubscriptionConsumerTest()
testGetMBeans()
simpleInsertions()
testDownloadFunction()
