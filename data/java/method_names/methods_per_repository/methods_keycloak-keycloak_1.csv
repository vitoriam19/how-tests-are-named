testCibaGrantSettingByDynamicClientRegistration()
testEquals()
testAccessThrottling()
testProviderInitiatedLogoutCorrectlyLogsOutConsumerClientsWhenPrincipalTypeAttribute()
testRealm().flows().registerRequiredAction(simpleRepresentation);
testErrorMessageInDenyAccess(message,
testRealm().update(testRealm);
testUsersInRole()
test('parse
publicKeySignaturesAlternatives()
variousFactoryProviders()
testMigrationTo20_x()
testPostLogoutRedirectUri()
testOptionalAttributes()
testReadonlyUpdates(KeycloakSession
testFeatureAvailability(boolean
testConfidentialClient()
testQuerySearch()
soapBindingAuthnWithoutSignatureMissingDestinationTest()
userInfoForServiceAccountWithoutRefreshTokenImpl()
testClientSessionCountExceededAndOldestSessionRemovedResetPasswordFlow()
testedUser.getId();
testMultipleClientsBackchannelAuthenticationFlows()
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.ES512,
whenUpdateDynamicClientRotationMustFollowConfiguration()
testBasicAuth()
updateToExistingEmail()
searchByLastNameExact()
testCertificatePolicyValidation("1.3.76.16.2.1,1.2.3.4.5.6",
testExtendedClientPolicyIntefacesForClientRegistrationPolicyMigration()
URL()
testCustomValidationForUsername()
testReAugAfterChangingProperty(LaunchResult
testClientUpdateSourceGroupsCondition()
searchGroupsOnGroupHierarchies()
testUserCredentialsPage.resetPassword("12345678901234567890123456789012");
logoutWithIdTokenAndDisabledClientMustWork()
testClientInvocationWithOBBClient_rfc2553_unresolvedAttributes()
testCRFields()
testLivenessUp()
testExpiredClientSessions()
@TestProvider(CustomUserProvider.class)
testAddVirtualAuthenticator()
residentKeyRequiredWrong()
testRemovePoliciesOnGroupDelete(KeycloakSession
testAddRemoveUser()
testCreateUpdateDeleteConditionRuntime()
testBackchannelAuthenticationFlowRegisterDifferentSigAlgInAdvanceWithSignedAuthenticationRequestUriParam()
shouldReturnMappingForHttpProxyWithNoProxy()
testCaseSensitivityGetUserByUsername()
testAccountUpdateAttributeExpectFailure("deniedsome*thing");
testPodTemplateIsMerged()
validateDoubleNumber_ConfigValidation()
testMoveBack()
testReadOnlyUserThrowsIfChanged()
testIdTokenEncryptionWithoutEncryptionKEK()
registerUserSuccess_lastNameRequiredForScope_notRequested()
testTwoNestedLocksCurrentlyInternal(session,
testRealm().clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).setDirectAccessGrantsEnabled(false);
serviceAccountWithClientCertificate()
testSkipOtherExecutionsIfUserHasRoleCondition()
testingClient.testing("test").onAdminEvent(secondEvent,
testCodeToTokenRequestSuccess512()
testRequiredAttribute()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("client-a").protocol("openid-connect").build());
testGrantTypesSupportedWithTokenExchange()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-1-sel").build());
testSuccessfulMultipleParBySameClient()
test('multiAlias',
testParCorsRequestWithValidUrl()
testAccountUpdateAttributeExpectFailure(String
testSuccessfulUserInfoResponse(response);
testContext.getOrCreateCleanup(REALM_NAME).addClientUuid(clientId);
testDecodedWithClientIdAnActualUuid()
testSubtasks.concat(['dist-css',
testHealthEndpointNotEnabled()
testLogLevelSettingsAppliedWhenJsonEnabled(LaunchResult
testRealm().users().get(defaultUser.getId());
proceedSetupWebAuthn()
testRealmAccountManagementPage.setAuthRealm(TEST);
testSuccessfulServiceAccountImpersonation(UserRepresentation
testRealmResource().clients().get(client1.getId()).roles().create(RoleBuilder.create().name("client-role").build());
testAttributeConsumingServiceIndexSet()
testExtendedClientPolicyIntefacesForDeviceAuthorizationRequest()
testGet_CacheFor()
testPublicKeyEncodeDecode(String
testRealm().users().get(userId);
testUpdateAndRemove()
testRealm().clientScopes().create(ClientScopeBuilder.create().name("department").protocol("openid-connect").build());
test('empty
testRealm().clientScopes().findAll().stream()
testRealm.toRepresentation().getAccountTheme());
testIdempotentProfile()
testEndpointAsAudience(String
testAccountUpdateAttributeExpectFailure("deniedBAr");
loginWhenUserDoesNotExistOnConsumer()
test04UpdateLDAPDirectlyToSetUpdatePassword()
rolesCanBeAddedToScopeEvenWhenTheyAreAlreadyIndirectlyAssigned()
testOverloadedTemplateUri()
testSimpleCompare()
testDefaultDbPropertiesGetApplied()
clientCredentialsAuthSuccessWithoutRefreshToken_pairWiseSubject()
testStatic()
testLogInAsUserInIDPAfterError()
@EnabledIfSystemProperty(named
testing().onAdminEvent(create(date3,
testContext.get();
testRealmLoginPage.form().setPassword("password");
testRemovePoliciesOnGroupDelete()
testImportSucceeds(LaunchResult
testCompositeRoles()
testLogoutWhenAccountClientIsDisabled()
testSimpleCompareAnd()
testUnsuccessfulUserInfoRequestWithDisabledUser()
testComponentModelId(KeycloakSession
testSetupRecoveryAuthnCodes()
testRequiredByClientScope(KeycloakSession
testRealmResource().flows().updateRequiredAction(providerId,
testBackchannelAuthenticationFlowNotRegisterSigAlgInAdvanceWithSignedAuthentication("valid-CIBA-CD-Ein",
testEMailRequiredInProfile()
logoutExpiredConfirmationAction()
required()
updateEmailLinkNotVisibleWithoutUpdateEmailActionEnabled()
testSuccessfulUserInfoResponse(Response
testTotp()
validateConfiguration_attributePermissionsErrors()
test('stringArgs',
testRealmRep.setGroups(Arrays.asList(GroupBuilder.create().name("restricted-group").build()));
testIntrospectTokenAfterImpersonation()
testing().onEvent(create(System.currentTimeMillis(),
testDatabaseKindProperties()
testAccountUpdateAttributeExpectSuccess("nodeniedBARrier");
checkAuthenticatorTimeLocale()
testFeatures(true,
testUseDefaultPortsAndHttpsSchemeWhenProxyIsSetAndStrictHttpsEnabled()
testImportAndIgnoreDirectory(LaunchResult
test02UpdatePasswordTest()
testRealmResource().clients().get(clientUuid).addOptionalClientScope(scopeDefId);
testRealm().users().get(userId).credentials();
testAttributeNames()
testApp[0]).collect(Collectors.toList())
multipleValidations()
testGetBooleanAttributeValueRP()
registerClientAsAdminWithNotDefinedScope()
attestationConveyancePreferenceDirect()
testAttributeDisplayName()
testReusingAccessAndRefreshTokens_refreshDisabled()
enabledFeatures()
testSetLogFormat(LaunchResult
testRealmSessionCountExceededAndOldestFirstBrokerLoginFlow()
testRealm().users().get(userId).toRepresentation();
testUrls()
testFAPIBaselineConfidentialClientLogin()
testSysProps.add(name);
changeCurveFromP521ToP256()
testCustomValidationForUsername(KeycloakSession
testFeatureEnabledOnStart(LaunchResult
testAttributeGuiOrder()
testClientSessionCountExceededAndNewSessionDeniedBrowserFlow()
testSuccessEncryptedResponseSigAlgRS256AlgRSA_OAEP256EncA192CBC_HS384()
testScopeMappingRoleRemoval()
testAuthorizationTokenSignatureAndEncryption(Algorithm.RS384,
stepupToUnknownEssentialAcrFails()
testDirectEncryptAndDecrypt(Key
testMetricsEndpointUsingRelativePath()
testRegisterUserSuccess_lastNameOptional()
testCodeToTokenRequestSuccess()
testWinKeycloakLogFileCreated(RawDistRootPath
testWebAuthn(boolean
testUserInfoSignatureAndEncryption(Algorithm.PS256,
testClientScopesPermissions()
testQueryAssociatedPermissions()
testDeleteDefaultRole()
testSecureSigningAlgorithmEnforceExecutor()
testRealmExportImport()
testRealmResource().flows().updateRequiredAction(UserModel.RequiredAction.UPDATE_EMAIL.name(),
testRealm().users().get(ur.getId()).update(ur);
testingClient.testApp().oidcClientEndpoints();
testRolesWithIdsSearchQueries(this::getModelResult);
loginWithIdpEntityIdMismatchResponse()
mapperStillWorksWhenClientIdIsChanged()
noRoleAddedIfUserInfoDisabledAndOnlyClaimIsInUserInfo()
testDefaultDbPortGetApplied()
testRealmResource().groups();
testMigrationTo19_x();
testRealmResource().clients().findAll().get(0).getId();
mergedConfig()
testErrorResponse()
testTokenRevocation()
testRetrieveConsentsForUserWithClientsWithGrantedOfflineAccess()
loginWithAcr2()
ecpFlowCreatesTransientSessions()
testDeleteAndPolicyUpdate()
testing().clearAdminEventStore(realmId2);
testSuccessVerificationUriComplete()
testSuccessfulSinglePar()
()
testRequiredReadOnlyAttribute()
testBuildCommand(LaunchResult
testRealmResource().clientPoliciesProfilesResource().getProfiles(true);
testRunFinished(Result
testContainsOrExact(String
testIdempotentProfile(KeycloakSession
testAuthorizationEncryptionAlgRSA_OAEPEncA256GCM()
testCustomAttributeOptional()
testArtifactBindingWithBackchannelLogout()
validateIntegerNumber()
testJsonHttpClientAttributes()
validateStringFormatValidatorBaseForCollections()
testMainIngressDurability()
testDisabledPathNoCache()
testLifespans();
testAddUndefinedValuesToMapStringString()
refreshTokenReuseTokenWithRefreshTokensRevokedAndSSOReauthentication()
simpleValidation()
testConfigurationGetSet(KeycloakSession
registerWithLoginHint()
testUnsuccessfulUserInfoRequestWithoutOpenIDScope()
testPodTemplateIncorrectName()
testIngressOnHTTP()
testContext.getAppServerBackendsInfo().get(0);
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest(useRequestUri,
reauthenticationWithReachedAcr()
authenticateWithValidClientSecretWhenRotationPolicyIsEnableForHS512()
testWithoutExpectedClientScope()
testClientUriValidation(boolean
testPingModeSuccess()
testEncodeDecodeGUID()
testCertificatePolicyModeAnyOneRequestedAndNotPresent()
testXMLBombAttack()
testReadinessUp()
testCustomAttribute_Optional(KeycloakSession
@BeforeStartDistribution(AddAdditionalDatasource.class)
testEncodedWithClientIdUUid()
testIntrospectDoesntExtendTokenLifespan()
testingClient.testing().exportImport().setAction(ExportImportConfig.ACTION_IMPORT);
testNumberOfFailuresForTemporaryDisabledUsersWithPasswordGrantType()
testSecretsCanBeUnWatched()
testShouldNotReAugIfConfigIsSame(LaunchResult
testAuthenticationChannelErrorCase(Status
testExecutor.loginForm(testUser,
testServerDoesNotStartIfValidationFailDuringReAugStartDev(LaunchResult
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-2").build());
testRealm.setClientScopes(Collections.singletonList(ClientScopeBuilder.create().name("customer").protocol("openid-connect").build()));
testParseQuery("\"key
testRealms.add(RealmBuilder.create().name(REALM_NAME_2).build());
testMigrationTo18_0_0()
testXForwardedHeadersWithEdge()
testNoValidationsIfUserReadOnly(KeycloakSession
testNewInstance()
deleteDefaultRole()
testNestedDatabaseProperties()
testPublicClientWithPKCEFail()
testRealm().flows().registerRequiredAction(requiredAction);
testConfigurationGetSetDefault()
ampersandEscape()
testBuildRunTimeMismatchOnQuarkusBuildPropWarning(LaunchResult
testGroupAttributeTwoGroupHierarchyMultiValueNoAggregate()
testDevicePollingIntervalPerClient()
testFailureParIncludesRequestUri()
testClient.toRepresentation();
testRealmResource().clients().get(accountMgmtId).roles()
testing().onEvent(create(EventType.LOGIN,
testBfs()
preferredVerificationCorrect()
testExecutor.sendXMLHttpRequest(
getClientRotatedSecret()
testExchangeFromPublicClient()
testUpdateValidProfilesAndPolicies()
testLazyOfflineUserSessionFetching()
testParSecureRequestObjectExecutor()
testDeleteAccount(masterRealm);
testCertificatePolicyModeAnyTwoRequestedAndOnePresent()
testRealm.setEditUsernameAllowed(false);
testRealm.user("alice");
testFAPIAdvancedPublicClientLoginNotPossible()
testIdpInitiated(USER_NAME_LOWERCASE,
testPodTemplateIncorrectContainerName()
testMigrationTo13_0_0()
optionalClaimNotReachedSucceeds()
testCloneToExistingInstance()
relyingPartyEntityName()
testDenyAccessWithNotExistingProperty()
allowed()
testRealmResource().clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();
testLDAPConnection(@FormParam("action")
testNameIdMapperNotFound()
testDefaultTlsPortChangeWhenHttpPortSet()
testClientDisplayedOnConsentScreenWithEmptyConsentText()
testCertificatePolicyModeAllOneRequestedAndOnePresent()
testAccountLinkWithDynamicScope()
testRealmResource().users().search("tbrady",
testDefaultRoles(migrationRealm);
testInvalidFormattedJsonPolicies()
@BeforeStartDistribution(EnableDatasourceMetrics.class)
testImpersonationByMasterRealmServiceAccount()
testResetConfiguration(KeycloakSession
test07SyncRestAPIWrongAction()
testDynamicUserProfileReview_attributeNotRequiredAndSelectedByScopeCanBeSet()
testClientIpAddressCondition()
testSuccessfulAuthorizationRequest("keycloak-with-jwt-es512-authentication.json");
testAccountUpdateAttributeExpectFailure("deniedFOo");
testDeleteAccount(RealmResource
testMoreSessions()
parseRealmRoleQualifier()
logoutWithExpiredSession()
testArtifactResolveWithWrongIssuerFails()
testEmpty()
testRealm().users().search("test-user@localhost");
testCompositeRolesPaginationSearchQueries()
testSimpleIckleQueryFlashedFromDefault()
testDefaultConfig(KeycloakSession
testEmptyCollection()
testIgnoreQuarkusPropertyFromKeycloakConf(LaunchResult
testSetHostnamePath()
testMetricsEndpointDoesNotEnableHealth()
testSignatureVerificationHardcodedPublicKeyPS512()
testFindAvailableNamedParamSimple()
testSet_PrimarySourceFor()
testClientInvocationWithOBBClient(String
testUsernameOnlyIfEditAllowed()
findUsersByEmailVerifiedStatus()
testStartDevHelp(LaunchResult
validateConfiguration_attributeValidationsErrors()
testShouldReAugAndNeedsAutoBuildOptionBecauseHasNoAutoBuildOption(LaunchResult
testAddProviderMappersOverwrite()
@IgnoreBrowserDrivers({
testModalDialog(AbstractLoggedInPage
testInitInHead()
testSecureClientRegisteringUriEnforceExecutor()
testDifferentDriver()
testAesKW_Aes128CbcHmacSha256()
@BeforeStartDistribution(SetInfoLogLevel.class)
testIntrospectionRequestParamsMoreThanOnce()
testRealms.add(rep);
testAccountUpdateAttributeExpectSuccess("KERBEROS_PRINCIPALno");
testAuthorizationTokenSignatureAndEncryption(Algorithm.RS512,
testStartOptimizedHelp(LaunchResult
testActionTokens()
testRealmAccountPage.navigateTo();
testDefaultRoles(RealmResource
@EnableFeature(value
testGetAccessTokenWithDynamicScope()
testRemovePoliciesOnClientDelete(KeycloakSession
testPattern7()
testForEachParent()
searchWithExactMatch()
testMigrationTo19_0_0()
testRealms.add(rep2);
testServerDoesNotStartIfValidationFailDuringReAugStart(LaunchResult
@BeforeStartDistribution(CreateRealmConfigurationFileWithUnsupportedExtension.class)
testCodeToTokenRequestSuccessPS512()
testUpdateUnsetAttributeWithEmptyValue()
testEmailChangeSetsEmailVerified()
searchGroupsByNameContaining()
testUrlDecoding()
testingClient.testApp().oidcClientEndpoints().setSectorIdentifierRedirectUris(Collections.singletonList("http://localhost/resource-server-test"));
testCustomAttributeInAnyContext()
testSuccessfulAuthorizationRS256Request()
algorithmsValuesSetUpInAdminConsole()
testErrorConditionsWithDynamicScope()
testMultipleSecurityKeys()
errorWithCustomProvider()
testRealm().users().get(user.getId());
testRealms.add(
testLDAPConnection(TestLdapConnectionRepresentation
testTlsUsesCorrectSecret()
logoutWithClientIdIdTokenHintAndPostLogoutRedirectUri()
testSerialization()
logoutWithPostLogoutUriWithoutIdTokenHintAndSuppressedConfirmation()
testCertificatePolicyModeAnyTwoRequestedAndTwoPresent()
testDoNotRemoveAttributes()
decode_empty()
testingClient.server().fetch(session
testAdminClientRegisterUnacceptableAuthType()
testUsingRelativePath(KeycloakDistribution
testRegisterUserInvalidLastNameLength()
testGetMapValueFromSet()
testRealms.add(configureRealm(RealmBuilder.create().name("authz-client-jwt-test-hs512"),
buildRealmRoleQualifier()
migration13_0_1_Test()
testRealmResource().flows().addExecution(execution);
testExecutor.configure().init(defaultArguments());
testBuildUsingConfFile(LaunchResult
registerUserSuccess_lastNameRequiredForScope_clientDefault()
testRealm().clientScopes().findAll().subList(0,1);
testExportSucceeds(LaunchResult
testFAPICIBALoginWithPrivateKeyJWT()
testParRequestUriLifespan()
testGetUserSessionsWithRememberMe()
testEmailValidator()
testSkip(NUM_ENTITIES);
testSignatureVerificationHardcodedPublicKeyHS512()
testExpectedNameId(bburkeUser.getUsername());
testGetProfileAttributes()
testSubtasks.push('saucelabs-qunit');
testArtifactBindingLoginCorrectSignature()
testReceiveArtifactNonExistingClient()
testSecondStartDoNotTriggerReAug(LaunchResult
testHostnameStrictDisabled()
testRealmResource().clientPoliciesPoliciesResource().updatePolicies(new
testRealm().users().search(userWithoutRole).get(0).getId();
createNewMixedRealmCompositeRoleWithUnknownClientRoleShouldThrow()
createNewMixedRealmCompositeRoleWithUnknownRealmRoleShouldThrow()
testWrongUsername(LaunchResult
attributeNameIsValid()
testDuplicatedTokenRequestWithSameAuthReqId()
testMigrationTo12_x()
testFailureClientAuthnFailed()
testRealmResource().flows().registerRequiredAction(requiredAction);
testBackchannelAuthenticationFlowWithoutBindingMessage()
testMainServiceDurability()
testClientSessionCountExceededAndOldestSessionRemovedDirectGrantFlow()
testRealm().components().add(ldapMapper);
ignoreFirefoxAndNotChrome()
testRealmResource().users().get(testUser.getId()).toRepresentation().getEmail());
cancelRegistration()
testImportClientMultipleServices()
browserLogoutWithAccessToken()
testRealm.update(realmRep);
testStartUsingChmsStorage(LaunchResult
test04SameUUIDAndUsernameSync()
testAuthorizationEncryptionAlgRSA_OAEPEncA192GCM()
test05UpdatePasswordUnsyncedMode()
shouldConvertIntegersToLongs()
testRealm.users().get(userId).toRepresentation();
testWrongSigningAlgorithmForRequestObject()
searchUserDefaultSettings()
testFileOnlyLogsNothingToConsole(LaunchResult
testRealmExportImport();
testParseQuery("key1:\"val=\\\"12
testSecureResponseTypeExecutor()
testSetUpLink(testRealmResource(),
idpInitiatedMatchCaseLDAPTest()
testArtifactBindingWithEncryptedAssertion()
testRealm.users().userProfile().update(configuration))
policySettingsWithExternalProperties()
testTokenPropertiesMapping()
testStartDefaultsToClustering(LaunchResult
testNotFound()
testCodeToTokenRequestSuccessPS256usingJwks()
testRealms.add(realm.build());
searchByIdpAndEnabled()
testRejectRequestExecutor()
errorImplicitFlowNotAllowed()
testingClient.server()
testVolumeMountsAreMerged()
publicKeySignaturesWrong()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name(SCOPE_LAST_NAME).protocol("openid-connect").build());
testInvalidAudience()
testExecutor.init(initOptions);
testConsentWithAdditionalClientAttributes()
localizationTransportBluetooth()
testMigratedData(false);
test('nested
testMigrateMapToSet()
rfc6749_createHeader()
testRealmResource().roles().get(DEFAULT_ROLE_NAME).addComposites(rolesToRemove));
testValidator(@ArquillianResource
testRealm().clientScopes();
testReadonlyUpdates()
authenticatorAttachmentSettings()
shouldCompareInts()
testProviderInitiatedLogoutCorrectlyLogsOutConsumerClients();
addRealmLocalizationText()
confidentialClientTest()
countUsersByEmailVerifiedStatus()
testEntityOnFailNode.getConfig().getFirst("required")));
loginCertificateExpired()
createPublicClient()
valuesMismatch()
residentKey()
testPrivateKeyInPKCS8Format()
testRolesWithIdsPaginationSearchQueries(GetResult
testSkip(int
testBackchannelAuthenticationFlowWithInvalidScope()
testServerSideValidator()
testingClient.testing().exportImport().setRealmName("test");
parsesAttributeValueElementWithCustomTypes_ReturnsNull()
testPublicClientOptionalScope()
@AuthServerContainerExclude(AuthServer.REMOTE)
testFailureParIncludesInvalidRedirectUri()
testRealm().users().get(user.getId()).update(user);
testSPMetadataArtifactBindingNotUsedForLogout()
testProviderInitiatedLogoutCorrectlyLogsOutConsumerClients()
testPostLogoutRedirectUriPlus()
testAccountUpdateAttributeExpectSuccess("nodeniedbar");
tryToCreateBrokeredUserWithNonExistingClientRoleDoesNotBreakLogin()
deleteRealmLocalizationText()
testSecureCibaSessionEnforceExecutor()
testDoubleValidator_ConfigValidation()
testRealm().clientScopes().findAll().subList(0,2);
registerUserInvalidLastNameLength()
testClientUriValidation(true,
testValidateComplianceWithUserProfile()
testCertificatePolicyModeAnyNotRequestedAndOnePresent()
@Launch({StartDev.NAME,
testAttributeRequiredButNotSelectedByScopeDoesntForceVerificationScreen()
testFlashingToAnotherMCB()
validateValidatorConfigMultipleOptionsInvalidValues()
testAdditionalValidationForUsername()
testContainsOrExact(func.apply(userEntity),
testPublicClient()
testUpdateProfileEvent()
testDfs()
testQueryTypedResourcePermissionsForResourceInstances()
testAttackerClientUseAuthReqIdInCallbackEndpoint()
whenCreateDynamicClientSecretExpirationDateMustExist()
searchByEmailExactMatch()
testSecureResponseTypeExecutorAllowTokenResponseType()
testCompositeRolesSearch()
testPaginationFirstResultIsInSecondProvider()
updateEmail()
testStartDevFirstTime(LaunchResult
testWithExpectedUserAttribute()
testCustomAttributeRequired(KeycloakSession
testRealm().clientScopes().get(scopeId).getScopeMappings().realmLevel().add(dynamicScopeRoleList);
testClientInvocationWithOBBClient("CN=Foo,1.3.6.1.4.1.311.60.2.1.3=#13024252,2.5.4.15=#130f427573696e65737320456e74697479,2.5.4.5=#130432303039,OU=My
testHomographicUsername()
testDefaultRoles(masterRealm);
testCodeToTokenRequestSuccess(algorithm);
testConsentCancel()
whenUpdateDynamicClientDuringRemainingExpirationPeriodMustRotateSecret()
testArtifactBindingLoginSignedArtifactResponse()
testFips()
testAccountUpdateAttributeExpectFailure("deniedBArr");
testDenyAccessWithProperty()
testUser.getUsername()
testParseCookies()
testClientInvocationWithOBBClient("CN=Foo,JURISDICTIONCOUNTRYNAME=BR,BUSINESSCATEGORY=Business
testCIBASettings()
testWithoutExpectedUserAttribute()
updateBrokeredUserNewMatchGrantsRoleAfterFirstLoginInForceMode()
testUpdatingClientSourceRolesCondition()
testingClient.server("consumer").run(session
loginWithoutAcr()
testDeploymentRestarted(Set.of(kc1),
testContext(
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-1").build());
simpleValidationWithContext()
testSuccessfulMultipleParByMultipleClients()
testReturnAllConfiguredAttributesEvenIfNotSet()
testingClient.server(TEST_REALM_NAME)
testRolesWithIdsPaginationQueries()
testNoXa(LaunchResult
testFail();
testRealm().localization().saveRealmLocalizationText(locale,
testInvalidIssuer()
rememberMeWithUtf8Username()
testProfilesFormView()
testImportClientMultipleServicesWithDefault()
testExtensions()
authorizationRequestFormPostResponseModeWithoutResponseType()
testScopeInInitOptionsShouldBeConsideredByLoginUrl()
testComparisonTypeSetClassRefsSetNoDeclRefs()
usersActive()
testRealmResource().users().get(testUser.getId());
changeProfileEmailChangeSetsEmailVerified()
testAdminClientAutoConfiguredClientAuthType()
testNumberOfFailuresForPermanentlyDisabledUsersWithPasswordGrantType()
testAddUndefinedValuesToMapStringMap()
updateBrokeredUserMatchDoesntLeaveGroup()
testFrontChannelLogout()
testRealmSessionCountExceededAndNewSessionDeniedFirstBrokerLoginFlow()
testClientDisplayedOnConsentScreen()
localizationTransportInternal()
reauthenticationWithOptionalUnknownAcr()
testSessionsAreRemovedOnUserRemoval()
testSuccessfulAuthorizationRS512Request()
testFipsApprovedMode(LaunchResult
testPattern4()
testRealmResource().roles().get("realm-composite").addComposites(Collections.singletonList(realmChildRole));
testRealm().users().get(testUserId);
publicEs256()
testUserInfoSignatureAndEncryption(Algorithm.ES512,
testAttributeRequiredAndSelectedByScope()
testRolesAreAvailable_getMethod_header()
@Ignore("ignored
attestationConveyancePreference()
test(AuthenticationFlowRepresentation
testMetadataIsMerged()
testDefaultRoleWithinRoleList()
valuesMatchIfNoClaimsSpecified()
testSetRootLevel(LaunchResult
singleResponsibleAuthOptions()
testForceHttpsSchemeAndPortWhenStrictHttpsEnabled()
testingClient.testing().ldap(TEST_REALM_NAME).prepareHardcodedRolesLDAPTest();
validateUri()
testRequiredIfUser()
testBackchannelAuthenticationFlow(true,
requestUriParamWithAllowedRequestUris()
updateEmailInvalid()
testViewGroups(masterRealm);
testSPMetadataArtifactBindingUsedForLogout()
testSessionCountExceededAndNewSessionDeniedFirstBrokerLoginFlow()
testHttpEnabled(LaunchResult
test03UpdatePasswordWithLDAPDirectly()
attestationDefaultValue()
testAddProviderMappersFail()
postLogoutRedirect()
parseConfigurationFile_unknownField()
testRealm().users().get(regularUserId);
testAdminClientUpdateAcceptableAuthType()
testLogoutWhenAccountClientRenamed()
updateRealmLocalizationText()
testRealmLoginPage.form().totpForm().setTotp(generatedOtp);
authenticateWithInvalidClientPolicyEnable()
publicKeySignaturesRSA()
logoutExpiredConfirmationAuthSession()
testFAPIAdvancedLoginWithPrivateKeyJWT()
testSet_CacheFor()
testCertificatePolicyModeAnyOneRequestedAndTwoPresentDifferent()
testCertificatePolicyModeAllOneRequestedAndTwoPresent()
bluetoothTransport()
logoutWithLegacyRedirectUriAndIdTokenHint()
testingClient.testing("test").onEvent(secondEvent);
testRolesWithIdsPaginationSearchQueries(this::getResult);
testCommaSeparatedArgValues()
test('whitespace
registerClientAsAdminWithoutScope()
testClientInvocationWithOBBClient_rfc2553_resolvedAttributes()
rpValuesSetUpInAdminConsole()
testTwoLocksCurrently()
testUpdateEmail()
testRealmSessionCountExceededAndNewSessionDeniedBrowserFlow()
testRequiredByUserRole_ADMIN()
testAccountUpdateAttributeExpectFailure("usercertificate");
testCertificatePolicyModeAllNotRequestedAndTwoPresent()
testCibaGrantDeactivated()
authenticatorAttachmentPlatform()
testDefaultProviderCustomizations()
soapBindingAuthnWithSignatureMissingDestinationTest()
testRealmResource().roles().get(DEFAULT_ROLE_NAME).deleteComposites(rolesToRemove);
testInvalidFieldTypeJsonPolicies()
testRegisterUserSuccess_lastNameRequiredForScope_clientDefault()
testSecureRequestObjectExecutor()
testAccountUpdateAttributeExpectSuccess("deniedsomeithing");
testBackchannelAuthenticationFlowOfflineAccess()
testFAPIBaselineClientAuthenticator()
testPrivateKeyEncodeDecode(PemUtils.removeBeginEnd(privateKey2).replace("\n",
testReadClientPolicy()
loginLDAPTest()
testXMLBombAttackResistance()
passwordlessWebAuthnTest()
testAuthenticationChannelErrorCase(Status.OK,
updatingGroupWithEmptyNameShouldFail()
testRemoveScopes()
equalsCollectionTest()
testCodeToTokenRequestFailure(Algorithm.RS256,
testGroupAttributeTwoGroupHierarchyMultiValueAggregate()
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.ES384,
testUrlEncoding()
testIntegerValidator()
testRealm.toRepresentation().getId();
authorizationRequestJWTResponseMode()
testingClient.testApp().oidcClientEndpoints().getPushedCibaClientNotification("client-notification-some");
testing().onAdminEvent(create(date1,
runTestWithTimeout(4000,
shouldEscapeClientNameForPlaceholder()
testTokenResponseUsingLowerCaseType()
testRealm().toRepresentation();
testDeleteFederatedUserFederatedIdentityOnProviderRemoval()
testRealm().update(rep);
testExecutor.validateOutputField(this::assertInitNotAuth)
testRealm().users().userProfile().getConfiguration());
testGlobalProfiles()
testBruteforceProtectionRecoveryAuthnCodes()
testShouldReAugWithoutAutoBuildOptionAfterDatabaseChange(LaunchResult
testApp.toRepresentation();
testNewInstanceWithId()
testAddDirtyRemoveFederationUser()
testAuthorizationEncryptionAlgRSA_OAEP256EncA256CBC_HS512()
testRolesWithIdsSearchQueries(this::getResult);
testDirectGrantLoginWithOTPFormShouldFail()
testDisableStepupFeatureInNewRealm()
@BeforeStartDistribution(ChangeAdditionalDatasourceUsername.class)
testRealmAttributesMigration();
testingClient.server().fetch((KeycloakSession
logoutWithPostLogoutUriWithoutIdTokenHint()
residentKeyNotRequiredPresent()
testIntentionalExceptionOnCondition()
testLimitOnClosingStream()
testRealm.setOtpPolicyCodeReusable(true);
testEnablePreviewFeatures(LaunchResult
testPrimarySourceForWithExcluded()
testFailureParUsedByOtherClient()
testCodeToTokenRequestSuccess(String
testBuiltinOptionalScopes()
confirmEmailUpdateAfterThirdPartyEmailUpdate()
checkLogoutSessions()
createUserWithGroups()
testFailureParIncludesInvalidResponseType()
testSuccess_XmlWithNamespace()
testMapping(attributeValue,
testBuildWithCliArgs(LaunchResult
logoutWithClientIdAndWithoutIdTokenHint()
testHolderOfKeyEnforceExecutor()
publicKeySignaturesCorrect()
testNestedGroupQuerySearch()
stepupAuthentication()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-2-sel").build());
createOrUpdateRealmLocalizationWhenLocaleAlreadyExists()
test('string
testRegisterUserSuccess_lastNameRequiredForScope_requested()
testConfigurationChunks()
testRealm().users().create(user);
registerUserSuccess_lastNameLengthValidation()
testGitHubIdentityProvider()
testClient(MASTER,
testWalkDfs()
successfulKLogoutAfterEmptyBackChannelUrl()
disabledFeatures()
@AuthServerContainerExclude(QUARKUS)
testRealmResource().clients().query(searchQuery).stream()
testSavedPostRequest()
testCreateAndUpdateUser(KeycloakSession
loaEssentialNonExisting()
scopedClientCredentialsAuthSuccess()
userInfoForServiceAccountWithRefreshTokenImpl()
testGet_PrimarySourceFor()
requestObjectSupersedesQueryParameter()
@SuppressWarnings("unchecked")
userVerification()
testRealmResource().roles().get(roleName).toRepresentation();
loginWithAcr1()
testKeycloakPrincipalSerialization()
testDoNotReturnAttributeIfNotReadble()
cancelIsNotDisplayed(){
test('-a
testRequiredIfUser(KeycloakSession
testMigrationTo13_0_0(boolean
testMigrationTo20_0_0();
testRregisterUserSuccess_lastNameOptional()
tokenRefreshWithAccessTokenShouldReturnIdTokenWithAccessTokenHash()
testInvalidFormattedJsonProfiles()
testEncodeAndDecodeGeneratedObjects()
testLifespans()
testRealmResource().update(newRealm);
testAuthenticateRecoveryAuthnCodes()
linkedinLoginWithProjection()
breakString()
logoutSessionsCheckboxNotPresent()
backChannelPreferenceOverKLogout()
testAuthorizationEncryptionAlgRSA1_5EncA128GCM()
testUser()
testDefaultIdpNotSet()
testLoginSuccessWithSpecialCharacter()
testPaginationFirstResultIsExactlyTheAmountOfUsersInTheFirstProvider()
testStartDevCommand(LaunchResult
postLogout_invalidRequestWithValidOrigin()
testSingleFileRealmExportImport()
testRotatedKeysPropagated(servletPage,
testAccountUpdateAttributeExpectSuccess(String
testBackchannelAuthenticationFlowWithSignedAuthenticationRequest(true,
testRealm.getClients().add(offlineApp2);
testRequest.getRequest();
testMetricsEndpoint()
testAccountUpdateAttributeExpectFailure("deniedfoo");
clientWithDefaultRoles()
test('slashBreak',
testBackchannelAuthenticationFlowWithSignedAuthenticationRequestUriParam()
featureSpecificationDeserialization(){
testNameIdMapperValueIsNull()
testCodeToTokenRequestSuccessForceAlgInClient(Algorithm.PS512);
testRealmLoginPage.form().totpForm().getTotpSecret();
publicClientTest()
testUserCredentialsPage.resetPassword("123456789012345678901234567890123");
testWorkingRealmImport()
rfc6749_parseHeader()
testResolveHealthOption()
testUserInfoSignatureAndEncryption(Algorithm.ES384,
validateDoubleNumber()
registerUserSuccess_lastNameRequiredForScope_requested()
setupTotpAfterUpdatePassword()
testPermissionOrder()
testAttributeConsumingServiceMappersInSpMetadataWithoutServiceName()
testRealm().components().query(ldapModelId,
testSetDefaultConfig()
testRealms.add(adminRealmRep);
testing().queryEvents(null,
testSkipExecutionUserHasNotRoleCondition()
testUserResource().roles().clientLevel(clientRepresentation.getId()).remove(Arrays.asList(deleteRole));
shouldEscapeUtf8CharactersForDefaultStrategy()
parseAttributeValueAnyType()
parseClientRoleQualifier()
testAttributeNotRequiredAndSelectedByScopeCanBeUpdated()
parseConfigurationFile_invalidJsonFormat()
testDoNotUpdateUndefinedAttributes(KeycloakSession
buildClientRoleQualifier()
testGetProfileAttributeGroups()
testNullPolicies()
clientCredentialsAuthSuccessWithoutRefreshToken_revokeToken()
requiredWrong()
testDoNotRemoveAttributes(KeycloakSession
loginInResponseToEmpty()
switchLocale()
avoidSameAuthenticatorRegistrationSettings()
testCertificatePolicyModeAnyTwoRequestedAndOnePresentDifferent()
testTwoLocksCurrentlyInternal(session,
testUpdateProfileEventWithAdditionalAttributesAuditing()
testProviderTransientIdpInitiatedLogin()
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest()
testArtifactBindingLoginCheckArtifactWithPost()
verifyWith1024PrivateKeyInPKCS8Format()
testRealmResource().flows().createFlow(flow);
testDeviceCodeLifespanPerClient()
testingClient.server().run(UserConsentWithUserStorageModelTest::setupEnv);
testBackchannelAuthenticationFlowWithClientIdAndSecretInBody()
testPublicClientNotAllowed()
testDynamicUserProfileReviewWhenMissing_requiredAndSelectedByScopeAttributeForcesUpdate()
testFAPICIBAWithoutSignedAuthenticationRequest()
@DisableFeature(value
testNoValidationsIfAdminReadOnly()
test.getTestingClient().testing().setTestingInfinispanTimeService();
testUpdateResourceType()
canCreateDefaultCredentialModel()
testToStringStackOverflow()
testMigrateSetToMap()
testGetBooleanAttributeValue(BiFunction<StartElement,
testRealmPublicKeyEncryptedRequestObjectUsingRSA_OAEP_256WithA256GCM()
testCertificatePolicyModeAnyOneRequestedAndTwoPresent()
testRemoveChildViaPredicate()
multipleOptionalAcrValues()
testFirstClassCitizenEnvVars(String
testFAPIAdvancedSignatureAlgorithms()
testDirect_Aes256CbcHmacSha512()
testFailureParInvalidPkceSetting()
testInvalidDeviceCode()
validateNotBlank()
reauthenticationWithNoAcr()
testSetLastRootLevelIfMultipleSet(LaunchResult
testNullProfiles()
testArtifactBindingLoginForceArtifactBinding()
testAdminClientUpdateUnacceptableAuthType()
testMultipleUsersBackchannelAuthenticationFlows()
testEventsOnUpdateProfileNoEmailChange()
testCustomUserProfileProviderIsActive()
testEvents()
testWebAuthnIDLessLogin()
testGetVersionedApiInvalidOrigin()
claimValuesMismatch()
testArtifactBindingIsNotUsedForLogoutWhenLogoutUrlNotSetRedirect()
testRealm();
testingClient.testing().cache(InfinispanConnectionProvider.AUTHENTICATION_SESSIONS_CACHE_NAME).size();
testCIBAPolicy()
nestedValidation()
testResolveProfile()
categoriesTest()
testCreateDeletePolicyRuntime()
test('stops
testWrappedBuildPropertyTriggersBuildButGetsIgnoredWhenSetByQuarkus(LaunchResult
@IgnoreBrowserDriver(value
testUserResource().credentials()
timeoutSettings()
testSet_CacheForExcluded()
testConcurrency()
canBeAuthFlowContext()
testRealm.setFailureFactor(failureFactor);
requiredWrongNoVerification()
testClientDefaultAcrValues()
testPodTemplateIncorrectNamespace()
tests](docs/tests.md)
testPoliciesJsonView()
testFAPICIBASignatureAlgorithms()
testRealmResource().identityProviders().get(id);
testPersistenceMultipleNodesClientSessionsAtRandomNode()
testNotEmptyValidator()
testKeycloakLogFileCreated(RawDistRootPath
testOIDCEndpointGetWithoutToken()
testMaximumLengthPolicy()
testEndpointAsAudience(oauth.getBackchannelAuthenticationUrl());
testStartUsingMixedStorage(LaunchResult
testEndpointAsAudience(oauth.getParEndpointUrl());
testStartOptimizedHelpAll(LaunchResult
testAuthorizationTokenSignatureAndEncryption(Algorithm.PS384,
testAccountUpdateAttributeExpectFailure("deniedbarrier");
testUpdateUri()
requireResidentKeySettings()
testEnvVarPriorityOverSysProps()
orderResultsTest()
testAttributeNotRequiredWhenMissingScope()
testUnsuccessfulUserInfoRequestwithDuplicatedParams()
testNoPaginationCalls()
testRemoveCredential(webAuthn1);
testLoginAndClientScopesPermissions("johnNormal",
whenCreateClientSecretCreationTimeMustExist()
testRequiredByUserRole_ADMIN(KeycloakSession
logoutWithLegacyRedirectUriAndWithoutIdTokenHint()
testEnvVarPrecedenceOverConfFile(KeycloakDistribution
testRealm.update(rep);
testCLIPriorityOverSysVar()
testArtifactSuccessfulAfterFirstUnsuccessfulRequest()
testingClient.testing().removeUserSession("test",
testRealmResource().clientPoliciesProfilesResource().updateProfiles(new
testDefaultAcrValues()
testGitHubIdentityProviderOverrides()
testSetDbUrlOverridesDefaultDataSource()
testGetAccessTokenWithDynamicScopeWithPermittedRoleScope()
failCreateWithLongName()
realmLocalizationTextsSupportUnicode()
@BeforeStartDistribution(CreateRealmConfigurationFile.class)
testIgnoreQuarkusSystemPropertyAtBuild(LaunchResult
testScriptMapperNotAvailableThroughAdminRest()
testOIDCEndpointGetWithToken()
testReusingAccessAndRefreshTokens(int
multipleValidationsError()
testAppAuthzSA.getUsername());
testSamlImportAndExportDisabled()
testClient.setRedirectUris(Collections.singletonList(getFakeClientUrl("*")));
updateBrokeredUserMismatchDoesNotLeaveGroupInImportMode()
loginInResponseToMismatch()
testDfsBottommost()
testMigrationTo14_0_0()
testSecureSigningAlgorithmForSignedJwtEnforceExecutor()
transactions()
testRealmAttributesMigration()
invalidPriorityForEnc()
testEnvVarPriorityOverPropertiesFile()
testIdTokenSignatureAndEncryption(Algorithm.PS256,
testNoReAugAfterChangingRuntimeProperty(LaunchResult
testDynamicUserProfileReview_attributeNotRequiredAndSelectedByScopeCanBeIgnored()
logoutRedirectWithIdTokenHintPointToDifferentSession()
testExpired()
testBackchannelAuthenticationFlow(isOfflineAccess,
testStorageSeparation()
testDuplicatedProfiles()
testUpdatePermission()
testRealm().users().delete(userId))
testSysPropPriorityOverEnvVar()
testMigrationTo13_0_0();
testExport(LaunchResult
testRealms.add(realmRepresentation);
testRealmLoginPage.form().totpForm().submit();
testClientWithErrors()
testSuccess_Value()
testAdminClientAugmentedAuthType()
testingClient.testing().exportImport().setRealmName(CHILD_IDP);
testFAPIAdvancedLoginWithMTLS()
testBuildPropertyAvailable(LaunchResult
testDatabaseProperties()
testSubtasks.push('validate-html');
testAccountUpdateAttributeExpectSuccess("deniedSomeAdmin");
testBackchannelAuthenticationFlowWithSignedAuthenticationRequest(false,
test(Map.Entry<String,
testContext.reconnectAdminClient();
test('boolean
testFirstClassCitizenEnvVars("/test-serialization-keycloak-cr.yml",
testCustomValidationInCustomAttribute()
testInvalidUrlClientValidation()
testRealmAccountPage.logOut();
excludeCredentials()
testGetBooleanAttributeValue(StartElementHasQNameBooleanBiFunction
testRolesWithIdsPaginationQueries(GetResult
authenticateWithValidClientNoPolicy()
testAuthorizationEncryptionAlgRSA_OAEPEncA256CBC_HS512()
logoutWithPostRequest()
testCertificatePolicyModeAnyNotRequestedAndTwoPresent()
testBackchannelClientValidations()
createIdentityProviderCustomMapper()
testing().queryEvents(realmId2,
testFAPIAdvancedClientRegistration()
multipleTransports()
testRealm().clients().findByClientId("custom-audience").get(0);
logoutWithoutIdTokenHintWithoutPostLogoutRedirectUri()
testCustomAttribute(KeycloakSession
testAuthorizationEncryptionAlgRSA_OAEPEncA128CBC_HS256()
testReusingAccessAndRefreshTokens(0);
testFullScopeDisabledExecutor()
testWrongPassword(LaunchResult
searchByAttribute()
testCodeToTokenRequestSuccess(Algorithm.PS256,
testBuildHelp(LaunchResult
responderURITest()
preferredVerificationWrong()
logoutRedirect()
testUsernameAndEmailPermissionNotSetIfEmpty()
testExpiredSessions()
preferredNoVerification()
testRealm().users().get(userId).remove();
testTwoLocksCurrentlyInternal(KeycloakSession
testRealm.setRequiredActions(actions);
validateIntegerNumber_ConfigValidation()
test(Object
test(String
testBackchannelAuthenticationFlowWithSignedAuthenticationRequest(boolean
verifyWith1024PrivateKeyInTraditionalRSAFormat()
testBackchannelAuthenticationFlow(false,
testGetProfileAttributes(KeycloakSession
testCLIPriorityOverSysProp()
wrongSignatureAlgorithm()
testGenerateThumbprintSha1()
testPattern1()
soapBindingLogoutWithSignature()
testOIDCEndpointGetWithSamlClient()
testPrimarySourceForWithExcludedTwoAttributes()
testAutoClosingOfClosingStream()
testDoNotUpdateUndefinedAttributes()
testDecodeObjectsInPEMFormat()
testCreateUserSessionsParallel()
testDefaultProfile()
