uwm.getSignature("marcaría",
testTwoResultRequest()
testRandomAdd()
t2.getSize());
e.getMessage());
Assert.assertEquals(42.0f,
testNumberedSister()
testUmlauts()
testMove()
testShort()
Assert.assertEquals(a,
testEnglishOnWSJTest()
testAnnotatorSequence(Arrays.asList("tokenize","pos","lemma","ner","depparse","coref","quote"));
testCCLemma()
testMovePrune()
testAnnotatorSequence(Arrays.asList("tokenize","pos","lemma","truecase"));
Assert.assertEquals("word/NN",
testScoreKBest()
testTwoTrees()
testSerialization()
Assert.assertTrue(set.equals(set));
testScoreDataset()
testUmlautSpaces()
testTwoSemgrex()
Assert.assertTrue(foo.keySet().contains(CoreAnnotations.TextAnnotation.class));
testCoNLL(String
Assert.assertFalse(set.isEmpty());
boff.size());
testRootDescription()
testTwoGraphs()
Assert.fail("couldn't
testTrueCasePipeline()
testAnnotatorCombinations()
testSize()
testOnTreebank(new
Assert.assertEquals("foo",
testTwoTsurgeons()
Assert.assertFalse(tt.isClosed("java"));
dataset.getWeights()[0],
Assert.assertEquals(copy,
testReadWrite()
Assert.assertFalse(set.contains(2));
testAnnotators(combination);
testOne("我在
testExample(antik,
testOnTreebank(List<Pair<ParserQuery,
testTreebank.summarize(pwErr,
testBackref()
testNegatedDisjunction()
testAnnotatorSequence(Arrays.asList("tokenize",
testAddScaled()
testAnnotatorSequence(Arrays.asList("tokenize","pos","lemma","depparse","natlog","openie"));
testTokens.size());
testNaN()
testCondense()
testEnglishOnWSJDev()
testCodepointDocument()
foo.toShortString("Text",
Assert.assertTrue(a
testMultiRequest()
testDoubleMultiRequest()
testCoNLLReturnScores(testFile,
Assert.assertTrue(set.contains(5));
testAncestorOfIthLeaf()
testOne("我在 加州 工作 ",
testTreebank.dataset(pwErr,
testSimpleRequest()
testRemoveVertex()
Assert.assertEquals(3,
testMaxABS()
testScore()
testBeforeAfterOffsets()
testOnTreebank(EvaluationDataset
Assert.assertEquals("UNK-cond-c",
testFinalGonna()
ArrayList<>();
Assert.assertEquals(0,
testHome()
foo.size());
testSingleMultiRequest()
testApostrophes()
Assert.assertEquals(s
testOptions().recordTransitionTypes
testGetXmlWords()
testUnclosedMultiRequest()
testMultipleAttributes()
testSingleTree()
Assert.assertEquals(tt.getSize(),
testGoldTrees()
WeightedRVFDataset<>();
foo.get(CoreAnnotations.TextAnnotation.class));
testUnifyTokenizer()
testAncestorOfLeaf()
testSceneGraph()
testTwoRequests()
testMemoryTreebank();
testInt()
testBuildRequest()
Assert.assertEquals(s,
testExample(umlautExample,
testCreateFolds()
testLong()
testGetResults()
testCoNLLReturnScores(String
testTsurgeon()
