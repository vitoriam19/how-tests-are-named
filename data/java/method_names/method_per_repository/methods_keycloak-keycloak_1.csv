testSetDbUrlOverridesDefaultDataSource()
testGitHubIdentityProviderOverrides()
testRealm.getRoles().getRealm().add(dynamicScopeRole);
testResolveMetricsOption()
testNullBearerToken()
testPrimarySourceForWithExcludedTwoAttributes()
testClient.toRepresentation();
testCreateDynamicScopeWithFeatureDisabledAndNonEmptyDynamicScopeRegexp()
testClientUpdateSourceGroupsCondition()
testAdminClientRegisterDefaultAuthType()
testArtifactResponseContainsCorrectInResponseTo(){
testUserManagedEntityNotAddedToDefaultPU(LaunchResult
testGet_NoPrimarySource()
testAttributeRequiredButNotSelectedByScopeDoesntForceVerificationScreen()
testSuccessEncryptedResponseSigAlgPS256AlgRSA_OAEP256EncA256CBC_HS512()
testAttributeConsumingServiceMappersInSpMetadataWithServiceName()
testRegisterUserSuccess_lastNameRequiredForScope_requested()
testRealm().clientScopes();
testedUser.getId();
testSessionCountExceededAndNewSessionDeniedFirstBrokerLoginFlow()
testDoNotGrantPermissionWhenObtainAllEntitlements()
test('move
testUrls()
testTokenResponseUsingLowerCaseType()
testMultipleClientsBackchannelAuthenticationFlows()
testWrongEncryptionAlgorithm()
testRealmAttributesMigration();
testAccountUpdateAttributeExpectSuccess("noKerberos_Principal");
testFAPIBaselineConfidentialClientLogin()
test('proto
testCapabilityTypeFromAttributeName()
testGroupAttributeTwoGroupHierarchyNoMultivalueNoAggregateFromParent()
testRealmRep.setId(TEST);
testScriptMapperNotAvailableThroughAdminRest();
testParseQuery("key\"1\":val1",
testFAPIAdvancedClientRegistration()
testReadonlyEmailCannotBeUpdated(KeycloakSession
testRolesWithIdsPaginationQueries(GetResult
testPaginationStarting0()
testExplicitCacheConfigFile(LaunchResult
testingClient.testing().exportImport().setProvider(SingleFileExportProviderFactory.PROVIDER_ID);
testCanRepresentResourceBeanOfResourceOwnedByClient()
testHmacSignaturesUsingKeyGen()
testRemoteCache()
testWinLogLevelSettingsAppliedWhenJsonEnabled(LaunchResult
testRealm().components().component(ldapStorage.getId()).update(ldapStorage);
testRealm.user("alice");
testFailureParExpired()
testSecureRequestObjectExecutor()
testingClient.server().runModelTest(testMethod.getDeclaringClass().getName(),
testFeatureWorksWhenEnabled()
testClientDefaultAcrValuesValidation()
testingClient.testApp().oidcClientEndpoints().setSectorIdentifierRedirectUris(Collections.singletonList("http://localhost/resource-server-test"));
testParseQuery("\"key
testGroupAttributeTwoGroupHierarchyNoMultivalueNoAggregateFromChild()
testConditionalRoleAuthenticatorWithClientRoleIncludedInCompositeClientRole()
testQueryOrder()
testRealm.users().get(userRepBefore.getId()).update(userRepBefore);
testRealm.setOtpPolicyCodeReusable(true);
testFAPICIBAUserAuthenticationCancelled()
testRealmAccountPage.navigateTo();
testReadClaimsParameter()
testFindAvailableNamedParamSimple()
testGetAccessTokenMissingRoleScopedDynamicScope()
testFetchDiscoveryDocumentUsingFrontEndUrl()
testRealm.setUsers(Lists.asList("admin",
testCRFields()
testMigrationTo13_0_0();
testRotatedKeysPropagated(SAMLServlet
testRealm().clientScopes().create(clientScope);
testBackchannelAuthenticationFlowWithInvalidScope()
testAdminUrl()
testAuthzServicesRemoved()
testingClient.testing().exportImport().getExportImportTestDirectory()
testAccountLinkNoTokenStore()
testPersistenceWithLoad()
testContext.getOrCreateCleanup(TEST_REALM_NAME).addClientUuid(clientId);
testUpdatePolicyWithoutNameNotAllowed()
testUserInfoSignatureAndEncryption(Algorithm.ES512,
testAccountUpdateAttributeExpectFailure("usercertificate");
testServerSideValidator()
testWrongSigningAlgorithmForRequestObject()
testCodeToTokenRequestFailureES256Enforced()
testRealm().clients().get(clientRep.getId()).removeOptionalClientScope(id);
testClientWithoutGrantTypes()
testPooling()
testRealm.setFailureFactor(failureFactor);
testNoReAugWhenBuildTimePropertiesAreTheSame(LaunchResult
testIframeInit()
testRequiredByUserRole_ADMIN()
testAdditionalValidationForUsername()
testQueryExactMatch()
testBuildArtifactResponse()
testNoRefreshToken()
testRealmResource().flows().updateRequiredAction("delete_account",
testSingleFileRealmExportImport()
testComponentUpdating()
testHealthEndpoint()
testRealm().toRepresentation();
testExternalExchange_extractIdentityFromProfile()
testLocaleRealmI18nEnabledKeycloakLocaleCookie()
testAdminClientRegisterAcceptableAuthType()
testRealm.setClientScopes(new
testEmailChangeSetsEmailVerified()
testRemovePolicyWhenOwnerDeleted(KeycloakSession
testDeleteAccount(migrationRealm);
testRealmSessionCountExceededAndNewSessionDeniedBrowserFlow()
testDailyEviction()
testCanRepresentPolicyResultGrantOfResourceOwnedByUser()
testRSAOAEP256_A128CBCHS256()
testSuccessfulAuthorizationRequest("keycloak-with-jwt-hs512-authentication.json");
testDefaultRoleWithinRoleList()
testMigrationTo12_x()
testRealmLocalizationTexts()
testTwoNestedLocksCurrently()
testMigrationTo19_0_0();
testCRUDRealmRepresentation()
testClientSessionIdleTimeout()
testRolesWithIdsQueries()
testGroupAttributeTwoGroupHierarchyMultiValueAggregate()
testDefaultRoles()
testGetBooleanAttributeValue(String
testClientUriValidation(String
testUpdateConfig()
testIdpInitiated(USER_NAME_UPPERCASE,
testArtifactBindingIdentifierChangedWhenClientIdChanged()
testWithoutExpectedUserAttribute()
testNewInstanceWithId()
testSessionStateDuringArtifactBindingLogoutWithMoreFrontChannelClients()
testCanRepresentPermissionTicketWithNamesOfResourceOwnedByUser()
testBackchannelAuthenticationFlow(false);
testGenerateThumbprintSha1()
testFipsNonApprovedMode(LaunchResult
testRealms.add(configureRealm(RealmBuilder.create().name("authz-client-jwt-test-rs512"),
testBackEndUrlSameAsFrontEndUrl()
testingClient.testing().exportImport().runExport();
testImpersonationBySameRealmServiceAccount()
testTwoRefreshTokensWithDifferentScopes()
testAuthenticationChannelUnexpectedError()
testDefaultIdpSet()
testRealmResource().flows().getRequiredAction(UserModel.RequiredAction.UPDATE_EMAIL.name());
testApp.removeOptionalClientScope(scopeId);
testSuccessVerificationUriComplete()
testUpdatePolicyWithoutNameNotAllowd()
test(SearchableModelField<?
testModalDialog(AbstractLoggedInPage
testGetBooleanAttributeValue("<a
testRealms.add(
testSuccessEncryptedResponseSigAlgPS384AlgRSA_OAEPEncA256GCM()
testAuthorizationResponseSigningAlg()
testRealmLoginPage.form().totpForm().submit();
testCertificatePolicyModeAnyTwoRequestedAndOnePresent()
testInitialAdminUser()
testRequestUris()
testPattern5()
testDefaultRoles(masterRealm);
testShouldNotReAugStartDevIfConfigIsSame(LaunchResult
testExchangeNoRefreshToken()
testExecutor.logInAndInit(defaultArguments().implicitFlow(),
testNestedGroupQuerySearch()
testing().onEvent(create(date3,
testRegisterUserSuccess_lastNameOptional()
testCreateWebAuthnSameUserLabel()
testSkip(int
testIdTokenEncryptionAlgRSA_OAEP256EncA256CBC_HS512()
testUserCredentialsPage.resetPassword("12345678901234567890123456789012");
testAuthorizationTokenSignatureAndEncryption(Algorithm.RS384,
testLengthValidator()
testFailRuntimeOptions(LaunchResult
testSamlAttributes(migrationRealm);
testUserResource().removeCredential(credentialId);
testingClient.server().fetchString(session
testPoliciesJsonView()
testing().onAdminEvent(create(System.currentTimeMillis()
testExecutor.attachCheck3pCookiesIframeMutationObserver()
testAnnotationElement(TypeElement
testExpectedNameId(bburkeUser.getEmail());
testRealm.getClientScopes().add(ClientScopeBuilder.create().name(VerifyProfileTest.SCOPE_DEPARTMENT).protocol("openid-connect").build());
testEndpointPermissions()
testInvalidFieldTypeJsonProfiles()
testCertificatePolicyValidation(null,
testLockConcurrentlyGeneral()
testCreateDynamicScopeWithFeatureDisabledAndIsDynamicScopeTrue()
testStartHelpCommand(LaunchResult
testIngressHostname()
testLockConcurrentlyOffline()
testDuplicatedRequestParams()
testLogLevelSettingsAppliedWhenJsonEnabled(LaunchResult
testNoValidationsIfUserReadOnly()
testLogoutWhenAccountClientRenamed()
testComparisonTypeSetNoClassRefsAndNoDeclRefs()
testConsentRequiredExecutorExecutor()
testCustomImage()
testExtendedClientPolicyIntefacesForServiceAccountTokenRequeponse()
testNullQueryParameterAccessToken()
testRealm.toRepresentation().getAccountTheme());
testLimitOnClosingStream()
testPostLogoutRedirectUrisSet(RealmResource
testRequest.getRequest();
testExchangeFromPublicClient()
testRealmAccountManagementPage.navigateTo();
testingClient.testing().cache(InfinispanConnectionProvider.AUTHENTICATION_SESSIONS_CACHE_NAME).size();
testUnsuccessfulUserInfoRequestWithDisabledUser()
testMigrationTo12_x(false);
testGrantTypesSupportedWithTokenExchange()
test05MissingLDAPUsernameSync()
testRealm().users()
testWithoutExpectedClientScope()
testErrorConditionsWithDynamicScope()
testRealmLoginPage.form().totpForm().setTotp(generatedOtp);
testCertificatePolicyModeAnyNotRequestedAndTwoPresent()
testing().onEvent(create(oldest,
testParseCookies()
testStartUsingOptimizedDoesNotAllowBuildOptions(LaunchResult
testHelpDoesNotStartReAugJvm(KeycloakDistribution
testRealm().clients().get(rep.getId()).update(rep);
testRolesInUserInfoResponse(UserInfo
testSingleSecretMultipleKeycloaks()
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.PS256,
testCamelCase()
testUserResource().removeCredential(passwordId);
testAccountConsoleClientHasDeleteUserRole(RealmResource
testAttributeConsumingServiceNameInSpMetadataWithDifferentFormatName()
testConfigInCRTakesPrecedence()
testCertificatePolicyModeAllOneRequestedAndTwoPresent()
testXForwardedHeadersWithReencrypt()
testExchangeToSAML2SignedAndEncryptedAssertion()
testBackchannelAuthenticationFlowRegisterDifferentSigAlgInAdvanceWithSignedAuthenticationRequestUriParam()
testDatabaseKindProperties()
testPodTemplateIncorrectNamespace()
testShowConfigCommandShowsRuntimeConfig(LaunchResult
testCallbackAfterAuthenticationRequestExpired()
testSysPropPriorityOverEnvVar()
testing().clearEventStore(realmId2);
testRolesWithIdsSearchQueries(this::getResult);
testSuccessfulImpersonation(String
testBadRealmId(KeycloakSession
testMoveBack()
testMaxAgeConditionWithSSO()
testExpiredClientSessions()
testEnforceReAuthenticationWhenMaxAgeIsSet()
testPaginationFirstResultIsInSecondProvider()
testEnvironmentVariables()
testCIBAPolicy()
testInvalidUser(context,
testNestedDatabaseProperties()
testRealm.users().get(userId).update(ur);
testSecretsAreWatched()
testMaxAgeConditionWithAcr()
testAttributeRequiredForScope()
testCodeToTokenRequestSuccessES256Enforced()
testDeploymentRestarted(Set<Keycloak>
testViewGroups(RealmResource
testRealm().flows().getRequiredAction(DeleteAccount.PROVIDER_ID);
testSuccessfulImpersonation("realm-admin",
testFailureNotIssuedParUsed()
testLivenessUp()
test('nums',
testExtendedClientPolicyInterfacesForBackchannelTokenRequest()
testCreateWithEnvVars()
test('-',
testAccountUpdateAttributeExpectSuccess("nodeniedbar");
testCodeToTokenRequestSuccess(Algorithm.RS256);
testMigrationTo12_x();
testSkipOtherExecutionsIfUserHasRoleCondition()
testNotFound()
testArtifactBindingLoginCorrectSignature()
testRealm.getAttributes().put(REALM_USER_PROFILE_ENABLED,
testSecureCibaSessionEnforceExecutor()
testCanRepresentResourceBeanOfResourceOwnedByUser(KeycloakSession
testClientSessionCountExceededAndNewSessionDeniedDirectGrantFlow()
testUsernameAndEmailPermissionNotSetIfEmpty()
testRealm().roles().create(RoleBuilder.create().name("realm-role").build());
testExtendedClientPolicyIntefacesForTokenRefreshResponse()
testRealmResource().clients().get(id).authorization().getSettings();
testDateValidator(KeycloakSession
testSecureCibaSessionEnforceExecutor(true);
testCloning()
testCodeToTokenRequestSuccessPS256usingJwksUri()
testAdditionalValidationForUsername(KeycloakSession
testRealmLoginPage.form().totpForm().getTotpSecret();
testUserResource().roles().clientLevel(clientRepresentation.getId()).remove(Arrays.asList(deleteRole));
testAccessThrottling()
testUnknownQuarkusBuildTimePropertyApplied(LaunchResult
testCluster()
testFAPIBaselineClientAuthenticator()
testGlobalProfiles()
testRealmResource()
testStartDevHelpAll(LaunchResult
testSysProps.add(name);
testMigrationTo20_x()
testCreateUpdateDeleteConditionRuntime()
testRequiredByClientScope(KeycloakSession
testRevokeRequestParamsMoreThanOnce()
testJsonHttpClientAttributes()
testRemovePoliciesOnClientDelete(KeycloakSession
testProfilesFormView()
testScope.setId(scopeId);
testRealmResource().clientPoliciesPoliciesResource().updatePolicies(policies);
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.ES384,
testNoActionIfSuccessfulValidationForCustomAttribute()
testLdapCapabilities()
testNotBlankValidator()
testCompositeRolesSearch()
testFallbackToDefaultConfigProperty()
testCodeToTokenRequestSuccessPS256usingJwks()
testDynamicClientRegisterAndUpdate()
testRequiredAttribute()
test04SameUUIDAndUsernameSync()
testGetUserProfileMetadata_NoAccessToNameFields()
testStatic()
testReadonlyEmailCannotBeUpdated()
testExecutor.init(defaultArguments(),
testIngressOnHTTPS()
testBackchannelAuthenticationFlow(true);
testRequestTokenAfterAuthReqIdExpired()
testVolumesAreMerged()
testingClient.testing().exportImport().setAction(ExportImportConfig.ACTION_EXPORT);
testOptionsValidator_Config_Validation()
testRealm().clientScopes().findAll().stream()
testCreateAndUpdateUser(KeycloakSession
testUpdatePermission()
testArtifactBindingLoginGetArtifactResponseTwice()
testDenyAccessWithNegateRoleCondition()
testCloneToExistingInstance()
testingClient.server().run(UmaRepresentationTest::testCanRepresentResourceBeanOfResourceOwnedByUser);
testRealmResource().clientPoliciesProfilesResource().updateProfiles(new
testFlow.setAlias("New
testCompositeRoleCreationWithHigherVolumeOfRoles()
testRealm().users().search(USERNAME,
testRealmResource().groups();
testAccountUpdateAttributeExpectFailure("deniedFOo");
testRealm().components()
testBasicKeycloakDeploymentAndDeletion()
testCorrectOrder()
testAccountUpdateAttributeExpectFailure("saml.persistent.name.id.for._foo_");
testUsernameAndEmailPermissionNotSetIfEmpty(KeycloakSession
testStartDefaultsToClustering(LaunchResult
testEnablePrecedenceOverDisable(LaunchResult
testInvalidConsumptionDeviceRegistration()
testAttributeGrouping()
testSecureSigningAlgorithmForSignedJwtEnforceExecutorWithNotSecureAlg()
testLoginSuccessWithSpecialCharacter()
testRealmResource().clients().findByClientId(ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();
testCancelRegistration()
testOverwrite(NUM_ENTITIES);
testMaxAgeConditionWithForcedReauthentication()
testMatcher.group(TEST_NAME_GROUP);
testGetAccessTokenWithDynamicScope()
testExtendedClientPolicyIntefacesForDeviceTokenResponse()
testAddRemoveUsersInTheSameGroupConcurrent()
testCertificateEncodeDecode(String
testCustomEntityNotSet()
testUnsuccessfulUserInfoRequestwithDuplicatedParams()
testWebAuthnTwoFactorAndWebAuthnPasswordlessTogether()
testRealmResource().clients().get(clientUuid).addOptionalClientScope(scopeDefId);
testImportIgnoreExistingMissingClientId()
testErrorResponseInvalidOrigin()
testExecutor.init(iframeInterval)
testMigratedData()
testCommenceWithRedirectAndQueryParameters()
testAccountUpdateAttributeExpectSuccess("saml.persistent.name.idafor.foo");
testRealms.add(realm);
testRealm.clientScopes().create(testScope);
test('nested
testCodeToTokenRequestSuccess(Algorithm.ES256);
testDeploymentRestarted(Set.of(kc2),
testInvalidRedirectUriWhenAdminNotSet()
testRealms.add(rep);
testingClient.server().run(UserStorageConsentTest::setupDisplayClientOnConsentScreen);
testRequiredIfUser(KeycloakSession
testMultipleSessionsRemovalInOneTransaction()
testHelpShort(LaunchResult
testNoValidationsIfAdminReadOnly()
testRealm().users().get(userRep.getId()).update(userRep);
testExecutor.login(loginOptions,
testSignatureVerificationHardcodedPublicKeyES256()
testRemoveCredential(AbstractLoggedInPage
testRealmResource().roles()
testLoginAndClientScopesPermissions(String
testSubtasks.push('connect');
testClientSessionCountExceededAndNewSessionDeniedResetPasswordFlow()
testMigrationTo12_0_0()
testCheckSso()
testRealm.getId(),
testAttributeConsumingServiceIndexInSpMetadata()
testWrongUsername(LaunchResult
testBackchannelAuthnReqWithDeactivatedUser()
testDisableStepupFeatureTest()
testRealm.users().userProfile().update(configuration);
testSaml20EncryptedId()
testSecretChangesArePropagated()
testGetBooleanAttributeValue("<a>text</a>",
testDefaultProfile()
testMigrationTo7_x(ProfileAssume.isFeatureEnabled(Profile.Feature.AUTHORIZATION));
testUserResource().update(user);
testAccountUpdateAttributeExpectSuccess("deniedSomeAdmin");
testRealm().flows().removeRequiredAction(UserModel.RequiredAction.CONFIGURE_RECOVERY_AUTHN_CODES.name());
testImportSucceeds(LaunchResult
testDenyAccessWithRoleCondition()
testConfigurationSetInvalid()
testSimpleCompareOr()
testTokenRequestAfterIntervalButNotYetAuthenticated()
testErrorMessageInDenyAccess(property,
testRealm.update(realmRep);
testNameIdMapperValueIsNull()
testCreateUserSessionsParallel()
testClientInvocationWithOBBClient_rfc2553_unresolvedAttributes()
testAttackerClientUseVictimAuthReqIdAttack()
testCertificatePolicyModeAllTwoRequestedAndOnePresent()
testWebAuthn(boolean
testCustomAttributeRequired()
testFrontChannelLogoutWithPostLogoutRedirectUri()
testSpiConfigurationUsingProperties()
testRealm().users().create(newUser1))
testRolesAreNotInUserInfoResponse(userInfo);
testContext.getOrCreateCleanup(REALM_NAME).addClientUuid(cId);
testManyUsersImport()
testAttributeValidation(KeycloakSession
test(RoutingContext
test.setAttributes(new
testErrorConditions();
testOverloadedTemplateUri()
testRealmResource().flows().registerRequiredAction(requiredAction);
testUseDefaultPortsWhenProxyIsSet()
testExecutor.init(checkSSO,
testing().onEvent(create(System.currentTimeMillis(),
testMetricsEndpointUsingRelativePath()
testParCorsRequestWithValidUrl()
testRolesWithIdsPaginationSearchQueries(this::getResult);
testUpdateProfileCannotChangeThroughAttributes()
testRealm().users().get(user.getId()).update(user);
testPattern1()
testMaximumLengthPolicy()
testReAugWhenNoOptionAfterBuild(LaunchResult
testRealmRep.setPublicKey(REALM_PUBLIC_KEY);
testClient(MASTER,
testRolesWithIdsSearchQueries(GetResult
testOverwrite(NUM_ENTITIES*2);
testImpersonationByMasterRealmServiceAccount()
testReadonlyUpdates(KeycloakSession
testWinEnableMultipleFeatures(LaunchResult
testMigrationTo13_0_0(boolean
testDeploymentRestarted(Set.of(kc),
testStartUsingCliArgs(LaunchResult
testOtherClientSendTokenRequest()
testRegisterUserSuccess_lastNameRequiredForScope_clientDefault()
testDefaultRolesNameWhenTaken();
testOptionalAttribute()
testSetCategoryLevel(LaunchResult
testDefaultConfigIfNoneSet()
testAttributeRequiredButNotSelectedByScopeIsNotRenderedOnVerificationScreenForcedByAnotherAttribute()
testDefaultConfig()
testExecutor.init(initOptions);
testUsernameReadOnlyInProfile()
testRejectRequestExecutor()
testing().onEvent(create(date1,
testBackchannelAuthenticationFlow(boolean
testCustomAttributeOptional(KeycloakSession
testUserCredentialsPage.navigateTo();
testSet_CacheForExcluded()
testRuntimePropFromQuarkusPropsIsAppliedWithoutRebuild(LaunchResult
testMoveGroup()
testingClient.testing().exportImport().setRealmName("test");
testRealmRep.setEnabled(true);
testNoSessions()
testAuthorizationTokenSignatureAndEncryption(Algorithm.PS384,
testArtifactBindingLogoutSingleClientRedirect()
testCorrectStateParameterButIncorrectCode()
testRealmResource();
testMissingDir(LaunchResult
testRealm().clientScopes().create(ClientScopeBuilder.create().name("department").protocol("openid-connect").build());
testSuccessfulAuthorizationRS256Request()
testEndpointAsAudience(String
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("profile").protocol("openid-connect").build());
testRealm().users().get(userId).remove();
testGet_CacheFor()
testMoreSessions()
testDictClientFromEntity()
testAttributeNotVisible()
testSamlMetadataSpDescriptor()
testEnableMultipleFeatures(LaunchResult
testSilentCheckSsoWithFallbackDisabled()
test.getTestingClient().testing().setTestingInfinispanTimeService();
testRegisterUserSuccess_lastNameRequiredForScope_notRequested()
testText.append(testRunning.substring(testRunning.lastIndexOf('.')
testTreePropertyProjection()
testOfflineSessionLazyLoadingPropagationBetweenNodes()
testMetadataIsMerged()
testRealmResource().clientPoliciesProfilesResource().getProfiles(includeGlobalProfiles);
testEncryptedIdIsReadable()
testRemovePoliciesOnGroupDelete(KeycloakSession
test03LDAPSyncWhenUsernameChanged()
testOIDCEndpointGetWithoutToken()
testArtifactBindingWithBackchannelLogout()
testSubtasks.push('saucelabs-qunit');
testUserCredentialsPage.resetPassword("123456789012345678901234567890123");
testUpdateUnsetAttributeWithEmptyValue()
testMapping("<Open>Foo</Close>",
testRealmAccountPage.logOut();
testRealmResource().roles().get("realm-composite").addComposites(Collections.singletonList(realmChildRole));
testCORSHeadersInFailedRptRequest()
testing().onAdminEvent(create(date2,
testUpdateProfileEventWithAdditionalAttributesAuditing()
testPathWithPatternSlashAllAndResourceInstance()
testPassLoginHintShouldSendSubjectAndPrefillUsername()
testExpectedNameId(String
testNameIdMapperNotFound()
testBuildMustNotRunTwoJVMs(LaunchResult
testCompositeRoles()
testTlsUsesCorrectSecret()
testUserInfoSignatureAndEncryption(Algorithm.PS384,
testFullScopeDisabledExecutor()
testRolesWithIdsSearchQueries(this::getModelResult);
testProbesAreMerged()
testDeleteFederatedUserFederatedIdentityOnProviderRemoval()
testSamlExportSignatureOff()
testHostnameAdminSet()
testLocaleRealmI18nEnabledUserWithoutLocale()
testExecutor.sendXMLHttpRequest(
testOverwrite(int
testRealm.users().search(username);
testStructureAThreeNodeSwapped()
testTwoLocksCurrently()
testDirectEncryptAndDecrypt(aesKey,
testCertificatePolicyModeAnyTwoRequestedAndNotPresent()
testRealmResource());
testRealm().flows().updateExecutions(FLOW_AUTO_LINK,
testSecureRandom()
test(PropertyMapper
testMigrationTo20_0_0()
testHelp(LaunchResult
testCacheExpiration()
testDenyAccessWithParticularMessage()
testSamlExportSignatureOn()
testRemovePoliciesOnGroupDelete()
test07SyncRestAPIWrongAction()
testRolesWithIdsPaginationSearchQueries()
testClear()
testGetFields()
testAuthorizationTokenSignatureAndEncryption(Algorithm.RS512,
testFirstClassCitizenEnvVars("KC_FEATURES_DISABLED",
testAuthorizationTokenSignatureAndEncryption(Algorithm.PS256,
testImportClientMultipleServices()
testAdminClientUpdateUnacceptableAuthType()
testRealmResource().identityProviders().get(id);
testDefaultIdpNotSet()
testValidateAndCreateLdapProviderCustomSearchFilter()
testIntentClientBindCheck()
test02RoleMapperClientRoles()
testIdTokenSignatureAndEncryption(Algorithm.RS512,
testPatternValidator()
test('stops
testRealmResource().clientPoliciesProfilesResource().getProfiles(true);
testing().onAdminEvent(create(date4,
testMaximumLength()
testApp).collect(Collectors.toList())
testContext(
testRealm().localization();
testRetrieveConsentsForUserWithClientsWithGrantedOfflineAccess()
testScopeInLoginOptionsShouldBeConsideredByLoginUrl()
testCustomEntityIdSet()
testFirstClassCitizenEnvVars("/test-serialization-keycloak-cr.yml",
testPublicClientNotAllowed()
testRequiredByScope_clientDefaultScope(KeycloakSession
test()
testFAPICIBALoginWithPrivateKeyJWT()
testClass.getAnnotation(UseServletFilter.class).idMapper());
testCertificateEncodeDecode(cert2);
testSkip(NUM_ENTITIES*2);
testDfsBottommost()
testClientUriValidation(boolean
testCascadeRemovalOfClientSessionOnUserSessionRemoval()
testScopeInInitOptionsShouldBeConsideredByLoginUrl()
testAccountPage.signOut();
testLocaleRealmI18nDisabledUserWithLocale()
testClientInvocationWithOBBClient("CN=Foo,
testPublicClientOptionalScope()
testReadOnlyUserThrowsIfChanged()
testFAPIAdvancedLoginWithMTLS()
testRunFinished(Result
testPattern9()
testPriorityOfURIForResource()
testingClient.testing("test").onAdminEvent(secondEvent,
testSetLogFormat(LaunchResult
testRealm().clients().get(testClient.getId()).roles().create(RoleBuilder.create().name(childClientRoleName).build());
testing().onEvent(create(date2,
testGetProfileAttributeGroups(KeycloakSession
testReAugWhenAnotherDatasourceAdded(LaunchResult
test('boolean
testBuildRunTimeMismatchOnQuarkusBuildPropWarning(LaunchResult
testSuccessfulUserInfoResponse(response,
testRealmLoginPage.form().login(utf8TestUser);
testCodeToTokenRequestSuccessPS512()
testUserResource().roles().realmLevel().remove(testUserResource().roles().realmLevel().listAll());
testSignatureDataWhenWantsRequestsSigned()
test('short
testLogInAsUserInIDP();
testUpdateProfileCannotUpdateReadOnlyAttributes()
testPassEmptyLoginHintShouldNotSendSubjectAndShouldNotPrefillUsername()
testFirstClassCitizenEnvVars("KC_TRANSACTION_XA_ENABLED",
testAccountUpdateAttributeExpectFailure("deniedbarrier");
testPublicKeyEncodeDecode(publicKey1);
testConfigurationGetSet()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-1-sel").build());
testRealm().flows().registerRequiredAction(simpleRepresentation);
testCertificatePolicyValidationAttributeReturnsNull()
testingClient.testing("test").onEvent(firstEvent);
testPrivateKeyEncodeDecode(privateKey1);
testFirstClassCitizenEnvVars(String
testReadClientPolicy()
test(AccessToken
testWithExpectedUserAttribute()
testValidationUsingExistingAttributes()
testAuthzResponseAndRetrieveIDTokens(OAuthClient.AuthorizationEndpointResponse
testUpdateProfileEvent()
testRealmResource().clients().create(ClientBuilder.create().clientId("test-client-2").build()).close();
testGet_CacheForExcluded()
testShowConfigPicksUpRightConfigDependingOnCurrentMode(KeycloakDistribution
testRemoveExpiredAuthSessions()
testRemoveCredential(credentials.get(1));
testStartHelpAll(LaunchResult
testNullsafetyIterationOverProperties()
testAttributeConsumingServiceNameInSpMetadata()
testDenyAccessWithDefaultMessage()
testSubsystem1_1()
test('mixed
testNumberOfFailuresForPermanentlyDisabledUsersWithPasswordGrantType()
testLeftInnerJoinStream()
testHealthEndpointNotEnabled()
testRealm().users().get(ur.getId()).update(ur);
testShortOfflineSessionMax()
testCodeToTokenRequestSuccessES256usingJwksUri()
testCodeToTokenRequestSuccess(Algorithm.RS256,
testStorageMixedStorageOptions()
testShowConfigCommandHidesCredentialsInProfiles(LaunchResult
testAddRemoveUserConcurrent()
testRemoveScopes()
testCustomValidationLastName()
testArtifactBindingWithEncryptedAssertion()
testRealm.toRepresentation().getId();
testUpdateOTP()
testFailureParUsedTwice()
testing().onAdminEvent(create(realmId,
testClientSessionIsNotPersistedForTransientUserSession()
testRealmLoginPage.form().login(testUser);
testLogoutDestinationOptionalIfUnsignedPost()
testFAPIAdvancedPublicClientLoginNotPossible()
test('flag
testRealmResource().update(representation);
testBackchannelAuthenticationFlowWithSignedAuthenticationRequest(boolean
test('string
testSingleUseStore()
testRealmResource().update(newRealm);
testShouldReAugWithoutAutoBuildOptionAfterDatabaseChange(LaunchResult
testGetUserProfileMetadata_EditUsernameAllowed()
testImpossibleToChangeNonLDAPMappedAttributes()
testPattern2()
testingClient.testing().revertTestingInfinispanTimeService());
testDifferentUserAuthenticated()
testMetricsEndpoint()
testDoNotRecordRuntimeOptionsDuringBuild(KeycloakDistribution
testFeatures(boolean
testRealm().users().get(userId);
testNameInToolbar()
testCreateUpdateDeleteExecutorRuntime()
testInvalidApiVersion()
testUserResource().roles().clientLevel(clientRepresentation.getId()).listAll().stream().filter(role
testMetricsEndpointDoesNotEnableHealth()
testIngressOnHTTP()
testOfflineSessionLoadingAfterCacheRemoval()
testCancelPasswordlessRegistration()
testingClient.server().run(ClientTokenExchangeSAML2Test::setupRealm);
testRealm().update(testRealm);
testInitInHead()
testingClient.testing().removeUserSession("test",
testOfflineSessionLazyLoading()
testRealm().clients().get(clientRep.getId()).getProtocolMappers().update(mapperRep.getId(),
test('long
testSuccessful(LaunchResult
testIntentionalExceptionOnCondition()
testDeviceCodeLifespanPerClient()
testSuccessfulUserInfoResponse(Response
testRealm().users().get(regularUserId);
test('numeric
testLogoutMandatoryDestinationSetPost()
testFrontendUrlInDestinationExpected()
testConfigurationSetInvalid(KeycloakSession
testClientOverrideFlowUsingBrowserHttpChallenge();
testWinSetLastRootLevelIfMultipleSet(LaunchResult
testTlsDisabled()
testing().onEvent(create(newest,
testReceiveArtifactLoginFullWithRedirect()
testHostnameStrict()
testCaseSensitivityGetUserByUsername()
testArtifactBindingLoginFullExchangeWithPost()
testAddProviderMappers()
testUserResource().credentials().get(0).getId();
testRealm().clients().get(testClient.getId()).roles().get(compositeClientRoleName)
testBackchannelAuthenticationFlow(false,
testPaginationFirstResultIsExactlyTheAmountOfUsersInTheFirstProvider()
tester.test(field,
testRolesWithIdsSearchQueries()
testReceiveEmptyArtifactResponse()
testCodeToTokenRequestSuccessRS256usingJwks()
testRealm.update(rep);
testImportAndIgnoreDirectory(LaunchResult
testRealmResource().flows().updateRequiredAction(providerId,
testingClient.testing().ldap(TEST_REALM_NAME).prepareRolesLDAPTest();
testRolesAreAvailable_getMethod_header()
testCertificatePolicyModeAnyOneRequestedAndNotPresent()
testRealm().update(rep);
testIgnoreReadOnlyAttributes()
testing().onEvent(create(EventType.LOGIN,
testFrontChannelLogout()
testFeatureAvailability(false);
testRegisterUserSuccess_lastNameLengthValidation()
testDirectGrantLoginWithOTPFormShouldFail()
testRegisterUserSuccess_attributeRequiredButNotSelectedByScopeIsNotRenderedAndNotBlockingRegistration()
testLoginAndClientScopesPermissions("johnDynamic",
testCommandLineArguments()
testClient.setRedirectUris(Collections.singletonList(getFakeClientUrl("*")));
testAuthenticationChannelCancelled()
testClass.getAnnotation(UseServletFilter.class).skipPattern());
testEnablePreviewFeatures(LaunchResult
testDirectEncryptAndDecrypt(Key
testPersistenceMultipleNodesClientSessionsAtRandomNode()
testRealm().roles().deleteRole(compositeRealmRoleName);
testBackchannelAuthnReqWithoutLoginHint()
testUser.getUserSessions();
testFAPICIBAWithoutSignedAuthenticationRequest()
testUpdateProfile()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("client-a").protocol("openid-connect").build());
testSetupRecoveryAuthnCodes()
testLeftInnerJoinIterable()
testFragmentProhibitedClientValidation()
testSuccessfulAuthorizationES512Request()
testRealm().users().search(username);
testCustomAttribute_Optional(KeycloakSession
testBuildHelp(LaunchResult
testRealm().clients()
testFAPIBaselineOIDCClientRegistration()
testExtendedClientPolicyIntefacesForDeviceTokenRequest()
testingClient.server("test").run(session
testStartUsingAutoBuild(LaunchResult
testCibaGrantSettingByDynamicClientRegistration()
testRealm.setClientScopes(Collections.singletonList(ClientScopeBuilder.create().name(SCOPE_LAST_NAME).protocol("openid-connect").build()));
testRealms.add(RealmBuilder.create().name("authz-test")
testExecutor.init(checkSSO
testUpdateEmail(KeycloakSession
testJsonFromRedirectRewriteRuleConfiguration()
testSessionsAreRemovedOnRealmRemoval()
testDefaultUserProfileProviderIsActive()
testSuccess_XmlWithNamespace()
testRealm().clientScopes().findAll().subList(0,2);
testStartOptimizedHelp(LaunchResult
testConsentWithAdditionalClientAttributes()
testSuccessfulUsingRequestParameter()
testDeleteAndPolicyUpdate()
testContext.reconnectAdminClient();
testUpdateUri()
testIdTokenEncryptionAlgRSA_OAEP256EncA192CBC_HS384()
testUpdatingClientSourceRolesCondition()
testRealm().update(realmRepresentation);
testingClient.testing("test").onAdminEvent(firstEvent,
testStartAutoBuild(LaunchResult
testGetBooleanAttributeValueRP()
testStoragePureJpa()
testDecodedWithClientIdNotUuid()
testFailureCountResetWithPasswordGrantType()
testSetUpLink(testRealmResource(),
testBackwardsCompatibilityForLoaConditionConfig()
testWrappedBuildPropertyTriggersBuildButGetsIgnoredWhenSetByQuarkus(LaunchResult
testPermissionRemoved()
testRealm().users().userProfile().getConfiguration());
testWebAuthn(false);
testFirstLastNameCanBeOptional()
testMethod.getName());
testQuery()
testDecodedWithClientIdAnActualUuid()
testIdpInitiated(String
testTokenRevocation()
testEntityOnFailNode.getConfig().getFirst("val1")));
testBadRealmName(KeycloakSession
testPublicClient()
testRefreshTokenWithConsentRequired()
testDefaultIdpSetTriedAndReturnedError()
testBfs()
testRealm().components().query(null,
testGetAccessTokenWithDynamicScopeWithPermittedRoleScope()
testClientInvocationWithOBBClient("CN=Foo,JURISDICTIONCOUNTRYNAME=BR,BUSINESSCATEGORY=Business
testingClient.server(bc.consumerRealmName()).run(configurePostBrokerLoginWithOTP(bc.getIDPAlias()));
testCertificatePolicyValidation(String
testLocaleRealmI18nEnabledUserWithLocale()
testRealm.getUserStorageProvidersStream().forEachOrdered(persistentFedModel
testRealm.setRequiredActions(actions);
testClientPolicyTriggeredForServiceAccountRequest()
testExchangeToSAML2EncryptedAssertion()
testClientRep.getAttributes().put(Constants.DEFAULT_ACR_VALUES,
testSimpleIckleQuery()
testSuccessfulAuthorizationRequest("keycloak-with-jwt-authentication.json");
testPingMode_requestWithInvalidClientNotificationShouldFail()
testQueryTypedResourcePermissions()
testRemoveCredential(SigningInPage.UserCredential
testAuthorizationEncryptionAlgRSA_OAEP256EncA128CBC_HS256()
testKeycloakConfPlaceholder()
testForEachParent()
testAuthorizationTokenSignatureAndEncryption(Algorithm.PS512,
test('-a
testBackchannelAuthenticationFlowNotRegisterSigAlgInAdvanceWithSignedAuthentication(String
testRealm().users().create(newUser))
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.ES512,
test('empty
testSignatureVerificationHardcodedPublicKeyHS512()
testRealmResource().users().search("tbrady",
testRequiredReadOnlyAttribute()
testRealm().clients().get(testClient.getId()).roles().create(RoleBuilder.create().name(compositeClientRoleName).build());
testEncodedWithClientIdNotUUid()
testInvalidConfiguration()
testObtainAllEntitlementsForResourceWithResourcePermission()
testProviderInitiatedLogoutCorrectlyLogsOutConsumerClients();
testCustomAttributeRequired(KeycloakSession
testCodeToTokenRequestSuccessForceAlgInClient(String
testRequiredByScope_clientDefaultScope()
testDefaultRoles(RealmResource
testStartUsingChmsStorage(LaunchResult
testingClient.testing("test").onEvent(secondEvent);
testNotEmptyValidator()
testSuccessfulAuthorizationHS512Request()
testMoveToZero()
testRealmResource().clients().get(accountMgmtId).roles()
testLockConcurrentlyInternal(KeycloakSession
testEmptyLists()
testAddDirtyRemoveFederationUser()
testErrorResponse()
testInvalidConfiguration(KeycloakSession
testMapping(String
testRealmResource().clients().create(ClientBuilder.create().clientId("test-client-1").build()).close();
testLifespans();
testImportWithNullAuthenticatorConfigAndNoDefaultBrowserFlow()
testDatabaseUrlProperties()
testNegativeLogicCondition()
testAttributeRequiredButNotSelectedByScopeIsNotRendered()
testIngressEnabledExisting()
testRealm().users().search(userCondNotMatch).get(0).getId();
testCodeToTokenRequestFailure(Algorithm.RS256,
testSystemProperties()
testAttributeDisplayName()
testComponentModelId(KeycloakSession
testRealmLoginPage.form().login();
testUser()
testPrimarySourceForBasicSet()
testAccountUpdateAttributeExpectFailure("deniedBAr");
testEvents()
testPodTemplateIncorrectDockerImage()
testCertificatePolicyModeAllNotRequestedAndOnePresent()
testSamlImportAndExportDisabled()
testDefaultPostLogoutRedirectUris(RealmResource
testRolesAreNotInUserInfoResponse(UserInfo
testMainIngressDurability()
testWinStartDefaultsToClustering(LaunchResult
testSimpleIckleQueryFlashedFromDefault()
testRealm().users().delete(userId))
testExpiredDeviceCode()
test03_createConfigurationWithoutGroupPath()
test('dotted
testSearchForRealmRoles()
testRealmResource().clients().get(clientUuid);
testRealm.setAttributes(new
testArtifactBindingLogoutSingleClientCheckArtifact()
testClientSessionAreRemovedOnUserSessionRemoval()
testRealm().roles().create(RoleBuilder.create().name(childRealmRoleName).build());
testIgnoreParameterIfNotSetinRequestObject()
testRealm().clients().get(clientRep.getId()).getProtocolMappers().delete(mapperRep.getId());
testStartDevCommand(LaunchResult
testRealm().roles().create(RoleBuilder.create().name(compositeRealmRoleName).build());
testRealm.setEditUsernameAllowed(false);
testIdTokenSignatureAndEncryption(Algorithm.PS512,
testLogoutDestination(REDIRECT,
testRealmPreRemoveDoesntRemoveEntitiesFromOtherRealms()
testClientWithoutRefreshToken()
testDefaultValue()
testStartUsingConfFile(LaunchResult
testSuccessfulAuthorizationRequest(String
testWorkingRealmImportWithCustomImage()
testScriptMappingThroughServerDeploy()
testEMailRequiredInProfile()
testStartDevUsingChmsStorage(LaunchResult
testUserCredentialsAvailable()
testPoliciesFormView()
testClientWithScope()
testPingModeSuccess()
testUserAttributeNames()
testClientIpAddressCondition()
testCompositeRolesPaginationQueries()
testKeycloakScaleAsExpected()
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.RS256,
testRealm().components().add(ldapMapper);
testRealm().update(realm);
testRealmAccountManagementPage.signOut();
testResponseMode()
testShouldNotReAugIfSameDatabase(LaunchResult
testServerDoesNotStartIfValidationFailDuringReAugStart(LaunchResult
testAccountUpdateAttributeExpectFailure("KERBEROS_PRINCIPAL",
testWithExpectedClientScope()
testUnsuccessfulUserInfoRequestWithoutOpenIDScope()
test('default
testRealm().clients().get(clientRep.getId()).addOptionalClientScope(id);
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest()
testNoComparisonTypeClassRefsSetNoDeclRefs()
testAddUndefinedValuesToMapStringList()
testGetUserProfileMetadata_RoAccessToUsernameAndEmail()
testPostLogoutRedirectUriNull()
testIntrospectRevokeRefreshToken()
testBadUser()
testingClient.server().run(ClientTokenExchangeTest::setupRealm);
testRealm().roles().get(compositeRealmRoleName)
testSimpleCompare()
testUser.getUserSessions().size());
testApiVersion()
testInvalidIssuer()
testClientRep.getAttributes().put(Constants.ACR_LOA_MAP,
testBasicAuth()
testShouldNotReAugIfConfigIsSame(LaunchResult
testBackchannelAuthenticationFlow()
testRealmResource().clients().get(client2.getId()).roles().create(RoleBuilder.create().name("client-role").build());
testLocalizationPreferenceDuringLogout()
testPathOrderWithAllPaths()
testDoNotUpdateUndefinedAttributes(KeycloakSession
testDateValidator()
testAttributeConsumingServiceIndexNotSet()
testRejectResourceOwnerCredentialsGrantExecutor()
testMultipleUriForResourceJSONConfig()
testFAPIAdvancedLoginWithPrivateKeyJWT()
testNoActionIfValidForScope()
testAutoClosingOfClosingStream()
testIsPassiveAttributeOmittedWhenFalse()
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest(true,
testCustomAttributeOptional()
testSuccessfulServiceAccountImpersonation(user,
testChangeInterval()
testViewGroups(migrationRealm);
testCertificatePolicyModeAnyNotRequestedAndNotPresent()
testReusingAccessAndRefreshTokens(0);
testSessionCountExceededAndOldestSessionRemovedFirstBrokerLoginFlow()
testSchema()
test('slashBreak',
testFAPICIBAWithoutBindingMessage()
testingClient.server().run(session
testFirstLastNameCanBeOptional(KeycloakSession
testContext.get();
testRealm().users().userProfile();
testRealmSessionCountExceededAndNewSessionDeniedFirstBrokerLoginFlow()
testApp.setRedirectUris(Collections.singletonList(redirectUri));
testRemoveCredential(credentials.get(0));
testSignatureVerificationJwksPS512()
testApp.getDefaultClientScopes();
testDeploymentRestarted(Set.of(kc1,
testSupportedLocalesOnReservedChars()
testClientScopesPermissions()
testSingleLogout()
testPathToRoot()
testUsingRelativePath(KeycloakDistribution
testRealm().components().query(ldapModelId,
testMigrationTo19_x()
testUrlEncoding()
testRemoveUserPolicyWhenUserDeleted()
testCertificatePolicyModeValidationAttributeReturnsAll()
testAccountUpdateAttributeExpectFailure("deniedbar");
testAccountConsoleClientHasDeleteUserRole(migrationRealm);
testAuthorizationEncryptionAlgRSA_OAEPEncA128CBC_HS256()
testCustomizedSessionIdMapper()
testDenyAccessWithNotExistingProperty()
testClientExchangeToItself()
testIntrospectTokenAfterImpersonation()
testEmailValidator()
testLifespans()
testSignatureVerificationJwksES256()
testDatabaseDriverSetExplicitly()
testDynamicUserProfileReview_attributeRequiredButNotSelectedByScopeIsNotRenderedAndNotBlockingProcess()
testRefreshTokenWhenClientSessionTimeoutPassedButRealmDidNot()
testRequiredByUserRole_USER(KeycloakSession
testReAugOnFirstRun(LaunchResult
testGetRole()
testMultipleClosingHandlersOnClosingStream()
testRealmRealm.toRepresentation());
testRHSSOVersionToKeycloakVersionConversion()
testCertificatePolicyModeAllTwoRequestedAndOnePresentDifferent()
testBackchannelAuthenticationEndpointAsAudience()
testing().clearAdminEventStore(realmId,
testingClient.testing().exportImport().runImport();
testAccountUpdateAttributeExpectFailure("deniedsome/thing");
testEntityUpdates(ComponentRepresentation
testErrorMessageInDenyAccess(message,
testCommandsAndArgsAreMerged()
testRealm().flows().registerRequiredAction(requiredAction);
testAccountConsoleClientHasDeleteUserRole(masterRealm);
testDifferentDriver()
testGetClientScopeById()
testUseDefaultPortsAndHttpsSchemeWhenProxyIsSetAndStrictHttpsEnabled()
