testIsCached()
testSubtasks.push('validate-html');
testBuildWithCliArgs(LaunchResult
testSuccess_FindAllElements()
testUpdateFailureWithInvalidScopeName()
testComparisonTypeSetNoClassRefsDeclRefsSet()
testRealmResource().clientPoliciesPoliciesResource().updatePolicies(new
testOptionValueWithEqualSign()
testPattern11UsingResourceInstancePermission()
testOnRealmRemoved()
testXUAToken()
testWebAuthnPasswordlessAlternativeWithWebAuthnAndPassword()
testing().onAdminEvent(create(date3,
testDirectGrant("direct-grant");
testSecondStartDoNotTriggerReAug(LaunchResult
testExecutor.logout(this::assertOnTestAppUrl,
testRealmLoginPage.form().setPassword("password");
testFAPIBaselineSecureSettingsWhenUseAdminPolicy()
testUserResource().credentials()
testHmacSignaturesFIPS()
testTwoLocksCurrentlyInternal(session,
testBackchannelAuthenticationFlow(isOfflineAccess,
testRequiredByUserRole_USER()
testModalDialog(()
testEventsClearedOnRealmRemoval()
testPrimarySourceForBasicUnset()
testAttackerClientUseAuthReqIdInCallbackEndpoint()
testDefaultAcrValues()
testIdPNotFound()
testIdTokenEncryptionAlgRSA_OAEPEncA192GCM()
testRealm());
testSignedAndEncryptedRequestObject()
testDenyAccessWithProperty()
testSuccessfulSinglePar()
testingClient.server(bc.consumerRealmName()).run(assertSessionCount(bc.consumerRealmName(),
testPostLogoutRedirectUriPlus()
testBackchannelAuthenticationFlowWithSignedAuthenticationRequest(true,
testingClient.server().run((KeycloakSession
testRealm().roles().get("realm-role").remove();
testReceiveArtifactNonExistingClient()
testMultipleRequests(KeycloakDistribution
testing().onAdminEvent(create(oldest,
testRealmResource().addDefaultDefaultClientScope(scopeDefId);
testCompositeRolesPaginationSearchQueries()
testContext.getAppServerBackendsInfo().get(0);
testGetVersionedApi()
testRealmAcrLoaMapping()
testReturnAllConfiguredAttributesEvenIfNotSet()
testDefaultDbPropertiesGetApplied()
testClientSessionCountExceededAndNewSessionDeniedBrowserFlow()
testIdempotentProfile()
testPrivateKeyEncodeDecode(PemUtils.removeBeginEnd(privateKey2).replace("\n",
testRealmResource().users().get(testUser.getId());
testNodeRestartResiliency(@ArquillianResource
testWebAuthnIDLessAndWebAuthnAndWebAuthnPasswordlessLogin()
testNoXa(LaunchResult
testImport(LaunchResult
testParseQuery(String
testWrongPassword(LaunchResult
testUpdateSingleField()
testOIDCEndpointGetWithToken()
testSuccess_Value()
testArtifactBindingIsNotUsedForLogoutWhenLogoutUrlNotSetPostTest()
testEmptyCollection()
testGet_PrimarySourceFor()
testArtifactSuccessfulAfterFirstUnsuccessfulRequest()
testRealm().users().get(userId).toRepresentation();
testing().queryEvents(realmId,
testRealmSessionCountExceededAndOldestSessionRemovedDirectGrantFlow()
testUnsuccessfulUserInfoRequestWithMultipleTokens()
testMigrationTo18_0_0();
testFAPIBaselineRedirectUri()
testRealmResource().clients().get(client1.getId()).roles().create(RoleBuilder.create().name("client-role").build());
testRealmResource().clients().findByClientId("account").get(0);
testing().onAdminEvent(create(System.currentTimeMillis(),
testFailureInvalidPar()
testDuplicateKeysInIDP()
testBuildForReAugWhenAutoBuild(LaunchResult
testConfigurationInvalidScope(KeycloakSession
testInvalidRequestWhenCallingAuthzEndpoints()
testFeatures(true,
testRealms.add(loadTestRealm());
testMigrationTo12_x(boolean
testSet_PrimarySourceFor()
testFeatureDoesntWorkWhenDisabled()
testing().clearExpiredEvents();
testingClient.server(realmName).run(assertSessionCount(realmName,
testSessionStateDuringArtifactBindingLogoutWithOneClient()
testFirstClassCitizenEnvVars("KC_FEATURES",
testInvalidFieldTypeJsonPolicies()
testValidation()
testPermissionCount()
testDefaultTlsPortChangeWhenHttpPortSet()
testPattern6()
testAttributeNotRequiredAndSelectedByScopeCanBeUpdatedFromVerificationScreenForcedByAnotherAttribute()
testRealmLoginPage.form().rememberMe(true);
testAttributeConsumingServiceIndexSet()
testCompositeRolesSearchQueries()
testAdminClientUpdateAcceptableAuthType()
testReadonlyUpdates()
testDuplicatedTokenRequestWithSameAuthReqId()
testRealm().clients().get(testClient.getId()).roles().deleteRole(childClientRoleName);
testRealm().clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).setDirectAccessGrantsEnabled(false);
testLazyOfflineUserSessionFetching()
testStartOptimizedHelpAll(LaunchResult
testIdTokenSignatureAndEncryption(Algorithm.RS256,
testBackchannelAuthenticationFlowNotRegisterSigAlgInAdvanceWithSignedAuthentication("valid-CIBA-CD-Ein",
testLoadBuiltinProfilesAndPolicies()
testDoubleValidator_ConfigValidation()
testWorkingRealmImport()
testSpiConfigurationUsingCommandLineArguments()
testPersistenceClientSessionsMultipleNodes()
test(AuthenticationFlowRepresentation
testOfflineSessionsRemovedAfterDeleteRealm()
testingClient.testing().ldap(TEST_REALM_NAME).prepareHardcodedGroupsLDAPTest();
testHelpCommand(LaunchResult
testOIDCEndpointGetWithSamlClient()
testCloneToExistingInstanceDumb()
testIgnoreFileWithUnsupportedExtension(LaunchResult
test07DisabledUserInMSADSwitchedToEnabledInKeycloak()
testRemovePolicyWhenOwnerDeleted()
testEnvVarPrecedenceOverConfFile(KeycloakDistribution
testRealm().users().get(user.getId());
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequestParam()
test('strings'
testUserInfoSignatureAndEncryption(Algorithm.ES384,
testLocaleRealmI18nEnabledAcceptLanguageHeader()
testSuccessfulAuthorizationRequest("keycloak-with-jwt-rs512-authentication.json");
testMigrationTo14_0_0()
testAuthorizationEncryptionWithoutEncryptionKEK()
testRealm.setClientScopes(Collections.singletonList(ClientScopeBuilder.create().name("customer").protocol("openid-connect").build()));
testWithExpiredBrokerCertificate()
testAttributeGuiOrder()
testNoReAugForAdditionalDatasourceRuntimeProperty(LaunchResult
testFAPIAdvancedSignatureAlgorithms()
testIncorrectStateParameter()
testRealmResource().toRepresentation().getId();
testSet_PrimarySourceForExcluded()
testHealthEndpointDoesNotEnableMetrics()
testSanitizeKey()
test02UpdatePasswordTest()
testAccountUpdateAttributeExpectFailure("saml.persistent.name.id.for.foo");
testSSLAlwaysRequired()
testAesKW_Aes128CbcHmacSha256()
testAttributeInputTypes()
testWalkBfs()
testEntityOnFailNode.getConfig().getFirst("required")));
testMigrationTo20_0_0();
testDynamicUserProfileReview_attributeRequiredAndSelectedByScopeMustBeSet()
testAuthenticationChannelErrorCase(Status.OK,
testClientDisplayedOnConsentScreen()
testBadBindingMessage()
testing().queryEvents(null,
testExecutor.loginForm(testUser,
testAccountUpdateAttributeExpectFailure("CREATED_TIMESTAMP",
testRegisterUserSuccess_requiredReadOnlyAttributeNotRenderedAndNotBlockingRegistration()
testRealm().toRepresentation().getId();
testResolveHealthOption()
testRealm.getUsers().add(UserBuilder.create().username("manage-consent-access").role("account",
testKeycloakPrincipalSerialization()
testNullPolicies()
testSimpleTwoNodeTreeSwapped()
testCertificatePolicyValidation("1.3.76.16.2.1",
testApp[0]).collect(Collectors.toList())
testCertificatePolicyModeAnyOneRequestedAndTwoPresent()
testFailureParIncludesRequestUri()
testing().clearEventStore(realmId);
testOnUserRemoved()
testBuildHelpAll(LaunchResult
testCustomAttributeInAnyContext()
testTransactionTypeChangesDriver()
testErrorMessageInDenyAccess(String
testEncodeDecodeGUID()
testRealmResource().clientPoliciesProfilesResource().updateProfiles(profiles);
testGetMapValueFromSet()
testCanRepresentPermissionTicketWithNamesOfResourceOwnedByClient()
testEndpointAsAudience(oauth.getParEndpointUrl());
testRealms.add(realmRepresentation);
test('stringArgs',
testMigrationTo12_0_0();
testDuplicateKeysInSP()
testClientScopes()
testRealms.add(rep2);
testXMLBombAttackResistance()
testLoginAndClientScopesPermissions("johnNormal",
testRemovePoliciesOnResourceDelete()
testXForwardedHeadersWithEdge()
testCustomValidationForUsername()
testArtifactBindingLoginSignedArtifactResponse()
testRealm().users();
testGetBooleanAttributeValue(StartElementHasQNameBooleanBiFunction
testLogoutMandatoryDestinationSetRedirect()
testSetMethodConfigs()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-3-sel").build());
testClientUriValidation("Root
testSimpleTwoNodeTree()
testBackchannelAuthenticationFlowWithSignedAuthenticationRequestUriParam()
testAccountLinkWithDynamicScope()
testPattern7()
testRealmSessionCountExceededAndOldestSessionRemovedBrowserFlow()
testFailureParIncludesInvalidResponseType()
testSecureRedirectUriEnforceExecutor()
testCompositeGroups()
testVolumeMountsAreMerged()
testGetProfileAttributes(KeycloakSession
testIdTokenEncryptionAlgRSA1_5EncA192CBC_HS384()
testAddVirtualAuthenticator()
testKeycloakRejectsRealUrlWhenFrontendUrlConfigured()
testSecureClientAuthenticatorDuringLogin()
test('multi
testPolling()
testExpectedNameId(bburkeUser.getUsername());
testRemovePoliciesOnClientDelete()
testRequestTokenBeforeAuthenticationNotCompleted()
testTlsClientAuthSubjectDn()
testRealmResource().update(realmRepresentation);
testDefaultRolesNameWhenTaken()
testRegisterUserSuccess_attributeRequiredAndSelectedByScopeMustBeSet()
testPermissionOrder()
testCreateValidDynamicScope()
testAttributeNames()
testLoginHintTokenRequiredButNotSend()
test.getAttributes().put("frontendUrl",
testGetVersionedApiInvalidOrigin()
testWelcomePage()
testCertificatePolicyModeAllOneRequestedAndTwoPresentDifferent()
testAddUndefinedValuesToMapStringString()
testRealm.setClientScopes(Collections.singletonList(ClientScopeBuilder.create().name(SCOPE_DEPARTMENT).protocol("openid-connect").build()));
testPrivateKeyEncodeDecode(String
testCustomUserProfileProviderIsActive(KeycloakSession
testSingleLogout();
testSyncRegistrationForceDefault()
testQueryTypedResourcePermissionsForResourceInstances()
test02_syncWithDropNonExistingGroups()
testCIBASettings()
testing().onEvent(create(System.currentTimeMillis()
testShowConfigCommandWithAllShowsAllProfiles(LaunchResult
testUserInfoSignatureAndEncryption(Algorithm.PS256,
testTransientUserSession(KeycloakSession
testAttributeConsumingServiceAttributeRoleMapperInSpMetadataWithServiceName()
testAuthorizationEncryptionAlgRSA_OAEPEncA256CBC_HS512()
testRealmPublicKeyEncryptedRequestObjectUsingRSA_OAEPWithA128CBC_HS256()
testRealm()
testIdPNotForceSyncUserAttributes()
testPodTemplateIncorrectName()
testBackchannelAuthnReqWithUnknownUser()
testConditionWithoutNoConfiguration()
testAdminClientAutoConfiguredClientAuthType()
testAuthorizationEncryptionAlgRSA1_5EncA192CBC_HS384()
testing().onAdminEvent(create(realmId2,
testMultiplePolicies()
testActionTokens()
testSecureResponseTypeExecutor()
testingClient.testing().exportImport().clear();
testExtendedClientPolicyIntefacesForResourceOwnerPasswordCredentialsResponse()
testDynamicUserProfileReviewWhenMissing_requiredAndSelectedByScopeAttributeForcesUpdate()
testUpdateProfileSimple()
testDynamicUserProfileReview_attributeNotRequiredAndSelectedByScopeCanBeSet()
testRequiredOnlyIfUser()
testFailureParUsedByOtherClient()
testSignatureVerificationHardcodedPublicKeyPS512()
testCertificatePolicyModeAllTwoRequestedAndNotPresent()
testClusterConfig()
testCodeToTokenRequestSuccessForceAlgInClient(Algorithm.PS512);
testBruteforceProtectionRecoveryAuthnCodes()
testSetRootLevel(LaunchResult
testAuthenticationChannelUnauthorized()
testDefaultDbPortGetApplied()
testingClient.testApp().oidcClientEndpoints().getPushedCibaClientNotification("client-notification-some");
testAbstractSimpleValidatorSupportForCollections()
testingClient.testing().ldap(TEST_REALM_NAME).prepareHardcodedRolesLDAPTest();
testRealms.add(configureRealm(RealmBuilder.create().name("authz-test-no-rt").accessTokenLifespan(1),
testLogoutDestinationOptionalIfUnsignedRedirect()
testSecureSigningAlgorithmForSignedJwtEnforceExecutorWithSecureAlg()
testDuplicatedPolicies()
testRealm();
testRefreshWithOfflineToken(token,
testBuildCommand(LaunchResult
testUpgradeRecreatesPods()
testFileOnlyLogsNothingToConsole(LaunchResult
testAdminOnlyAttributeNotVisibleToUser()
testSuccessDefaultAlgWhenNoAlgSetInJWK()
testSamlAttributes(RealmResource
test('already
testAppAuthzSA.getUsername());
testParseQuery("key1:val=\"123456\"",
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-2-sel").build());
testRealm.setUserManagedAccessAllowed(true);
testRealmResource().flows().deleteFlow(WEBAUTHN_FLOW_ID);
testing().onAdminEvent(create(date1,
testLogoutDestination(POST,
testBackchannelAuthenticationFlowWithSignedAuthenticationRequest(false,
testIdTokenEncryptionAlgRSA_OAEPEncA256GCM()
testWebAuthnIDLessWithNoWebAuthnPasswordlessCredentialLogin()
testRealmRep.setPrivateKey(REALM_PRIVATE_KEY);
testRSAOAEP256_A128GCM()
testEncodeAndDecodeGeneratedObjects()
testCertificatePolicyModeAllOneRequestedAndOnePresentDifferent()
testResetConfiguration(KeycloakSession
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequestUriParam()
testIgnoreQuarkusPropertyFromKeycloakConf(LaunchResult
testCodeToTokenRequestSuccessPS384()
testFailureParIncludesInvalidRedirectUri()
testInResponseToSetCorrectly()
testSecureClientRegisteringUriEnforceExecutor()
test(s)
testCustomArtifact()
testTokenScriptMapping()
testOptionsValidator(){
testPostLogoutRedirectUrisSet(migrationRealm);
testRealm().clientScopes().get(scopeId).getScopeMappings().realmLevel().add(dynamicScopeRoleList);
testStartHelp(LaunchResult
testRealmResource().clients().findAll().get(0).getId();
testDefaultValueFromProperty()
testFeatureAvailability(true);
testCustomAttribute_Required()
testRealm.clients().get(clientUUID).addOptionalClientScope(scopeId);
testReceiveArtifactLogoutFullWithPost()
testUndefinedValuesToCollection()
testLazyClientSessionStatsFetching()
testTokenExchange();
testLogoutDestination(Binding
testSuccessfulMultipleParByMultipleClients()
testFindAvailableNamedParamAlreadyExists()
testRealm().flows().getFlows().clear();
testSamePositionZero()
testTotp()
testLogInAsUserInIDP()
testExchangeUsingServiceAccount()
testAnyClientCondition()
test(String
testLogoutMandatoryDestinationUnsetPost()
testStructureLinearThreeNodeSwapped()
test(Object
testStartDevHelp(LaunchResult
testDeserialization()
testLDAPConnection(@FormParam("action")
testCreateWithResourceType()
testCertificatePolicyModeAllTwoRequestedAndTwoPresent()
test('comprehensive',
testing().getAdminEvents(REALM_NAME_1,
testGitHubIdentityProvider()
testDuplicateIdentityProviders()
testPublicClientWithPKCESuccess()
testingClient.testing().exportImport().setFile(targetFilePath);
testRealm().flows().raiseRequiredActionPriority(UserModel.RequiredAction.UPDATE_PASSWORD.name());
testImportClientMultipleServicesWithDefault()
test06RegisterNewUser()
testUserGroupRoleToAttributeMappersScopedWithDifferentClient()
testCanRepresentResourceBeanOfResourceOwnedByClient(KeycloakSession
testRealm.toRepresentation();
testingClient.server().run(ClientTokenExchangeTest::setUpUserImpersonatePermissions);
testSecureResponseTypeExecutorAllowTokenResponseType()
testRealm().users().get(testUserId);
testRealms.add(testRealmRep);
testGetRoleById()
testAdminClientAugmentedAuthType()
testRealm().roles().list().stream()
testRequiredIfAdmin(KeycloakSession
testIdpInitiated(USER_NAME_LOWERCASE,
testClientInvocationWithOBBClient(String
testGetUserProfileMetadata_EditUsernameDisallowed()
testIdTokenEncryptionAlgRSA1_5EncA256CBC_HS512()
testRemoveFromSetByMapKey()
testRealmResource().clientPoliciesPoliciesResource().getPolicies();
testLengthValidator_ConfigValidation()
testSecureCibaAuthenticationRequestSigningAlgorithmEnforceExecutor()
testSuccess_XmlFragment()
testRealm().users().get(defaultUser.getId());
testDynamicUserProfileReviewWhenMissing_requiredButNotSelectedByScopeAttributeDoesnotForceUpdate()
testFailureParIncludesInvalidScope()
testExpectedStatusCode(JBossSAMLURIConstants.STATUS_INVALID_NAMEIDPOLICY.get());
testRealm.getClientScopes().add(ClientScopeBuilder.create().name(SCOPE_DEPARTMENT).protocol("openid-connect").build());
testBackchannelAuthenticationFlowWithSignedAuthenticationRequestParam()
testRealm().users().get(newUserId);
testConfigurationInvalidScope()
testScriptMapperNotAvailableThroughAdminRest()
testRealm().clientPoliciesPoliciesResource().getPolicies();
testOnClientRemoved()
testing().getAdminEvents(null,
testExportSucceeds(LaunchResult
testUserResource().roles().clientLevel(accountClientId);
testBackchannelAuthenticationFlowNotRegisterSigAlgInAdvanceWithSignedAuthenticationRequestUriParam()
testPropertyNamesFromConfig()
testErrorMessageInDenyAccess(null,
testPodTemplateIncorrectContainerName()
testCodeToTokenRequestSuccess(Algorithm.RS512);
testTokenEndpointSigningAlg()
test('newlines
testEnvVarsAreMerged()
testEnvVarAvailableFromPropertyNames()
testCodeToTokenRequestSuccess512()
testAuthSessions()
testPathConfigInvalidation()
testRealmRep.setGroups(Arrays.asList(GroupBuilder.create().name("restricted-group").build()));
testGetUserSessionsWithRememberMe()
testIncorrectChangingParameters()
testRotatedKeysPropagated(servletPage,
testArtifactBindingLogoutTwoClientsPostWithSig()
testRealm().localization().deleteRealmLocalizationText(locale,
testAttributeRequiredAndSelectedByScope()
testWalkDfs()
testExtendedClientPolicyIntefacesForTokenResponse()
testSetUpLink(RealmResource
testLocaleRealmI18nDisabledUserWithoutLocale()
testShouldReAugAndNeedsAutoBuildOptionBecauseHasNoAutoBuildOption(LaunchResult
testAllowCreateAttributeOmittedWhenTransient()
testRealmResource().roles().get(DEFAULT_ROLE_NAME).deleteComposites(rolesToRemove);
testURL.isPresent()
testConfidentialClientAcceptExecutorExecutor()
testWebAuthnIDLessLogin()
testDevModeWarning(LaunchResult
testHostnameStrictDisabled()
testOfflineTokenLogin();
tests](docs/tests-development.md)
testMigrationTo18_x();
testDbOptionFromPersistedConfigSource(LaunchResult
testInvalidTokenSignature()
testIdTokenSignatureAndEncryption(Algorithm.PS256,
testRealmRep.setAccessCodeLifespan(60);
testRealmAttributesMigration()
testAccountUpdateAttributeExpectFailure("deniedsome*thing");
testRealm().localization().saveRealmLocalizationText(locale,
testArtifactDoesntContainSignature()
testAuthorizationTokenSignatureAndEncryption(Algorithm.RS256,
testRealms.add(configureRealm(RealmBuilder.create().name("authz-client-jwt-test-hs512"),
testFailureParInvalidPkceSetting()
testDoNotReturnAttributeIfNotReadble()
testDuplicatedProfiles()
test01_syncWithGroupInheritance()
testConfigurationGetSet(KeycloakSession
testingClient.server("test").fetch(session
testStartUsingMixedStorage(LaunchResult
testStartWithAutoBuildDoesntShowCredentialsInConsole(LaunchResult
testQuarkusProfilePropertyStillWorks()
testRemoteCachesParallel()
testRealms.add(configureRealm(RealmBuilder.create().name("authz-client-jwt-test-es512"),
testCloneAsNewInstance()
testSubtasks.concat(['dist-css',
testBuildPropertyAvailable(LaunchResult
testClass.getAnnotation(UseServletFilter.class).filterPattern()
testAttributeRequiredForDefaultScope()
testIdTokenEncryptionWithoutEncryptionKEK()
testConsentCancelCannotBeReused()
testingClient.testing().removeExpired("test");
testRemovePoliciesOnResourceDelete(KeycloakSession
testExtremelyLongClientAttribute(RealmResource
testArtifactBindingLoginIncorrectSignature()
testDatabaseDialectSetExplicitly()
testTokenPropertiesMapping()
testSecureCibaSessionEnforceExecutorWithSignedAuthenticationRequestUriParam()
testRealmSessionCountExceededAndOldestSessionRemovedResetPasswordFlow()
testInvalidFormattedJsonProfiles()
testSuccessSignedResponse(String
testCreateNonDynamicScopeWithFeatureEnabled()
testMappingFromAttribute()
testRealmResource().flows().createFlow(flow);
testAddUndefinedValuesToMapStringMap()
test('whitespace
testClientWithoutScope()
testResolveProfile()
testFAPIBaselinePublicClientLogin()
testSecretsCanBeUnWatched()
testXMLBombAttack()
testSPMetadataArtifactBindingUsedForLogout()
testRealm.getClientScopes().add(ClientScopeBuilder.create().name(SCOPE_LAST_NAME).protocol("openid-connect").build());
testMigrationTo18_0_0()
testingClient.testApp().oidcClientEndpoints();
testExecutor.configure().init(defaultArguments());
testAnnotationsAreMerged()
testMigrationTo19_x();
testParSecureRequestObjectExecutor()
testRealm().components().component(ldapModelId);
testPublicClientCustomConsent()
testClientUpdateSourceHostsCondition()
testBackchannelAuthenticationFlowNotRegisterSigAlgInAdvanceWithSignedAuthenticationRequestParam()
testJsonFormatApplied(LaunchResult
testUpdatingFirstNameAndLastNamePropagatesToFullnameMapper()
testCustomAttribute(KeycloakSession
testAuthenticatedClientSession(clientSessions.get(client2.getId()),
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-1").build());
testUserSessionPropagationBetweenSites()
testKeycloakCacheIsConnected()
testHttpEnabled(LaunchResult
testTwoNestedLocksCurrentlyInternal(KeycloakSession
testIntegerValidator()
testIngressEnabledNotExisting()
testAuthnContextTypeWithAuthnContextClassRefAndAuthnContextDecl()
test(Map.Entry<String,
testCodeToTokenRequestFailureHS512Enforced()
testArtifactBindingLoginCheckArtifactWithPost()
testUserInfoSignatureAndEncryption(null,
testLoopback()
testLocalId()
testText.append("\n");
testAccountUpdateAttributeExpectFailure("enabled");
testRegisterUserSuccess_attributeNotRequiredAndSelectedByScopeCanBeSet()
testStaleCacheConcurrent()
testObtainAllEntitlementsForResourceWithScopePermission()
testAppAuthzApp.getClientId());
testing().onAdminEvent(create(newest,
testEntityOnFailNode.getConfig().getFirst("val2")));
testPrivateKeyInPKCS8Format()
testCustomUserProfileProviderIsActive()
testDeploymentRestarted(Set.of(kc1),
testCustomValidationInCustomAttribute()
testEventsOnUpdateProfileNoEmailChange()
testUsernameReadNotVisibleInProfile()
testFeatureAvailability(boolean
testingClient.testing().exportImport().setRealmName(CHILD_IDP);
testPersistenceSingleNodeDeleteRealm()
testContextInstance.get();
testApp.addOptionalClientScope(scopeId);
testingClient.testing().exportImport().setAction(ExportImportConfig.ACTION_IMPORT);
testGetProfileAttributes()
test04UpdateLDAPDirectlyToSetUpdatePassword()
testIntegerValidator_ConfigValidation()
testCertificatePolicyModeAnyTwoRequestedAndTwoPresent()
testAccountUpdateAttributeExpectSuccess("deniedFoot");
testContext.setTestRealmReps(emptyList());
testNoActionIfNoValidationError()
testConsentCancel()
testFileLoggingHasDifferentFormat(RawDistRootPath
test('multiAlias',
testFailureNotParByParRequiredCilent()
testNotWorkingRealmImport()
testSet_NoPrimarySource()
testReusingAccessAndRefreshTokens_refreshDisabled()
testMaxLifespan()
testDuplicateServiceProviders()
testAttributeConsumingServiceMappersInSpMetadata()
testIgnoreQuarkusSystemPropertiesAtStart(LaunchResult
testWinKeycloakLogFileCreated(RawDistRootPath
testSerialization()
testOptionalAttributes(KeycloakSession
testMigrationTo19_0_0()
testAccountLink();
testAddRemoveUser()
testComponentModelId()
testInvalidXpath()
testRealms.add(rep1);
testInvalidDeviceCode()
testKeyEncryption_ContentEncryptionAesGcm(JWEConstants.RSA_OAEP_256,
testRootAndCategoryLevels(LaunchResult
testRealm.getUsers().add(
testPaginationFirstResultInFirstProvider()
testRemoveCredential(webAuthn1);
testCreateInvalidRegexpDynamicScope()
testDisabledPathNoCache()
testErrorObjectExpectedClaims()
testGetBooleanAttributeValue(BiFunction<StartElement,
testRegisterUserInvalidLastNameLength()
testRealmResource().users().get(testUser.getId()).toRepresentation().getEmail());
testArtifactBindingLoginForceArtifactBinding()
testRealm.users().userProfile().update(configuration))
testRealm().update(realmRep);
testIdTokenEncryptionAlgRSA_OAEPEncA256CBC_HS512()
testServlet()
testCodeToTokenRequestSuccess(Algorithm.PS256,
testServletWithConsent()
testIntrospectRevokeOfflineToken()
testArtifactBindingTimesOutAfterCodeToTokenLifespan()
testIntrospectDoesntExtendTokenLifespan()
testRealm().clients().findByClientId("account").get(0);
testMapping(attributeValue,
testClientOfflineSessionMaxLifespan()
testPersistenceMultipleNodesClientSessionAtSameNode()
testViewGroups(masterRealm);
testReusingAccessAndRefreshTokens_refreshEnabled()
testSetHostnamePath()
testIdPForceSyncUserAttributes()
testDatabaseProperties()
testSetDefaultConfig()
testExtremelyLongClientAttribute(migrationRealm);
testRealmSessionCountExceededAndNewSessionDeniedResetPasswordFlow()
testAccountUpdateAttributeExpectSuccess("nodeniedBARrier");
testServerDoesNotStartIfValidationFailDuringReAugStartDev(LaunchResult
testRemoveChild()
testRealmResource().toRepresentation();
testRealm().users().search(userWithRole).get(0).getId();
testTwoProfilesWithDifferentConfigurationOfSameExecutorType()
testDynamicUserProfileReview_requiredReadOnlyAttributeNotRenderedAndNotBlockingProcess()
testSessionCountExceededAndNewSessionDenied()
testPodTemplateIsMerged()
testReadOnlyUserDoesNotThrowIfUnchanged()
testGetBooleanAttributeValue(new
test('value
testClientSessionCountExceededAndOldestSessionRemovedBrowserFlow()
testBuildWithPropertyFromQuarkusProperties(LaunchResult
testPodTemplateIncorrectImagePullSecretsConfig()
testExplicitConsentRequiredBackchannelAuthenticationFlows()
testCertificateEncodeDecode(cert1);
testSecureLogoutExecutor()
testAdminClientUpdateDefaultAuthType()
testCLIPriorityOverSysVar()
testImpersonationUsingPublicClient()
testHttpDiscovery()
testRealmPublicKeyEncryptedRequestObjectUsingRSA_OAEP_256WithA256GCM()
testContext.getOrCreateCleanup(REALM_NAME).addClientUuid(clientId);
testDoNotValidateUsernameWhenRegistrationAsEmailEnabled()
testSuccessEncryptedResponseSigAlgES512AlgRSA1_5EncDefault()
testExtendedClientPolicyIntefacesForCiba()
testGet_PrimarySourceForExcluded()
testingClient.server(bc.consumerRealmName()).run(configurePostBrokerLoginWithOTP(samlBrokerConfig.getIDPAlias()));
testConfigurationGetSetDefault()
testDecodeObjectsInPEMFormat()
testExecutor.logInAndInit(defaultArguments(),
testingClient.testing().getClientSessionsCountInUserSession("test",
test05UpdatePasswordUnsyncedMode()
testLDAPConnection(TestLdapConnectionRepresentation
testSetSchema(LaunchResult
testTotpLookAround()
testCustomAttribute_Required(KeycloakSession
testDfs()
testExecutor.validateOutputField(this::assertInitNotAuth)
testRealmExportImport()
testAudience()
testAddFailureWithInvalidScopeName()
testCertificatePolicyModeAnyOneRequestedAndOnePresentDifferent()
testRequiredByUserRole_ADMIN(KeycloakSession
testRemoveChildDirectly()
testExtendedClientPolicyInterfacesForBackchannelAuthenticationRequest()
testResolvePropertyFromDefaultProfile()
testSearchTimeout()
testReAugForAdditionalDatasource(LaunchResult
testAddProviderMappersFail()
testReceiveArtifactLoginFullWithPost()
testDefaultCrypto()
testStartDevFirstTime(LaunchResult
testFrontendUrl()
testNotCached();
testEnableSinglefeature(LaunchResult
testCodeToTokenRequestSuccess(Algorithm.HS384);
testRolesWithIdsPaginationQueries()
test('short',
testOwnerAccess()
testMultipleUsersBackchannelAuthenticationFlows()
testNoReAugAfterChangingRuntimeProperty(LaunchResult
testRealms.add(realm.build());
testMigrationTo13_0_0()
testClientWithRefreshToken()
testRealm().users().search(userWithoutRole).get(0).getId();
testCertificatePolicyModeAllOneRequestedAndOnePresent()
testMainServiceDurability()
testSecureCibaSessionEnforceExecutor(false);
testNotCached()
testGetGroupById()
testMigrationTo12_x(true);
testIdTokenSignatureAndEncryption(Algorithm.ES512,
testBackchannelAuthenticationFlowOfflineAccess()
testAuthorizationEncryptionAlgRSA1_5EncA128GCM()
testBackchannelAuthenticationFlowWithoutBindingMessage()
testCertificatePolicyModeAnyTwoRequestedAndOnePresentDifferent()
testUserSessionInitializerWithDeletingClient()
testDoNotUpdateUndefinedAttributes()
testDefaultSignatureAlgorithm()
testRealm().components().add(keys))
testRregisterUserSuccess_lastNameOptional()
testClientUriValidation(true,
testAuthorizationEncryptionAlgRSA_OAEP256EncA192CBC_HS384()
testAccountPage.navigateTo();
testBadImpersonator()
testReadinessUp()
testFailureClientAuthnFailed()
testExpired()
testPropertyMapping()
testAuthorizationEncryptionAlgRSA1_5EncA192GCM()
tests](docs/tests.md)
testDynamicUserProfileReviewWhenMissing_requiredReadOnlyAttributeDoesnotForceUpdate()
testRealm.getUsers().add(user);
testUpdatingAttributesWorksEvenWithEmptyAttributes()
testUserAttributeLDAPStorageMapperHandlingUsernameLowercasing()
testOptionalScopesWithConsentRequired()
testPrimarySourceForWithExcluded()
testUriValidator()
testClientOfflineSessionIdleTimeout()
testEncodedWithClientIdUUid()
testClientSessionCountExceededAndOldestSessionRemovedDirectGrantFlow()
testRealmExportImport();
testRealmSessionCountExceededAndOldestFirstBrokerLoginFlow()
testCanRepresentPolicyResultGrantOfResourceOwnedByClient()
testLogInAsUserInIDPAfterError()
testArtifactResolveWithWrongIssuerFails()
testUserResource().toRepresentation();
testImpersonation()
testNoValidationsIfUserReadOnly(KeycloakSession
testAuthzCodeFlowUnderMultiPhasePolicy()
testAuthorizationEncryptionAlgRSA_OAEPEncA128GCM()
testExtendedClientPolicyInterfacesForBackchannelTokenResponse()
testSubsystem()
testDefaultProviderCustomizations()
testSingleNodeTree()
testPublicClientWithPKCEFail()
testImpersonationUsingTokenIssuedToUntrustedPublicClient()
testNumberOfFailuresForDisabledUsersWithPasswordGrantType()
testAnyNamespacePreservedInContext()
testDeleteDefaultRole()
testCodeToTokenRequestFailure(String
testMigrationTo20_x();
testBackchannelAuthenticationFlowRegisterDifferentSigAlgInAdvanceWithSignedAuthenticationRequestParam()
testCommaSeparatedArgValues()
testAuthenticateRecoveryAuthnCodes()
testRealm().users().get(userId).credentials();
testDefaultConfigForUpdateProfile(KeycloakSession
tests](https://github.com/twbs/bootstrap/tree/master/js/tests).
testRealms.add(RealmBuilder.create().name(REALM_NAME_1).build());
testExchangeToSAML2UnsignedAndUnencryptedAssertion()
testRealm).getUserStorageProvidersStream().forEachOrdered(persistentFedModel
testSuccessEncryptedResponseSigAlgES384AlgRSA_OAEPEncA128GCM()
testUserWithViewUsersRoleCanOpenConsole()
testSecureSigningAlgorithmForSignedJwtEnforceExecutor()
testPattern10()
testNoCache()
testUpdateEmail()
testRealmPage.setAuthRealm(TEST);
testSuccessEncryptedResponseSigAlgRS256AlgRSA_OAEP256EncA192CBC_HS384()
testingClient.testing().setTestingInfinispanTimeService();
testCertificatePolicyModeAnyOneRequestedAndTwoPresentDifferent()
testDevicePollingIntervalPerClient()
testXPathAttributeMapper()
testAddProviderMappersSkip()
testRealmPublicKeyEncryptedRequestObjectUsingKid()
testSuccessWhenNoAlgSetInJWK()
testSimpleCompareAnd()
testUpdateProfile();
testRealmResource().update(testRealm);
testingClient.server().run(UserConsentWithUserStorageModelTest::setupEnv);
testEntityOnFailNode.getConfig().getFirst("val3");
testUpdateReadOnlyAttributeWhenNotSetToUser()
testMoveForward()
testExpiredUserCodeTest()
testAccountUpdateAttributeExpectFailure(String
testDeleteAccount(masterRealm);
testFindAvailableNamedParamIllegalCharacterInPrefix()
testDatabaseDefaults()
testSaml20DecryptId()
testPattern4()
testSuccessfulAuthorizationRequest("keycloak-with-jwt-es512-authentication.json");
testRealmResource().clients().query(searchQuery).stream()
testIgnoreQuarkusSystemPropertyAtBuild(LaunchResult
testWeeklyEviction()
testOptionalAttributes()
testFeatures(false,
testLDAP(TestLdapConnectionRepresentation
testRealmRep.setRealm(TEST);
testReceiveArtifactLogoutFullWithRedirect()
testRealmLoginPage.form().login(USER_LOGIN,
testFAPICIBALoginWithMTLS()
test03UpdatePasswordWithLDAPDirectly()
testUser.getUsername()
testInvalidAudience()
testProfilesJsonView()
testSkipExecutionUserHasNotRoleCondition()
testFips()
testArtifactBindingLogoutSingleClientPost()
testConfigurationGetSetDefault(KeycloakSession
testUserInfoEncryptedResponse()
test('alias',
testUserInfoSignatureAndEncryption(org.keycloak.crypto.Algorithm.PS384,
testBackchannelAuthenticationFlowNotRegisterSigAlgInAdvanceWithSignedAuthentication("valid-CIBA-CD-Zwei",
testForceHttpsSchemeAndPortWhenStrictHttpsEnabled()
testApp.getRedirectUris().stream()
testArtifactBindingIsNotUsedForLogoutWhenLogoutUrlNotSetRedirect()
testInvalidUrlClientValidation()
testContainsOrExact(func.apply(userEntity),
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest(false,
testDefaultToHelp(LaunchResult
testBuiltinOptionalScopes()
testCertificatePolicyValidation("1.3.76.16.2.1,1.2.3.4.5.6",
testBackchannelClientValidations()
testParseQuery("
testPersistenceSingleNode()
testContext.setInitialized(true);
testRestCallWithAccessTokenAsQueryParameter()
testFail();
testUpdateProfileEmailChangeSetsEmailVerified()
testIngressDisabledExisting()
testParseQuery("key1:\"val=\\\"12
testRealmResource().flows().updateRequiredAction(UserModel.RequiredAction.UPDATE_EMAIL.name(),
testNotFoundClient()
testIdTokenEncryptionAlgRSA1_5EncA192GCM()
testEmpty()
testMetricsUp()
testCodeToTokenRequestSuccess(Algorithm.ES256,
testCreateDeletePolicyRuntime()
testApp.toRepresentation();
testClientInvocationWithOBBClient("CN=Foo,1.3.6.1.4.1.311.60.2.1.3=#13024252,2.5.4.15=#130f427573696e65737320456e74697479,2.5.4.5=#130e3037323337333733303030313230,OU=My
testClientWithNotDefinedScope()
testInvalidUserCode()
testDoubleValidator()
testInvalidFormattedJsonPolicies()
testRealm().roles().deleteRole(childRealmRoleName);
testSignedRequestObject()
testingClient.testApp().oidcClientEndpoints().getPushedCibaClientNotification(clientNotificationToken);
testApp.addDefaultClientScope(scopeId);
testRealm.getClientScopes().add(ClientScopeBuilder.create().name("phone-2").build());
testCodeToTokenRequestSuccessRS256usingJwksUri()
testing().clearAdminEventStore(realmId2);
testRequiredByClientScope()
testAuthorizationEncryptionAlgRSA_OAEPEncA192CBC_HS384()
testDeleteAccount(RealmResource
testAccountUpdateAttributeExpectFailure(attrName,
testShouldReAugIfConfigChanged(LaunchResult
testMigrationTo13_0_0(testRealmAttributesMigration);
testBasicAuthErrorHandling()
testDefaultConfigForUpdateProfile()
testParEndpointAsAudience()
testNewInstance()
testPattern3()
testSearchRolesByDescription()
testWithClientBrowserOverrideWithDynamicScope()
testRealms.get(0);
testReusingAccessAndRefreshTokens(
testHomographicUsername()
testDictClientFromMap()
testUrlDecoding()
testAuthorizationTokenSignatureAndEncryption(Algorithm.ES512,
testing().clearAdminEventStore(realmId);
testDirect_Aes256CbcHmacSha512()
testCodeToTokenRequestSuccessForceAlgInClient(Algorithm.PS384);
testAuthorizationEncryptionAlgRSA_OAEPEncA256GCM()
testBlacklistPasswordPolicyDefaultPath()
testValidateAndCreateLdapProviderEditMode()
testFlashingToAnotherMCB()
testStartDevShouldStartTwoJVMs(LaunchResult
testPropertyEnabledAtRuntime(LaunchResult
testAuthorizationEncryptedResponse()
testStartDevDefaultsToLocalCaches(LaunchResult
test06SyncRestAPIMissingAction()
testAccountUpdateAttributeExpectSuccess("saml.something");
testAttributeNotRequiredWhenMissingScope()
testOverrideUsedAuthenticator()
testExternalIdTwoStrings()
testSPMetadataArtifactBindingNotUsedForLogout()
testingClient.server(TEST_REALM_NAME).run(session
testClientExchange()
testFipsApprovedMode(LaunchResult
testCertificatePolicyModeAnyOneRequestedAndOnePresent()
testChangingLoaConditionConfiguration()
testExpectedStatusCode(String
testRolesWithIdsPaginationQueries(this::getResult);
testAccountUpdateAttributeExpectFailure("deniedfoo");
testPersistenceWithLoadWithExternalClientStorage()
testKeyEncryption_ContentEncryptionAesHmacSha(JWEConstants.RSA_OAEP_256,
testFrontChannelLogoutWithoutSessionRequired()
testingClient.testing().removeUserSessions("test");
testPattern8()
testContains()
testClientUpdateSourceRolesCondition()
testValidator(@ArquillianResource
testEmailLinkBasedOnRealmFrontEndUrl()
test.getTestingClient().testing().revertTestingInfinispanTimeService();
testResetConfiguration()
testRealm.users().get(userId).toRepresentation();
testSuccessfulUserInfoResponse(response);
testResolveProfile(KeycloakSession
testConcurrency()
testingClient.server().fetch(session
testSyncRegistrationEmailRDNDefaultValue()
testInvalidXml()
testAuthorizationEncryptionAlgRSA_OAEPEncA192GCM()
testReadinessDown()
testConfigurationChunks(KeycloakSession
testGetUserProfileMetadata_RoAccessToNameFields()
testProviderTransientIdpInitiatedLogin()
testSetLastRootLevelIfMultipleSet(LaunchResult
test01RoleMapperRealmRoles()
testPostLogoutRedirectUri()
testBackEndUrlFromRequest()
testRemoveChildViaPredicate()
testExtendedClientPolicyIntefacesForBackchannelTokenRequest()
testCibaGrantDeactivated()
testParCorsRequestWithInvalidUrlShouldFail()
testIdpInitiated(USER_NAME_LDAP,
testRolesInUserInfoResponse(userInfo);
testRolesWithIdsPaginationSearchQueries(GetResult
testEventExpiration()
testClientSessionCountExceededAndOldestSessionRemovedResetPasswordFlow()
testCreateUserDoNotGrantRole()
testSuccessEncryptedResponseSigAlgNoneAlgRSA1_5EncDefault()
testHttpRelativePathWithSecretValue()
testWebAuthn(true);
testGroupAttributeTwoGroupHierarchyMultiValueNoAggregate()
testLogoutMandatoryDestinationUnsetRedirect()
testRolesWithIdsPaginationSearchQueries(this::getModelResult);
testFilterMultipleBrokerWhenReauthenticating()
testRealmResource().roles().get(DEFAULT_ROLE_NAME).addComposites(rolesToRemove));
testRealmResource().addDefaultOptionalClientScope(scopeOptId);
testRequestParameterPrecedenceOverOtherParameters()
testRealm().users().get(findUser("test-user@localhost").getId());
testRealmResource().components().query(parentId,
testRealm().users().delete(defaultUser.get(0).getId());
testAccountUpdateAttributeExpectSuccess("deniedsomeithing");
testExtendedClientPolicyIntefacesForBackchannelAuthenticationRequest()
testDynamicUserProfileReview_attributeNotRequiredAndSelectedByScopeCanBeIgnored()
testMigrateMapToSet()
testScopeMappingRoleRemoval()
testDoNotRemoveAttributes(KeycloakSession
testUser.getUsername());
testRealmAccountManagementPage.setAuthRealm(TEST);
testToStringStackOverflow()
testCustomValidationForUsername(KeycloakSession
testRealmResource().clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();
testSet_CacheFor()
testFeatureEnabledOnStart(LaunchResult
testAdminClientRegisterUnacceptableAuthType()
testPrimarySourceForBasicSetId()
testNullBearerTokenCustomErrorPage()
testNoNameIDAndPrincipalFromAttribute()
test08LDAPGroupSyncAfterGroupRename()
testIntrospectRefreshTokenAfterRefreshTokenRequest()
testClientInvocationWithOBBClient_rfc2553_invalidSubjectDN()
testAuthorizationEncryptionAlgRSA1_5EncA128CBC_HS256()
testRealmResource().flows().addExecution(execution);
testArtifactBindingLogoutTwoClientsRedirect()
testRealmDefaultClientScopes(migrationRealm);
testForceHostnamePortWhenNoProxyIsSet()
testRealm().clients().findByClientId("custom-audience").get(0);
test09MembershipUsingDifferentAttributes()
testBackchannelAuthenticationFlow(true,
testDeploymentDurability()
testBackchannelAuthenticationFlowOfflineAccessWithoutBindingMessage()
testIdTokenEncryptionAlgRSA_OAEPEncA192CBC_HS384()
testSecureSessionEnforceExecutor()
testingClient.testApp().oidcClientEndpoints().bindIntentWithClient(intentId,
testCodeToTokenRequestSuccess(String
testIdTokenSignatureAndEncryption(Algorithm.PS384,
testUserSessionInitializer()
testBackchannelAuthenticationFlowWithInvalidSignedAuthenticationRequest(boolean
testComplexCompareAndOr()
testCertificatePolicyModeAllNotRequestedAndNotPresent()
testAuthorizationEncryptionAlgRSA1_5EncA256GCM()
testDirectImpersonation()
testAuthorizationTokenSignatureAndEncryption(Algorithm.ES256,
testRequiredReadOnlyExistingAttribute()
testingClient.server("passwordPolicy").run(session
testLocalizationDuringLogout()
testArtifactBindingLoginFullExchangeWithRedirect()
testIdempotentProfile(KeycloakSession
testUsernameOnlyIfEditAllowed()
testEventsOnUpdateProfileWithEmailChange()
testSchemeAndPortFromRequestWhenNoProxySet()
testOverwriteBuiltinProfileNotAllowed()
testSamePosition()
testingClient.testApp().getFrontChannelLogoutToken();
testGetBooleanAttributeValue()
testUserResource()
testCanRepresentResourceBeanOfResourceOwnedByUser()
testCodeToTokenRequestSuccessES256usingJwks()
testArtifactBindingWithResponseAndAssertionSignature()
testRealm().clientScopes().findAll().subList(1,2);
test('parse
testClient("test",
testRealmResource().update(realm);
testLockConcurrentlyInternal(session,
testFAPICIBASignatureAlgorithms()
testIngressDisabledNotExisting()
testingClient.server()
testRealmResource().clients().get(clientUuid).addDefaultClientScope(scopeOptId);
testClientSecretsWithAuthMethod()
testExtensions()
testSessionsAreRemovedOnUserRemoval()
testIgnoreForwardedHeadersWhenFrontendUrlSet()
testClient.update(testClientRep);
testNameIdMapper()
testUser.getId(),
testRealm().users().get(newUserId).toRepresentation();
testPublicKeyEncodeDecode(String
testJpaSearchableAttributesUnset()
testApp.update(testAppRep);
testSecureCibaSessionEnforceExecutor(boolean
testEnableOnBuild(LaunchResult
testReadOnlyWithTOTPEnabled()
testAuthenticatedClientSession(clientSessions.get(client1.getId()),
testRealmResource().clients().get(clientUuid).update(clientRep);
testConfidentialClient()
testDeploymentRestarted(Set.of(),
testUpdateValidProfilesAndPolicies()
testRemovePolicyWhenRemovingScope()
testClientDisplayedOnConsentScreenWithEmptyConsentText()
testNumberOfFailuresForTemporaryDisabledUsersWithPasswordGrantType()
testConditionalRoleAuthenticatorWithRealmRoleIncludedInCompositeRealmRole()
testDisplayName()
testLogHandlerConfig()
testNoComparisonTypeNoClassRefsAndNoDeclRefs()
testWebAuthnIDLessWithNonResidentCredentialLogin()
testLimitAuthSessions()
testCreateAndUpdateUser()
testMissingStateParameter()
testImportClientArtifactResolutionSingleServices()
testRequiredIfAdmin()
testIdTokenEncryptionAlgRSA1_5EncA256GCM()
test08DisabledUserUnsyncedMode()
testSkip(NUM_ENTITIES);
testWinRootAndCategoryLevels(LaunchResult
testAccountUpdateAttributeExpectFailure("uSErCertificate");
testConfigurationChunks()
testRealm().users().create(UserBuilder.create().username("regular-user").password("password").build()));
testUserInfoSignatureAndEncryption(Algorithm.RS256,
testWelcomePageAdminUrl()
