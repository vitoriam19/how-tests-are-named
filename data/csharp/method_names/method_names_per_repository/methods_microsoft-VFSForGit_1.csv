testFileVnode.get());
testFileUpdate2Path.ShouldBeAFile(this.fileSystem).WithContents(testFileUpdate2Contents);
tester.GitIndexProjection.SparseEntries.Count.ShouldEqual(1);
testMountNone->CreateVnodeTree(badfsFilePath);
testFile2Path.ShouldBeAFile(this.bashRunner).WithContents(TestFile2Contents);
testFile3Path.ShouldNotExistOnDisk(this.fileSystem);
testFile2Handle.IsInvalid.ShouldEqual(false);
testFileDelete3Path.ShouldBeAFile(this.fileSystem).WithContents(testFileDelete3Contents);
testPaths.Add("B/C/e.txt");
tester.FileSystemCallbacks.OnLogsHeadChangeCallCount.ShouldEqual(1);
testFileDelete1Path.ShouldNotExistOnDisk(this.fileSystem);
tester.MockVirtualization.OnNewFileCreated(Path.Combine(".git",
testFileDelete2Path.ShouldNotExistOnDisk(this.fileSystem);
tester.GitIndexProjection.WaitForIsPathProjected();
test.Properties.Add(StartTimeKey,
testFolderParent)).ShouldNotExistOnDisk(fileSystem);
testFile1Handle.IsInvalid.ShouldEqual(false);
tester.MockVirtualization.OnNewFileCreated("testing",
testVnode->SetAttr(FileFlags_Invalid);
testMount->CreateVnodeTree(file1Path);
testSteps.push_back(
IOException("Test
tester.GitIndexProjection.PlaceholdersCreated.ShouldNotContain(entry
tester.GitIndexProjection.WaitForGetProjectedFileInfo();
tester.MockVirtualization.CreatedPlaceholders.ShouldContain(
testFileDelete2Path.ShouldBeAFile(this.fileSystem).WithContents(testFileDelete2Contents);
BeforeTest(ITest
testVnode->SetAttr(100);
testVnode->SetVnodeType(VLNK);
testVnode->SetVnodeType(VDIR);
tester.FileSystemCallbacks.OnIndexFileChangeCallCount.ShouldEqual(0);
testFile2Path.ShouldBeAFile(this.fileSystem).WithContents(testFile2OldContents);
testFileUpdate4Path.ShouldBeAFile(this.fileSystem).WithContents(testFileUpdate4OldContents);
testFile4Path.ShouldBeAFile(this.fileSystem).WithContents(testFile4Contents);
testCode(placeholders,
testReady.Wait();
tester.MockVirtualization.WaitForPlaceholderCreate();
testVnodeNone.get(),
testFilePath.ShouldBeAFile(this.bashRunner).WithContents(GrandChildFileContents);
tester.MockVirtualization.CreatedPlaceholders.ShouldContain(entry
testFileUpdate2Path.ShouldBeAFile(this.fileSystem).WithContents(testFileUpdate2OldContents);
tester.FileSystemCallbacks.OnFileRenamedCallCount.ShouldEqual(1);
testVnode->SetAttr(FileFlags_IsInVirtualizationRoot);
tester.MockVirtualization.CreatedSymLinks.Count.ShouldEqual(1);
tester.BackgroundTaskRunner.Count.ShouldEqual(1);
tester.GitIndexProjection.SparseEntries.Count.ShouldEqual(0);
testPaths.Add("B/C/F/g.txt");
tester.FileSystemCallbacks.ResetCalls();
Console.WriteLine("Test
testService.ShouldNotBeNull($"{TestServiceName}
test.FullName.Substring("GVFS.FunctionalTests.Tests.".Length));
tester.GetFileDataCallbackResultShouldEqual(HResult.Handle);
tester.BackgroundTaskRunner.Count.ShouldEqual(0);
testFileUpdate3Path.ShouldBeAFile(this.fileSystem).WithContents(testFileUpdate3OldContents);
testMountNone->CreateVnodeTree("/Volumes/USBSTICK",
testFileUpdate3Path.ShouldBeAFile(this.fileSystem).WithContents(testFileUpdate3Contents);
tester.MockVirtualization.CreatedPlaceholders.ShouldBeEmpty();
tester.GitIndexProjection.BlockIsPathProjected(willWaitForRequest:
testName).c_str(),
tester.InvokeGetFileDataCallback(expectedResult:
tester.GitIndexProjection.BlockGetProjectedFileInfo(willWaitForRequest:
testFileVnode.get(),
tester.InvokeUpdatePlaceholderIfNeeded(
tester.GitIndexProjection.MockFileTypesAndModes.TryAdd(
tester.MockVirtualization.UpdatedPlaceholders.ShouldContain(path
testFileDelete4Path.ShouldNotExistOnDisk(this.fileSystem);
tester.FileSystemCallbacks.OnFolderRenamedCallCount.ShouldEqual(0);
tester.BackgroundTaskShouldBeScheduled(WriteSymLinkFileName,
testService.WaitForStatus(ServiceControllerStatus.Stopped);
testVnodeDirectory.get(),
testFileVnode.reset();
tester.MockVirtualization.OnNewFileCreated("testing.txt",
testFilePath.ShouldBeAFile(this.bashRunner).WithContents(TestFile2Contents);
testVnode.get(),
testSubdirVnode.get(),
testFileUpdate1Path.ShouldBeAFile(this.fileSystem).WithContents(testFileUpdate1OldContents);
testVnode->SetAttr(FileFlags_IsEmpty);
tester.MockVirtualization.CreatedSymLinks.ShouldContain(entry
testVnode->SetVnodeType(static_cast<enum
tester.MockVirtualization.WaitForCreateWriteBuffer();
tester.InvokeOnGetFileStream(expectedResult:
testFilePath.ShouldBeAFile(this.bashRunner).WithContents(TestFileContents);
tester.FileSystemCallbacks.OnFileRenamedCallCount.ShouldEqual(0);
testFile4Path.ShouldBeAFile(this.fileSystem).WithContents(testFile4OldContents);
testMount.reset();
testFileName).ShouldBeAFile(this.fileSystem).WithContents(fileContents);
testFileVnode.get();
testFileDelete4Handle.IsInvalid.ShouldEqual(false);
testFileUpdate1Handle.IsInvalid.ShouldEqual(false);
testMount->CreateVnodeTree(repoPath
tester.Virtualizer.WritePlaceholderFile(
tester.MockVirtualization.OnCancelCommand(1);
tester.MockVirtualization.UpdatedPlaceholders.Clear();
testFile1Path.ShouldNotExistOnDisk(this.fileSystem);
testFileName)).ShouldBeAFile(this.fileSystem).WithContents(TestFileContents);
testFileName).ShouldNotExistOnDisk(this.fileSystem);
testFolderParent)).ShouldBeADirectory(fileSystem);
testCode(placeholders);
tester.GitIndexProjection.ExpandedFolders.ShouldMatchInOrder(TestFolderName);
tester.MockVirtualization.requiredCallbacks.GetPlaceholderInfoCallback(1,
tester.MockVirtualization.CreatedPlaceholders.ShouldNotContain(entry
testVnodeInvalidType.get(),
testFolderVirtualPath.ShouldNotExistOnDisk(fileSystem);
tester.MockVirtualization.OnNotifyFileRenamed(
testMount->CreateVnodeTree(otherFilePath);
testFilePath.ShouldBeAFile(this.fileSystem).WithContents();
testFile3Handle.IsInvalid.ShouldEqual(false);
testMount->CreateVnodeTree(nonRepoFilePath);
testPath.Replace('/',
tester.MockVirtualization.BytesWritten.ShouldEqual(MockGVFSGitObjects.DefaultFileLength);
tester.BackgroundTaskShouldBeScheduled(PlaceholderToLinkFileName,
testCode?.Invoke(database);
tester.BackgroundTaskRunner.BackgroundTasks[0].VirtualPath.ShouldEqual(WriteSymLinkFileName);
AfterTest(ITest
test](#Running-Specific-Tests)
tester.GitIndexProjection.UnblockIsPathProjected();
tester.MockVirtualization.BlockCreateWriteBuffer(willWaitForRequest:
tester.GitIndexProjection.SparseEntries.First().ShouldEqual(TestFolderName);
tester.GitIndexProjection.UnblockGetProjectedFileInfo();
testVnodeFile.get(),
tester.MockVirtualization.UpdatedPlaceholders.Count.ShouldEqual(0,
testFileUpdate4Path.ShouldBeAFile(this.fileSystem).WithContents(testFileUpdate4Contents);
testFileVnode->GetParentVnode()->attrValues.va_flags
tester.GitIndexProjection.WaitForPlaceholderCreate();
testRunTimes.OrderByDescending(kvp
testFile2Path.ShouldBeAFile(this.fileSystem).WithContents(testFile2Contents);
testDirVnode.reset();
testPaths.Add("e.txt");
testMount->CreateVnodeTree(repoPath,
tester.MockVirtualization.OnEnumerateDirectory(1,
testMount->CreateVnodeTree(filePath);
tester.BackgroundTaskRunner.BackgroundTasks[0].Operation.ShouldEqual(GVFS.Virtualization.Background.FileSystemTask.OperationType.OnFileSymLinkCreated);
testFileDelete1Path.ShouldBeAFile(this.fileSystem).WithContents(testFileDelete1Contents);
testFile1Path.ShouldBeAFile(this.fileSystem).WithContents(testFile1Contents);
testVnode.get()));
testMount->CreateVnodeTree(file2Path);
testFileDelete2Handle.IsInvalid.ShouldEqual(false);
testVnodeUnsupportedType.get(),
testFile2Path.ShouldNotExistOnDisk(this.fileSystem);
testReady.Set();
testFile4Path.ShouldNotExistOnDisk(this.fileSystem);
testDirVnode.get(),
testService.Stop();
testMountNone->CreateVnodeTree(filePath);
tester.MockVirtualization.OnNewFileCreated(TestFolderName,
tester.BackgroundTaskRunner.BackgroundTasks[0].VirtualPath.ShouldEqual(PlaceholderToLinkFileName);
testCode(table,
testFile4Handle.IsInvalid.ShouldEqual(false);
tester.BackgroundTaskShouldBeScheduled("testing.txt",
testFile1Path.ShouldBeAFile(this.fileSystem).WithContents(testFile1OldContents);
testRunTimes.TryAdd(test.FullName,
testVnode->SetGetAttrReturnCode(-1);
testMount->CreateVnodeTree(otherRepoPath,
tester.BackgroundTaskShouldBeScheduled("testing",
testMount->CreateVnodeTree(testFilePath);
tester.MockVirtualization.requiredCallbacks.StartDirectoryEnumerationCallback(1,
testBlock();
tester.MockVirtualization.WaitForCompletionStatus();
testParentFolderVirtualPath.ShouldBeADirectory(this.fileSystem).WithItems().ShouldContainSingle(info
testFileUpdate1Path.ShouldBeAFile(this.fileSystem).WithContents(testFileUpdate1Contents);
tester.FileSystemCallbacks.OnFolderRenamedCallCount.ShouldEqual(1);
tester.MockVirtualization.requiredCallbacks.EndDirectoryEnumerationCallback(enumerationGuid).ShouldEqual(HResult.Ok);
testFileUpdate3Handle.IsInvalid.ShouldEqual(false);
testFileUpdate2Handle.IsInvalid.ShouldEqual(false);
tester.FileSystemCallbacks.OnIndexFileChangeCallCount.ShouldEqual(1);
testFile3Path.ShouldBeAFile(this.fileSystem).WithContents(testFile3Contents);
tester.MockVirtualization.WaitForCompletionStatus().ShouldEqual(HResult.Ok);
testFileVnode->GetParentVnode().get());
[Description("Verify
testMount->CreateVnodeTree(dirPath,
testFileUpdate4Handle.IsInvalid.ShouldEqual(false);
testMountNone->CreateVnodeTree(testMountPath,
testFolderVirtualPath.ShouldBeADirectory(fileSystem);
testFileDelete4Path.ShouldBeAFile(this.fileSystem).WithContents(testFileDelete4Contents);
tester.FileSystemCallbacks.OnLogsHeadChangeCallCount.ShouldEqual(0);
testFileName)).ShouldNotExistOnDisk(this.fileSystem);
testFileDelete3Handle.IsInvalid.ShouldEqual(false);
testFileDelete1Handle.IsInvalid.ShouldEqual(false);
testFileDelete3Path.ShouldNotExistOnDisk(this.fileSystem);
testFile3Path.ShouldBeAFile(this.fileSystem).WithContents(testFile3OldContents);
tester.GitIndexProjection.PlaceholdersCreated.ShouldContain(entry
tester.MockVirtualization.UnblockCreateWriteBuffer();
testMount->CreateVnode("/foo");
testPaths.Add("d.txt");
